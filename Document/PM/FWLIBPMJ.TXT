




                ┌─────────────────────┐
                │                                          │
                │      ＦＡＮＵＣ Ｐｏｗｅｒ Ｍａｔｅ      │
                │                                          │
                │          ライブラリ関数説明書            │
                │                                          │
                │                                          │
                └─────────────────────┘


                                −目  次−

                関数一覧                        ....... 2
                ライブラリの戻り値              ....... 5
                通信関係                        ....... 7
                制御軸関係                      ....... 11
                プログラム関係                  ....... 33
                ＮＣ用データファイル関係        ....... 66
                操作履歴データ関係              ....... 112
                軸移動制御関係                  ....... 129
                その他                          ....... 149
                ＰＭＣ関係                      ....... 195

関数一覧


 通信関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_allclibhndl  ライブラリハンドルの取得
  ( 2) cnc_allclibhndl2 ライブラリハンドルの取得2
  ( 3) cnc_freelibhndl  ライブラリハンドルの解放
-------------------------------------------------------------------------------


 制御軸関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_actf         制御軸の実速度（Ｆ）のリード
  ( 2) cnc_absolute     制御軸の絶対位置のリード
  ( 3) cnc_machine      制御軸の機械位置のリード
  ( 4) cnc_relative     制御軸の相対位置のリード
  ( 5) cnc_distance     制御軸の残移動量のリード
  ( 6) cnc_skip         制御軸のスキップ位置のリード
  ( 7) cnc_srvdelay     制御軸のサーボ遅れ量のリード
  ( 8) cnc_accdecdly    制御軸の加減速遅れ量のリード
  ( 9) cnc_rddynamic    ダイナミックデータの一括リード
  (10) cnc_wrrelpos     制御軸の相対位置のオリジン／プリセット
-------------------------------------------------------------------------------


 プログラム関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_dwnstart     登録用ＮＣ指令データの出力の開始
  ( 2) cnc_download     登録用ＮＣ指令データの出力
  ( 3) cnc_dwnend       登録用ＮＣ指令データの出力の終了
  ( 4) cnc_upstart      ＮＣ指令データのリードの開始
  ( 5) cnc_upload       ＮＣ指令データのリード
  ( 6) cnc_upend        ＮＣ指令データのリードの終了
  ( 7) cnc_search       指定プログラムのサーチ
  ( 8) cnc_delall       全プログラムの削除
  ( 9) cnc_delete       指定プログラムの削除
  (10) cnc_rdprogdir    プログラムディレクトリのリード
  (11) cnc_rdproginfo   プログラム情報のリード
  (12) cnc_rdprgnum     実行中のプログラム番号のリード
  (13) cnc_rdseqnum     実行中のシーケンス番号のリード
  (14) cnc_rdexecprog   実行中プログラムのリード
  (15) cnc_wrmdiprog    ＭＤＩ運転用プログラムの出力
  (16) cnc_rdmdipntr    ＭＤＩ運転用実行ポインタのリード
  (17) cnc_wrmdipntr    ＭＤＩ運転用実行ポインタのライト
  (18) cnc_seqsrch      シーケンス番号のサーチ
  (19) cnc_rewind       カーソルの頭出し
-------------------------------------------------------------------------------



 ＮＣ用ファイルデータ関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_rdtofs       工具オフセット量のリード
  ( 2) cnc_wrtofs       工具オフセット量のライト
  ( 3) cnc_rdtofsr      工具オフセット量のリード（範囲指定）
  ( 4) cnc_wrtofsr      工具オフセット量のライト（範囲指定）
  ( 5) cnc_rdtofsinfo   工具オフセット情報のリード
  ( 6) cnc_rdparam      パラメータのリード
  ( 7) cnc_wrparam      パラメータのライト
  ( 8) cnc_rdparar      パラメータのリード（範囲指定）
  ( 9) cnc_wrparas      パラメータのライト（複数個指定）
  (10) cnc_rdparainfo   パラメータ情報のリード
  (11) cnc_rdsetr       セッティングデータのリード（範囲指定）
  (12) cnc_wrsets       セッティングデータのライト（複数個指定）
  (13) cnc_rdmacro      カスタムマクロ変数のリード
  (14) cnc_wrmacro      カスタムマクロ変数のライト
  (15) cnc_rdmacror     カスタムマクロ変数のリード（範囲指定）
  (16) cnc_wrmacror     カスタムマクロ変数のライト（範囲指定）
  (17) cnc_rdmacroinfo  カスタムマクロ変数情報のリード
  (18) cnc_getmactype   カスタムマクロ変数タイプの取得
  (19) cnc_setmactype   カスタムマクロ変数タイプの設定
-------------------------------------------------------------------------------


 操作履歴データ
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_stopophis    履歴データのサンプリングの停止
  ( 2) cnc_startophis   履歴データのサンプリングの再開
  ( 3) cnc_rdophisno    操作履歴データ数のリード
  ( 4) cnc_rdophistry   操作履歴データのリード
  ( 5) cnc_rdalmhisno   アラーム履歴データ数のリード
  ( 6) cnc_rdalmhistry  アラーム履歴データのリード
  ( 7) cnc_clearophis   操作履歴データのクリア
  ( 8) cnc_rdhissgnl    操作履歴対象信号のリード
  ( 9) cnc_wrhissgnl    操作履歴対象信号の設定
-------------------------------------------------------------------------------


 軸移動制御関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
 *( 1) cnc_opdi         信号操作指令
 *( 2) cnc_refpoint     リファレンス点復帰
 *( 3) cnc_abspoint     アブソリュート移動指令
 *( 4) cnc_incpoint     インクレメンタル移動指令
 *( 5) cnc_dwell        ドゥエル
 *( 6) cnc_coordre      座標系設定
 *( 7) cnc_exebufstat   実行バッファ状態の読取

 *( 8) cnc_finstate     実行完了状態の読取
 *( 9) cnc_setfin       実行完了状態の解除
-------------------------------------------------------------------------------
 * この関数は、Power Mate-D では使用できません。


 その他
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_sysinfo      ＣＮＣシステム情報のリード
  ( 2) cnc_sysconfig    ＣＮＣシステム構成情報のリード
  ( 3) cnc_statinfo     ＣＮＣステータス情報のリード
  ( 4) cnc_alarm        アラームステータスのリード
  ( 5) cnc_rdalminfo    アラーム情報のリード
  ( 6) cnc_modal        モーダルデータのリード
  ( 7) cnc_diagnoss     ダイアグノーズデータのリード
  ( 8) cnc_diagnosr     ダイアグノーズデータのリード（範囲指定）
  ( 9) cnc_getfigure    最大有効桁数、小数点以下桁数のリード
  (10) cnc_rdcurrent    サーボ調整用実電流のリード
  (11) cnc_rdsrvspeed   サーボ調整用実速度のリード
  (12) cnc_rdloopgain   サーボ調整用ループゲインのリード
  (13) cnc_rdopmsg      オペレータメッセージのリード
  (14) cnc_rdopnlsgnl   ソフトオペパネの出力信号イメージのリード
  (15) cnc_wropnlsgnl   ソフトオペパネの出力信号のライト
  (16) cnc_rdopnlgnrl   ソフトオペパネの汎用出力信号イメージのリード
  (17) cnc_wropnlgnrl   ソフトオペパネの汎用出力信号のライト
  (18) cnc_rdopnlgsname ソフトオペパネの汎用信号名称のリード
  (19) cnc_wropnlgsname ソフトオペパネの汎用信号名称の設定
-------------------------------------------------------------------------------


 ＰＭＣ関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) pmc_rdpmcrng     PMCの任意データのリード(範囲指定)
  ( 2) pmc_wrpmcrng     PMCの任意データのライト(範囲指定)
  ( 3) pmc_rdpmcinfo    PMCデータ情報のリード
-------------------------------------------------------------------------------

ライブラリの戻り値


+-----------+---------------------------+-----------------------------------+
|   戻り値  |         意      味        |           説明・対処方法          |
+-----------+---------------------------+-----------------------------------+
| EW_ITHIGHT| インテリジェントターミナル| ディスク内のデータを破壊する恐れが|
|  (-13)    | の低温アラーム            | あります、電源を切ってしばらくして|
|           |                           | から再起動して下さい。            |
+-----------+---------------------------+-----------------------------------+
| EW_ITHIGHT| インテリジェントターミナル| ディスク内のデータを破壊する恐れが|
|  (-12)    | の高温アラーム            | あります、電源を切ってしばらくして|
|           |                           | から再起動して下さい。            |
+-----------+---------------------------+-----------------------------------+
| EW_BUS    | バスエラー                | Power Mate のバスエラーです。     |
|  (-11)    |                           | サービス/担当部署にお問合せ下さい |
+-----------+---------------------------+-----------------------------------+
| EW_SYSTEM2| システムエラー(2)         | Power Mate のシステムエラーです。 |
|  (-10)    |                           | サービス/担当部署にお問合せ下さい |
+-----------+---------------------------+-----------------------------------+
| EW_HSSB   | ＨＳＳＢの通信エラー      | ＨＳＳＢのシリアルケーブルまたは  |
|  (- 9)    |                           | Ｉ／Ｆボードを確認してください。  |
+-----------+---------------------------+-----------------------------------+
| EW_SYSTEM | システムエラー            | Power Mate のシステムエラーです。 |
|  (- 5)    |                           | サービス/担当部署にお問合せ下さい |
+-----------+---------------------------+-----------------------------------+
| EW_BUSY   | ビジィ                    | Power Mate の処理が終了するまで待 |
|  (- 1)    |                           | つか、リトライしてください。      |
+-----------+---------------------------+-----------------------------------+
| EW_OK     | 正常終了                  |                                   |
|  (  0)    |                           |                                   |
+-----------+---------------------------+-----------------------------------+
| EW_FUNC   | エラー（関数未実行、      | 関数の実行に必要な特定の関数が前も|
|  (  1)    |         使用不可）        | って実行されていません。          |
|           |                           | または、その関数は使用できません。|
+-----------+---------------------------+-----------------------------------+
| EW_LENGTH | エラー（データブロック長、| データブロック長、データ個数を調査|
|  (  2)    |         データ個数の誤り）| 修正してください。                |
+-----------+---------------------------+-----------------------------------+
| EW_NUMBER | エラー（データ番号の誤り）| データ番号を調査、修正してください|
|  (  3)    |                           |                                   |
+-----------+---------------------------+-----------------------------------+
| EW_ATTRIB | エラー（データ属性の誤り）| データ属性を調査、修正してください|
|  (  4)    |                           |                                   |
+-----------+---------------------------+-----------------------------------+
|           |                           | データを調査、修正してください。  |
|           |                           |   ・指定プログラムの削除          |
| EW_DATA   | エラー（データの誤り）    |   ・指定プログラムのサーチ        |
|  (  5)    |                           |   ・ＮＣ指令データの入力の開始    |
|           |                           | では、指定プログラムが見つからない|
|           |                           | という意味です。                  |
+-----------+---------------------------+-----------------------------------+
| EW_NOOPT  | エラー（オプションなし）  | 該当するＮＣオプションがありません|
|  (  6)    |                           |                                   |

+-----------+---------------------------+-----------------------------------+
| EW_PROT   | エラー（ライトプロテクト）| 書き込み禁止です。                |
|  (  7)    |                           |                                   |
+-----------+---------------------------+-----------------------------------+
| EW_OVRFLOW| エラー（メモリオーバー    | Power Mate のメモリがオーバーフロ |
|  (  8)    |         フロー）          | しました。                        |
+-----------+---------------------------+-----------------------------------+
| EW_PARAM  | エラー（Power Mate パラメ | Power Mate パラメータの設定に誤り |
|  (  9)    |         ータの誤り）      | があります。                      |
+-----------+---------------------------+-----------------------------------+
|           |                           | バッファが空、またはフル状態です。|
| EW_BUFFER | エラー（バッファ空／フル）| Power Mate の処理が終了するまで待 |
|  ( 10)    |                           | つか、リトライしてください。      |
+-----------+---------------------------+-----------------------------------+
| EW_PATH   | エラー（系統番号の誤り）  | 系統番号に誤りがあります。        |
|  ( 11)    |                           |                                   |
+-----------+---------------------------+-----------------------------------+
| EW_MODE   | エラー（Power Mate のモー | Power Mate のモードが異なります。 |
|  ( 12)    |         ドの誤り）        | Power Mateのモードを変更してくだ  |
|           |                           | さい。                            |
+-----------+---------------------------+-----------------------------------+
| EW_REJECT |エラー（ＣＮＣ側処理の実行 | Power Mateにより処理の実行が拒否さ|
|  ( 13)    |         拒否）            | れました。実行条件を確認してくださ|
|           |                           | い。                              |
+-----------+---------------------------+-----------------------------------+

通信関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_allclibhndl  ライブラリハンドルの取得
  ( 2) cnc_allclibhndl2 ライブラリハンドルの取得２
  ( 3) cnc_freelibhndl  ライブラリハンドルの解放
-------------------------------------------------------------------------------

  ( 1) ライブラリハンドルの取得

関数名  cnc_allclibhndl

宣言    #include        "Fwlib32.h"
        short FAR PASCAL cnc_allclibhndl(unsigned short *FlibHndl);

解説    ライブラリハンドルを取得します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 2) ライブラリハンドルの取得２

関数名  cnc_allclibhndl2

宣言    #include        "Fwlib32.h"
        short FAR PASCAL cnc_allclibhndl(long node, unsigned short *FlibHndl);

解説    ライブラリハンドルを取得します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。

        node    デバイスのノード番号を指定します。（０〜７）

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 3) ライブラリハンドルの解放

関数名  cnc_freelibhndl

宣言    #include        "Fwlib32.h"
        short FAR PASCAL cnc_freelibhndl(unsigned short FlibHndl);

解説    ライブラリハンドルを解放します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

制御軸関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_actf         制御軸の実速度（Ｆ）のリード
  ( 2) cnc_absolute     制御軸の絶対位置のリード
  ( 3) cnc_machine      制御軸の機械位置のリード
  ( 4) cnc_relative     制御軸の相対位置のリード
  ( 5) cnc_distance     制御軸の残移動量のリード
  ( 6) cnc_skip         制御軸のスキップ位置のリード
  ( 7) cnc_srvdelay     制御軸のサーボ遅れ量のリード
  ( 8) cnc_accdecdly    制御軸の加減速遅れ量のリード
  ( 9) cnc_rddynamic    ダイナミックデータの一括リード
  (10) cnc_wrrelpos     制御軸の相対位置のオリジン／プリセット
-------------------------------------------------------------------------------

  ( 1) 制御軸の実速度（Ｆ）のリード

関数名  cnc_actf

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_actf(unsigned short FlibHndl,
                                                        ODBACT *actualfeed);

解説    制御軸の実速度（Ｆ）を読み出します。
        実速度はODBACT内のdataに格納されます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        actualfeed
                制御軸の実速度を返すODBACT構造体へのポインタです。
                ODBACT構造体は次の通りです。
                typedef struct odbact {
                        short  dummy[2];                /* 未使用 */
                        long  data;                     /* 実速度（Ｆ）*/
                } ODBACT ;

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        下記のNCプログラムの O1234/N20 のブロック実行中に、以下のプログラムを
        実行すると "CURRENT F=1200" と表示されます。
        (ミリ入力とします。)

        O1234 ;
        N10 G98 F1200 ;
        N20 G1 X10. Z200.
        N30 ...

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        ODBACT buf ;
        cnc_actf( FlibHndl, &buf ) ;
        printf( "CURRENT F=%ld\n", buf.data ) ;
}

  ( 2) 制御軸の絶対位置のリード

関数名  cnc_absolute

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_absolute(unsigned short FlibHndl, short axis,
                                       short length, ODBAXIS *absolute);

解説    axisで指定された軸の絶対位置を読み出します。
        絶対位置はODBAXIS内のdata[0]に格納されます。

        axisに ALL_AXES を指定することにより全軸の読み取りを一度に行うことがで
        きます。その際、各軸の絶対位置はODBAXIS内のdata配列に格納されます。

        絶対位置の小数点位置は、cnc_getfigure()関数で取得できます。

        リードした絶対位置には工具長補正量及びサーボ/加減速遅れ量が常に含ま
        れています。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        axis    リードする軸番号を指定します。
                        ALL_AXES : 全軸指定(ALL_AXES : -1)
                          1〜m   : １軸指定(m :現在の制御軸数)

        length  データブロック長（ODBAXIS構造体のサイズ）を指定します。

                               一軸指定                       全軸指定
                ODBAXIS  0┌───┐        ─          0┌───┐        ─
                          │dummy │        ↑           │dummy │        ↑
                         2├───┤        │          2├───┤        │
                          │type  │      length         │type  │      length
                         4├───┴───┐│          4├───┴───┐│
                          │  data[0]     │↓           │  data[0]     ││
                         8└───────┘─          8├───────┤│
                                                         〜              〜│
                                                4+4x(n-1)├───────┤│
                                                         │  data[n-1]   │↓
                                                    4+4xn└───────┘─
                n は、制御軸数となります。

        absolute
                各制御軸の絶対位置を返すODBAXIS構造体へのポインタです。
                ODBAXIS構造体は次の通りです。
                typedef struct odbaxis {
                        short   dummy ;                 /* 未使用 */
                        short   type ;                  /* 軸番号 */
                        long    data[MAX_AXIS] ;        /* 制御軸の絶対位置 */
                } ODBAXIS ;                      /* MAX_AXIS : 最大制御軸数 */

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。

        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBAXIS構造体のサイズ(length)が不正です。
                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        ３軸システムで、各軸の絶対座標値がそれぞれ
                第１軸          120.005
                第２軸          -50.119
                第３軸            0.080
        の時に以下のプログラムを実行すると
                1:  120005
                2:  -50119
                3:      80
        と表示されます。(ミリ入力、設定単位は IS-B であるとします。)

#include <stdio.h>
#include "apilib.h"
void example( void )
{
        ODBAXIS iodbaxis buf ;
        cnc_absolute( FlibHndl, -1, 4+4*3, &buf ) ;
        printf( "1:%8ld\n2:%8ld\n3:%8ld\n", buf.data[0], buf.data[1],
                buf.data[2] ) ;
}

  ( 3) 制御軸の機械位置のリード

関数名  cnc_machine

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_machine(unsigned short FlibHndl, short axis,
                                              short length, ODBAXIS *machine);

解説    axisで指定された軸の機械位置を読み出します。
        機械位置はODBAXIS内のdata[0]に格納されます。

        axisに ALL_AXES を指定することにより全軸の読み取りを一度に行うことがで
        きます。その際、各軸の機械位置はODBAXIS内のdata配列に格納されます。

        機械位置の小数点位置は、cnc_getfigure()関数で取得できます。

        リードした機械位置にはサーボ/加減速遅れ量が常に含まれています。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        axis    リードする軸番号を指定します。
                        ALL_AXES : 全軸指定(ALL_AXES : -1)
                          1〜m   : １軸指定(m :現在の制御軸数)

        length  データブロック長（ODBAXIS構造体のサイズ）を指定します。

                               一軸指定                       全軸指定
                ODBAXIS  0┌───┐        ─          0┌───┐        ─
                          │dummy │        ↑           │dummy │        ↑
                         2├───┤        │          2├───┤        │
                          │type  │      length         │type  │      length
                         4├───┴───┐│          4├───┴───┐│
                          │  data[0]     │↓           │  data[0]     ││
                         8└───────┘─          8├───────┤│
                                                         〜              〜│
                                                4+4x(n-1)├───────┤│
                                                         │  data[n-1]   │↓
                                                    4+4xn└───────┘─
                n は、制御軸数となります。

        machine
                各制御軸の機械位置を返すODBAXIS構造体へのポインタです。
                ODBAXIS構造体は次の通りです。
                typedef struct odbaxis {
                        short   dummy ;                 /* 未使用 */
                        short   type ;                  /* 軸番号 */
                        long    data[MAX_AXIS] ;        /* 制御軸の機械位置 */
                } ODBAXIS ;                      /* MAX_AXIS : 最大制御軸数 */

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。

        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBAXIS構造体のサイズ(length)が不正です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        第２軸の機械座標値が -26.5593 の時に以下のプログラムを実行すると
        "MACHINE 2: -265593" と表示されます。(インチ出力、設定単位は IS-B
        であるとします。)

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        ODBAXIS buf ;
        cnc_machine( FlibHndl, 2, 4+4*1, &buf ) ;
        printf( "MACHINE 2:%8ld\n", buf.data[0] ) ;
}

  ( 4) 制御軸の相対位置のリード

関数名  cnc_relative

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_relative(unsigned short FlibHndl, short axis,
                                       short length, ODBAXIS *relative);

解説    axisで指定された軸の相対位置を読み出します。
        相対位置はODBAXIS内のdata[0]に格納されます。

        axisに ALL_AXES を指定することにより全軸の読み取りを一度に行うことがで
        きます。その際、各軸の相対位置はODBAXIS内のdata配列に格納されます。

        相対位置の小数点位置は、cnc_getfigure()関数で取得できます。

        リードした相対位置には工具長補正量及びサーボ/加減速遅れ量が常に含ま
        れています。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        axis    リードする軸番号を指定します。
                        ALL_AXES : 全軸指定(ALL_AXES : -1)
                          1〜m   : １軸指定(m :現在の制御軸数)

        length  データブロック長（ODBAXIS構造体のサイズ）を指定します。

                               一軸指定                       全軸指定
                ODBAXIS  0┌───┐        ─          0┌───┐        ─
                          │dummy │        ↑           │dummy │        ↑
                         2├───┤        │          2├───┤        │
                          │type  │      length         │type  │      length
                         4├───┴───┐│          4├───┴───┐│
                          │  data[0]     │↓           │  data[0]     ││
                         8└───────┘─          8├───────┤│
                                                         〜              〜│
                                                4+4x(n-1)├───────┤│
                                                         │  data[n-1]   │↓
                                                    4+4xn└───────┘─
                n は、制御軸数となります。

        relative
                各制御軸の相対位置を返すODBAXIS構造体へのポインタです。
                ODBAXIS構造体は次の通りです。
                typedef struct odbaxis {
                        short   dummy ;                 /* 未使用 */
                        short   type ;                  /* 軸番号 */
                        long    data[MAX_AXIS] ;        /* 制御軸の相対位置 */
                } ODBAXIS ;                      /* MAX_AXIS : 最大制御軸数 */

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。

        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBAXIS構造体のサイズ(length)が不正です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        第４軸(回転軸)の相対座標値が 900.051 の時に以下のプログラムを実行する
        と "RELATIVE 4:  900051" と表示されます。(設定単位は IS-B であるとし
        ます。)

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        ODBAXIS buf ;
        cnc_relative( FlibHndl, 4, 4+4*1, &buf ) ;
        printf( "RELATIVE 4:%8ld\n", buf.data[0] ) ;
}

  ( 5) 制御軸の残移動量のリード

関数名  cnc_distance

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_distance(unsigned short FlibHndl, short axis,
                                       short length, ODBAXIS *distance);

解説    axisで指定された軸の残移動量を読み出します。
        残移動量はODBAXIS内のdata[0]に格納されます。

        axisに ALL_AXES を指定することにより全軸の読み取りを一度に行うことがで
        きます。その際、各軸の残移動量はODBAXIS内のdata配列に格納されます。

        残移動量の小数点位置は、cnc_getfigure()関数で取得できます。

        実際の残移動量の２倍の値が読み出されます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        axis    リードする軸番号を指定します。
                        ALL_AXES : 全軸指定(ALL_AXES : -1)
                          1〜m   : １軸指定(m :現在の制御軸数)

        length  データブロック長（ODBAXIS構造体のサイズ）を指定します。

                               一軸指定                       全軸指定
                ODBAXIS  0┌───┐        ─          0┌───┐        ─
                          │dummy │        ↑           │dummy │        ↑
                         2├───┤        │          2├───┤        │
                          │type  │      length         │type  │      length
                         4├───┴───┐│          4├───┴───┐│
                          │  data[0]     │↓           │  data[0]     ││
                         8└───────┘─          8├───────┤│
                                                         〜              〜│
                                                4+4x(n-1)├───────┤│
                                                         │  data[n-1]   │↓
                                                    4+4xn└───────┘─
                n は、制御軸数となります。

        distance
                各制御軸の残移動量を返すODBAXIS構造体へのポインタです。
                ODBAXIS構造体は次の通りです。
                typedef struct odbaxis {
                        short   dummy ;                 /* 未使用 */
                        short   type ;                  /* 軸番号 */
                        long    data[MAX_AXIS] ;        /* 制御軸の残移動量 */
                } ODBAXIS ;                      /* MAX_AXIS : 最大制御軸数 */

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。

        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBAXIS構造体のサイズ(length)が不正です。
                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        ４軸システムで、各軸の残移動量がそれぞれ
                第１軸          -17.300 (直線軸)
                第２軸           30.009 (直線軸)
                第３軸           -0.180 (回転軸)
                第４軸            4.000 (直線軸)
        の時に以下のプログラムを実行すると
                1:  -34600
                2:   60018
                3:    -360
                4:    8000
        と表示されます。(ミリ入力、設定単位は IS-B であるとします。)
#include <stdio.h>
#include "apilib.h"
void example( void )
{
        ODBAXIS buf ;
        unsigned int idx ;
        cnc_distance( FlibHndl, -1, 4+4*4, &buf ) ;
        for ( idx = 0 ; idx < 4 ; idx++ )
                printf( "%u:%8ld\n", idx, buf.data[idx] ) ;
}

  ( 6) 制御軸のスキップ位置のリード

関数名  cnc_skip

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_skip(unsigned short FlibHndl, short axis,
                                           short length, ODBAXIS *skip);

解説    axisで指定された軸のスキップ位置を読み出します。
        スキップ位置はODBAXIS内のdata[0]に格納されます。

        axisに ALL_AXES を指定することにより全軸の読み取りを一度に行うことがで
        きます。その際、各軸のスキップ位置はODBAXIS内のdata配列に格納されます。

        スキップ位置の小数点位置は、cnc_getfigure()関数で取得できます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        axis    リードする軸番号を指定します。
                        ALL_AXES : 全軸指定(ALL_AXES : -1)
                          1〜m   : １軸指定(m :現在の制御軸数)

        length  データブロック長（ODBAXIS構造体のサイズ）を指定します。

                               一軸指定                       全軸指定
                ODBAXIS  0┌───┐        ─          0┌───┐        ─
                          │dummy │        ↑           │dummy │        ↑
                         2├───┤        │          2├───┤        │
                          │type  │      length         │type  │      length
                         4├───┴───┐│          4├───┴───┐│
                          │  data[0]     │↓           │  data[0]     ││
                         8└───────┘─          8├───────┤│
                                                         〜              〜│
                                                4+4x(n-1)├───────┤│
                                                         │  data[n-1]   │↓
                                                    4+4xn└───────┘─
                n は、制御軸数となります。

        skip
                各制御軸のスキップ位置を返すODBAXIS構造体へのポインタです。
                ODBAXIS構造体は次の通りです。
                typedef struct odbaxis {
                        short   dummy ;             /* 未使用 */
                        short   type ;              /* 軸番号 */
                        long    data[MAX_AXIS] ;    /* 制御軸のスキップ位置 */
                } ODBAXIS ;                      /* MAX_AXIS : 最大制御軸数 */

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────

                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBAXIS構造体のサイズ(length)が不正です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは第１軸と第２軸のスキップ位置を表示します。

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        ODBAXIS buf ;
        unsigned int idx ;
        cnc_skip( FlibHndl, 1, 4+4*1, &buf ) ;
        printf( "SKIP 1:%8ld\n", buf.data[0] ) ;
        cnc_skip( FlibHndl, 2, 4+4*1, &buf ) ;
        printf( "SKIP 2:%8ld\n", buf.data[0] ) ;
}

  ( 7) 制御軸のサーボ遅れ量のリード

関数名  cnc_srvdelay

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_srvdelay(unsigned short FlibHndl, short axis,
                                        short length, ODBAXIS *srvdelay);

解説    axisで指定された軸のサーボ遅れ量を読み出します。
        サーボ遅れ量はODBAXIS内のdata[0]に格納されます。

        axisに ALL_AXES を指定することにより全軸の読み取りを一度に行うことがで
        きます。その際、各軸のサーボ遅れ量はODBAXIS内のdata配列に格納されます。

        サーボ遅れ量の小数点位置は、cnc_getfigure()関数で取得できます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        axis    リードする軸番号を指定します。
                        ALL_AXES : 全軸指定(ALL_AXES : -1)
                          1〜m   : １軸指定(m :現在の制御軸数)

        length  データブロック長（ODBAXIS構造体のサイズ）を指定します。

                               一軸指定                       全軸指定
                ODBAXIS  0┌───┐        ─          0┌───┐        ─
                          │dummy │        ↑           │dummy │        ↑
                         2├───┤        │          2├───┤        │
                          │type  │      length         │type  │      length
                         4├───┴───┐│          4├───┴───┐│
                          │  data[0]     │↓           │  data[0]     ││
                         8└───────┘─          8├───────┤│
                                                         〜              〜│
                                                4+4x(n-1)├───────┤│
                                                         │  data[n-1]   │↓
                                                    4+4xn└───────┘─
                n は、制御軸数となります。

        srvdelay
                各制御軸のサーボ遅れ量を返すODBAXIS構造体へのポインタです。
                ODBAXIS構造体は次の通りです。
                typedef struct odbaxis {
                        short   dummy ;             /* 未使用 */
                        short   type ;              /* 軸番号 */
                        long    data[MAX_AXIS] ;    /* 制御軸のサーボ遅れ量 */
                } ODBAXIS ;                      /* MAX_AXIS : 最大制御軸数 */

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────

                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBAXIS構造体のサイズ(length)が不正です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは全軸分(軸数=MAX)のサーボ遅れ量を表示します。

#include <stdio.h>
#include "apilib.h"
void example( void )
{
        ODBAXIS buf ;
        unsigned int idx ;
        cnc_srvdelay( FlibHndl, -1, 4+4*MAX, &buf ) ;
        for ( idx = 0 ; idx < MAX ; idx++ )
                printf( "%u:%8ld\n", idx, buf.data[idx] ) ;
}

  ( 8) 制御軸の加減速遅れ量のリード

関数名  cnc_accdecdly

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_accdecdly(unsigned short FlibHndl,
                                short axis, short length, ODBAXIS *accdecdly);

解説    axisで指定された軸の加減速遅れ量を読み出します。
        加減速遅れ量はODBAXIS内のdata[0]に格納されます。

        axisに ALL_AXES を指定することにより全軸の読み取りを一度に行うことがで
        きます。その際、各軸の加減速遅れ量はODBAXIS内のdata配列に格納されます。

        加減速遅れ量の小数点位置は、cnc_getfigure()関数で取得できます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        axis    リードする軸番号を指定します。
                        ALL_AXES : 全軸指定(ALL_AXES : -1)
                          1〜m   : １軸指定(m :現在の制御軸数)

        length  データブロック長（ODBDY構造体のサイズ）を指定します。

                               一軸指定                       全軸指定
                ODBDY    0┌───┐        ─          0┌───┐        ─
                          │dummy │        ↑           │dummy │        ↑
                         2├───┤        │          2├───┤        │
                          │type  │      length         │type  │      length
                         4├───┴───┐│          4├───┴───┐│
                          │  data[0]     │↓           │  data[0]     ││
                         8└───────┘─          8├───────┤│
                                                         〜              〜│
                                                4+4x(n-1)├───────┤│
                                                         │  data[n-1]   │↓
                                                    4+4xn└───────┘─
                n は、制御軸数となります。

        accdecdly
                各制御軸の加減速遅れ量を返すODBAXIS構造体へのポインタです。
                ODBAXIS構造体は次の通りです。
                typedef struct odbaxis {
                        short   dummy ;             /* 未使用 */
                        short   type ;              /* 軸番号 */
                        long    data[MAX_AXIS] ;    /* 制御軸の加減速遅れ量 */
                } ODBAXIS ;                      /* MAX_AXIS : 最大制御軸数 */

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────

                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBAXIS構造体のサイズ(length)が不正です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは全軸分(軸数=MAX)の加減速遅れ量を表示します。

#include <stdio.h>
#include "apilib.h"
void example( void )
{
        ODBAXIS buf ;
        unsigned int idx ;
        cnc_accdecdly( FlibHndl, -1, 4+4*MAX, &buf ) ;
        for ( idx = 0 ; idx < MAX ; idx++ )
                printf( "%u:%8ld\n", idx, buf.data[idx] ) ;
}

  ( 9) ダイナミックデータの一括リード

関数名  cnc_rddynamic

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rddynamic(unsigned short FlibHndl,
                                short axis, short length, ODBDY *rddynamic);

解説    ＣＮＣの運転に伴い変化する各種データを一度に読み出します。
        読み取れるデータは次の通りです。

                データ                          個別に読みだす時に使用する関数
                -------------------------------+-------------------------------
                アラームステータス              cnc_alarm
                実行中のプログラム番号          cnc_rdprgnum
                メインプログラム番号            cnc_rdprgnum
                シーケンス番号                  cnc_rdseqnum
                実速度                          cnc_actf
                制御軸の絶対位置（軸指定に従う）cnc_absolute
                制御軸の機械位置（軸指定に従う）cnc_machine
                制御軸の相対位置（軸指定に従う）cnc_relative
                制御軸の残移動量（軸指定に従う）cnc_distance

        各データの内容は上の「個別に読みだす時に使用する関数」のものと同一で
        す。データの形式などに関しては各関数の解説を参照してください。

        軸に関するデータは、axisで指定された軸データを読み出します。
        各データはODBDY内のoaxis構造体に格納されます。

        axisに ALL_AXES を指定することにより全軸の読み取りを一度に行うことがで
        きます。その際、軸に関する各種データはODBDY内のfaxis構造体内の各配列に
        格納されます。

        軸に関するデータの小数点位置は、cnc_getfigure()関数で取得できます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        axis    リードする軸番号を指定します。
                        ALL_AXES : 全軸指定(ALL_AXES : -1)
                          1〜m   : １軸指定(m :現在の制御軸数)

        length  データブロック長（ODBDY構造体のサイズ）を指定します。

                               一軸指定                       全軸指定
                ODBAXIS  0┌───┐        ─          0┌───┐        ─
                          │dummy │        ↑           │dummy │        ↑
                         2├───┤        │          2├───┤        │
                          │axis  │        │           │axis  │        │
                         4├───┤        │          4├───┤        │
                          │alarm │        │           │alarm │        │
                         6├───┤        │          6├───┤        │

                          │prgnum│        │           │prgnum│        │
                         8├───┤        │          8├───┤        │
                          │prgmnum       length         │prgmnum       length
                        10├───┴───┐│         10├───┴───┐│
                          │  seqnum      ││           │ seqnum       ││
                        14├───────┤│         14├───────┤│
                          │  actf        ││           │ actf         ││
                        18├───────┤│         18├───────┤│
                          │  acts        ││           │ acts         ││
                        22├───────┤│         22├───────┤│
                          │  absolute    ││           │ absolute[0]  ││
                        26├───────┤│         26├───────┤│
                          │  machine     ││           〜              〜│
                        30├───────┤│ 22+4x(n-1)├───────┤│
                          │  relative    ││           │ absolute[n-1]││
                        34├───────┤│     22+4xn├───────┤│
                          │  distance    │↓           │ machine[0]   ││
                        38└───────┘─ 22+4x(n+1)├───────┤│
                                                         〜              〜│
                                              22+4x(2n-1)├───────┤│
                                                         │ machine[n-1] ││
                                                  22+4x2n├───────┤│
                                                         │ relative[0]  ││
                                              22+4x(2n+1)├───────┤│
                                                         〜              〜│
                                              22+4x(3n-1)├───────┤│
                                                         │ relative[n-1]││
                                                  22+4x3n├───────┤│
                                                         │ distance[0]  ││
                                              22+4x(3n+1)├───────┤│
                                                         〜              〜│
                                              22+4x(4n-1)├───────┤│
                                                         │ distance[n-1]│↓
                                                  22+4x4n└───────┘─

                n は、最大制御軸数（有効データは制御軸数分）です。

        rddynamic
                各種データを獲得するODBDY構造体へのポインタです。
                ODBDY構造体は次の通りです。
                typedef struct odbdy {
                        short  dummy ;     /* not used                */
                        short  axis ;      /* axis number             */
                        short  alarm ;     /* alarm status            */
                        short  prgnum ;    /* current program number  */
                        short  prgmnum ;   /* main program number     */
                        long   seqnum ;    /* current sequence number */
                        long   actf ;      /* actual feedrate         */
                        long   acts ;      /* not used                */
                        union {
                            struct {
                                long  absolute[MAX_AXIS] ; /* absolute */
                                long  machine[MAX_AXIS] ;  /* machine  */
                                long  relative[MAX_AXIS] ; /* relative */
                                long  distance[MAX_AXIS] ; /* distance to go */

                            } faxis ; /* In case of all axes */
                            struct {
                                long  absolute ; /* absolute */
                                long  machine ;  /* machine  */
                                long  relative ; /* relative */
                                long  distance ; /* distance to go */
                            } oaxis ; /* In case of 1 axis */
                        } pos ;
                } ODBDY ;                       /* MAX_AXIS : 最大制御軸数 */

                dummy           未使用

                axis            軸番号
                                リードした軸番号を返します。

                alarm           アラームステータス
                                各ビットの意味は次の通りです。
                                        #15:外部アラームメッセージ
                                        #14:（未使用）
                                        #13:（未使用）
                                        #12:（未使用）
                                        #11:（未使用）
                                        #10:Ｐ／Ｓ５０００番台
                                        #09:（未使用）
                                        #08:ＡＰＣアラーム
                                        #07:システムアラーム
                                        #06:サーボアラーム
                                        #05:オーバヒートアラーム
                                        #04:オーバトラベルアラーム
                                        #03:Ｐ／Ｓその他
                                        #02:Ｐ／Ｓ１０１
                                        #01:Ｐ／Ｓ０００
                                        #00:Ｐ／Ｓ１００

                prgnum          実行中のプログラム番号
                                （自動運転停止中は選択中の番号です）

                prgmnum         メインプログラム番号

                seqnum          実行中のシーケンス番号

                actf            制御軸の実速度

                absolute        制御軸の絶対位置

                machine         制御軸の機械位置

                relative        制御軸の相対位置

                distance        制御軸の残移動量

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────

                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBDY構造体のサイズ(length)が不正です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは全軸分(軸数=MAX)のダイナミックデータを読みだして
        画面に表示します。

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        struct odbdy buf ;
        unsigned int idx ;
        cnc_rddynamic( FlibHndl, -1, sizeof(buf), &buf ) ;
        printf( "Current program = %d   Main program = %d\n",
                        buf.prgnum, buf.prgmnum ) ;
        printf( "Sequence number = %ld\n", buf.seqnum ) ;
        printf( "actf = %ld   ", buf.actf ) ;
        printf( "Alarm status = %d\n", buf.alarm ) ;
        printf( "AXIS Absolute  Relative  Machine   Distance\n" ) ;
        printf( "----+---------+---------+---------+--------\n" ) ;
        for ( idx = 0 ; idx < MAX ; idx++ )
                printf( "  %u  %8ld  %8ld  %8ld  %8ld\n", idx,
                        buf.pos.faxis.absolute[idx],
                        buf.pos.faxis.relative[idx],
                        buf.pos.faxis.machine[idx],
                        buf.pos.faxis.distance[idx] ) ;
}

  (10) 制御軸の相対位置のオリジン／プリセット

関数名  cnc_wrrelpos

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wrrelpos(unsigned short FlibHndl,
                                               short length, IDBWRR *wrrelpos);

解説    typeで指定した軸に対して相対位置のプリセット（再設定）を行います。
        プリセットデータはIDBWRR内のdata[0]にセットします。

        プリセットデータとして０を設定すると、オリジン（相対位置の０クリア）と
        なります。

        typeに ALL_AXES を指定することにより全軸のプリセットを一度に行うことが
        できます。その際、各軸のプリセットデータはIDBWRR内のdata配列にセットし
        ます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        length  データブロック長（IDBWRR構造体のサイズ）を指定します。

                               一軸指定                       全軸指定
                IDBWRR   0┌───┐        ─          0┌───┐        ─
                          │datano│        ↑           │datano│        ↑
                         2├───┤        │          2├───┤        │
                          │type  │      length         │type  │      length
                         4├───┴───┐│          4├───┴───┐│
                          │  data[0]     │↓           │  data[0]     ││
                         8└───────┘─          8├───────┤│
                                                         〜              〜│
                                                4+4x(n-1)├───────┤│
                                                         │  data[n-1]   │↓
                                                    4+4xn└───────┘─
                n は、制御軸数です。

        wrrelpos
                各制御軸の相対位置をプリセットするIDBWRR構造体へのポインタです。
                IDBERR構造体は次の通りです。
                typedef struct idbwrr {
                        short   datano;                 /* 未使用 */
                        short   type;                   /* 軸番号 */
                        long    data[MAX_AXIS];         /* プリセットデータ */
                } IDBWRR ;                       /* MAX_AXIS : 最大制御軸数 */

                type    プリセットする軸番号を指定します。
                                ALL_AXES : 全軸指定(ALL_AXES : -1)
                                  1〜m   : １軸指定(m :現在の制御軸数)

                data    プリセットする値を指定します。
                                data[0]〜data[m-1] : 全軸指定

                                data[0]            : 一軸指定

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                IDBWRR構造体のサイズ(length)が不正です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(type)の指定が不適切です。

                EW_DATA         データの誤り
                                dataの内容が指定可能範囲外です。

CNCオプション   本機能にオプションは必要ありません。。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは１軸目の相対位置をプリセットします。

#include <stdio.h>
#include "apilib.h"
#define FIRST_AXIS      1
#define ONE_AXIS_LEN    8

IDBWRR          wrrelpos ;
short           ret ;

wrrelpos.type = FIRST_AXIS ;
wrrelpos.data[0] = 0 ;
ret = cnc_wrrelpos( FlibHndl, ONE_AXIS_LEN, &wrrelpos);
                                     /* 1軸目の相対位置をプリセット */

プログラム関係
-------------------------------------------------------------------------------
  関数名                機　能　内　容
-------------------------------------------------------------------------------
　( 1) cnc_dwnstart     登録用ＮＣ指令データの出力の開始
　( 2) cnc_download     登録用ＮＣ指令データの出力
  ( 3) cnc_dwnend       登録用ＮＣ指令データの出力の終了
　( 4) cnc_upstart      ＮＣ指令データのリードの開始
　( 5) cnc_upload       ＮＣ指令データのリード
　( 6) cnc_upend        ＮＣ指令データのリードの終了
　( 7) cnc_search       指定プログラムのサーチ
　( 8) cnc_delall       全プログラムの削除
　( 9) cnc_delete       指定プログラムの削除
  (10) cnc_rdprogdir    プログラムディレクトリのリード
  (11) cnc_rdproginfo   プログラム情報のリード
  (12) cnc_rdprgnum     実行中のプログラム番号のリード
  (13) cnc_rdseqnum     実行中のシーケンス番号のリード
  (14) cnc_rdexecprog   実行中プログラムのリード
  (15) cnc_wrmdiprog    ＭＤＩ運転用プログラムの出力
  (16) cnc_rdmdipntr    ＭＤＩ運転用実行ポインタのリード
  (17) cnc_wrmdipntr    ＭＤＩ運転用実行ポインタのライト
  (18) cnc_seqsrch      シーケンス番号のサーチ
  (19) cnc_rewind       カーソルの頭出し
-------------------------------------------------------------------------------

  ( 1) 登録用ＮＣ指令データの出力の開始

関数名  cnc_dwnstart

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_dwnstart(unsigned short FlibHndl);

解説    CNC側にNC指令データ(NCプログラム)の登録(ダウンロード)開始を要求します。
        （ダウンロードを行う前に必ず実行する必要があります。）

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_BUSY         ビジィ
                                ・cnc_dwnstart関数を実行済みです。
                                　cnc_dwnend関数にて前回の出力を終
                                  了させてください。
                                ・CNCがバックグラウンド編集中
                                　CNC側の裏編集を終了させてください。
                                ・CNCがアラーム（PS000,PS101）状態
                                　CNC側のアラームを解除してください。
                                ・CNCがMDIモード
                                　CNCのモードをMDI以外にしてください。

                EW_PROT         ライトプロテクト
                                ・プロテクトKEY(DI)がONになっています

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳しくはCNCパラメータ説明書を参照してください。

                        0000#0                    -+- 設定の影響を受けます
                        3201#2,#6               　-+
                        3202#0,#4               　-+
                        3290#7                  　-+

CNCモード       本機能には以下のモードが関係します。
                MDI 以外のモードで使用できます。

プログラム例
        「登録用NC指令データの出力(cnc_download)」の使用例を参照してください。

  ( 2) 登録用ＮＣ指令データの出力

関数名  cnc_download

宣言    #include        "Fwlib32.h
        FWLIBAPI short WINAPI cnc_download(unsigned short FlibHndl, char *data,
                                                                short number);

解説    登録用ＮＣ指令データの出力（ダウンロード）を行います。

        CNC側のデータ処理が遅れてデータが出力できない場合は出力できるまでライブ
        ラリの中で待ちます。

        ダウンロードを行う手順を以下に示します。

                ┌─────────┐
                │  cnc_dwnstart()　│  ダウンロードの開始
                └────┬────┘　（必ず行ってください）
          ┌──────→↓
          │    ┌────┴────┐
          │    │  cnc_download()　│　ダウンロードデータの出力
          │  　└────┬────┘
          │  　　　　　　↓
          │Yes ┌────┴────┐
          └──┤未出力のデータあり│
              　└────┬────┘
              　　　　　　↓No
                ┌────┴────┐
                │   cnc_dwnend() 　│　ダウンロードの終了
                └─────────┘　（必ず行ってください）

        出力データのフォーマット
        ~~~~~~~~~~~~~~~~~~~~~~~~
        CNC側に登録するNCプログラムは以下のようなフォーマットのASCIIコードの
        文字列です。

                LF Oxxxx LF ブロック1 LF ブロック2 LF ... LF Mxx LF %

                ただし  LF      0x0A ('\n')
                        Oxxxx   プログラム番号
                        Mxx     プログラム末尾のＭコード(M02,M30など)

        プログラム全体の先頭には LF を、末尾には '%' を付加してください。
        先頭の LF よりも前にあるデータは無視されます。登録するプログラムの
        先頭には必ずアドレス 'O' に続けてプログラム番号を指定してください。
        例えば、

                O1234 ;
                G1 F0.3 W10. ;
                M30 ;
                %

        というプログラムを登録する時は、


                "\nO1234\nG1F0.3W10.\nM30\n%"

        を cnc_download関数で転送します。転送を複数回に分けることも可能です。
        上の例では

                "\n"
                "O1234\n"
                "G1F0.3W10.\n"
                "M30\n"
                "%"

        のように１ブロックずつ転送することもできます。さらに、１ブロックを複
        数回に分けて転送することも可能です。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        data    ＮＣ指令データの先頭アドレスを指定します。

        number  ＮＣ指令データの文字数を指定します。(1〜256)

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_RESET        リセット、停止要求
                                『RESET or STOP』 が押されました。
                                cnc_dwnend関数をコールしてください。

                EW_FUNC         cnc_dwnstart関数が実行されていません。

                EW_LENGTH       データブロック長の誤り
                                データブロック長(number)が256バイトを超えてい
                                ます。

                EW_DATA         データの誤り
                                ・同一のプログラム番号が既に登録されている。
                                ・同一のプログラム番号がNC側で選択されている。
                                ・NCプログラムで使用できない文字が検出された。
                                ・TVチェック有効の時、ブロック内の文字数(ブロッ
                                  ク末尾のLFを含む)が奇数のブロックが検出された

                EW_PROT         ライトプロテクト
                                CNCのパラメータ（8000番台/9000番台プロテクト、
                                暗号化）が書き込み禁止の設定になっています。

                EW_OVRFLOW      メモリオーバーフロー
                                ＮＣ側の空き容量が足りませんので、容量を確保し
                                てください。

CNCオプション   本機能にオプションは必要ありません。


CNCパラメータ   本機能には以下のパラメータが関係します。
                詳しくはCNCパラメータ説明書を参照してください。
                        0000#0                    -+- 設定の影響を受けます
                        3201#2,#6               　-+
                        3202#0,#4               　-+
                        3290#7                  　-+

CNCモード       本機能には以下のモードが関係します。
                MDI 以外のモードで使用できます。

プログラム例
        以下のプログラムは次のNCプログラムをCNC側に登録します。
        O1234 ;
        M3 S1200 ;
        G0 Z0 ;
        G0 X0 Y0 ;
        G1 F500 X120. Y-30. ;
        M30 ;

#include "apilib.h"
short example( void )
{
        char *prg[] = {
                "\n",
                "O1234\n",
                "M3 S1200\n",
                "G0 Z0\n",
                "G0 X0 Y0\n",
                "G1 F500 X120. Y-30.\n",
                "M30\n",
                "%"
        } ;
        short ret, idx ;
        ret = cnc_dwnstart( FlibHndl ) ;
        if ( ret ) return ( ret ) ;
        for ( idx = 0 ; idx < sizeof(prg)/sizeof(char *) ; idx++ ) {
                ret = cnc_download( FlibHndl, prg[idx], strlen( prg[idx] ) ) ;
                if ( ret ) {
                        cnc_dwnend( FlibHndl ) ;
                        return ( ret ) ;
                }
        }
        ret = cnc_dwnend( FlibHndl ) ;
        return ( ret ) ;
}

  ( 3) 登録用ＮＣ指令データの出力の終了

関数名  cnc_dwnend

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_dwnend(unsigned short FlibHndl);

解説    CNC側にNCプログラムの登録終了を通知します。
        （ダウンロード終了後に必ず使用する必要があります）

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_FUNC         cnc_dwnstart関数が実行されていません。

                EW_DATA         データの誤り
                                ・同一のプログラム番号が既に登録されている。
                                ・同一のプログラム番号がNC側で選択されている。
                                ・NCプログラムで使用できない文字が検出された。
                                ・TVチェック有効の時、ブロック内の文字数(ブロッ
                                  ク末尾のLFを含む)が奇数のブロックが検出された

                EW_PROT         ライトプロテクト
                                CNCのパラメータ（8000番台/9000番台プロテクト、
                                暗号化）が書き込み禁止の設定になっています。

                EW_OVRFLOW      メモリオーバーフロー
                                ＮＣ側の空き容量が足りませんので、容量を確保し
                                てください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳しくはCNCパラメータ説明書を参照してください。
                        0000#0                    -+- 設定の影響を受けます
                        3201#2,#6               　-+
                        3202#0,#4               　-+
                        3290#7                  　-+

CNCモード       本機能には以下のモードが関係します。
                MDI 以外のモードで使用できます。

プログラム例
        「登録用NC指令データの出力(cnc_download)」の使用例を参照してください。

  ( 4) ＮＣ指令データのリードの開始

関数名  cnc_upstart

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_upstart(unsigned short FlibHndl,
                                                                short number);

解説    ＮＣ指令データのリード（アップロード）の開始をライブラリに通知します。
        （アップロードを行う前に必ず実行する必要があります）

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        number  プログラム番号を指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_BUSY         ビジィ
                                ・cnc_upstart関数を実行済みです。
                                　cnc_upend関数にて前回の出力を終了させてくだ
                                  さい。
                                ・CNCがアラーム(PS000,PS101)状態
                                　CNC側のアラームを解除してください。

                EW_DATA         データの誤り
                                プログラム番号(number)が見つかりません、または
                                不正です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        「NC指令データのリード(cnc_upload)」の使用例を参照してください。

  ( 5) ＮＣ指令データのリード

関数名  cnc_upload

宣言    #include        "Fwlib32.h
        FWLIBAPI short WINAPI cnc_upload(unsigned short FlibHndl,
                                        ODBUP *upld, unsigned short *number);

解説    CNCのテープ記憶（プログラムメモリ）に登録されているＮＣ指令データのリー
        ド（アップロード）を行います。

        アップロードを行う手順を以下に示します。

                ┌─────────┐
                │  cnc_upstart()　 │  アップロードの開始
                └────┬────┘　（必ず行ってください）
          ┌──────→↓
          │    ┌────┴────┐
          │    │  cnc_upload()　  │　ＮＣ指令データの入力
          │  　└────┬────┘
          │  　　　　　　↓
          │ No ┌────┴────┐
          └──┤ 最後のデータ='%'?│
              　└────┬────┘
              　　　　　　↓Yes
                ┌────┴────┐
                │   cnc_upend()  　│　アップロードの終了
                └─────────┘　（必ず行ってください）

        入力データのフォーマット
        ~~~~~~~~~~~~~~~~~~~~~~~~
        CNC側から読み込まれるNCプログラムは以下のようなフォーマットのASCII
        コードの文字列です。

                % LF Oxxxx LF ブロック1 LF ブロック2 LF ... LF Mxx LF %

                ただし  LF      0x0A ('\n')
                        Oxxxx   プログラム番号
                        Mxx     プログラム末尾のＭコード(M02,M30など)

        バッファに書き込まれた文字列の終端には null文字('\x00')が付加されま
        せん。読み込まれたNCプログラムの末尾は '%' です。この '%' を読み込み
        の終了条件としてください。
        この末尾の '%' が送られてきた後にさらに読み込みを実行すると、何も読み
        取れません。
        例えば、

                O1234 ;
                G1 F0.3 W10. ;
                M30 ;
                %

        というプログラムを本関数で読み込むと、


                バッファサイズが十分大きい場合
                1回目           "%\nO1234\nG1F0.3W10.\nM30\n%"  (24文字)
                2回目以降       ""                              (0文字)

        という文字列が得られます。バッファサイズが24バイトよりも短い場合は次
        のようになります。

                バッファサイズが10バイトの場合
                1回目           "%\nO1234\nG1"  (10文字)
                2回目           "F0.3W10.\nM"   (10文字)
                3回目           "30\n%"         (4文字)
                4回目以降       ""              (0文字)

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        upld    ＮＣ指令データを返すODBUP構造体へのポインタです。
                ODBUP構造体は次の通りです。
                typedef struct odbup {
                        short   dummy[2] ;              /* 未使用 */
                        char    data[MAX_RBUF] ;        /* ＮＣ指令データ */
                } ODBUP ;                       (MAX_RBUF : 最大リード文字数)

                ODBUP構造体のリードバッファサイズ MAX_RBUF のデフォルト値は 256
                です。

                ODBUP      0┌─────────────────┐
                            │             dummy[0]             │
                           2├─────────────────┤
                            │             dummy[1]             │
                           4├────────┬────────┘
                            │data[0] 　      │
                           5├────────┤
                            〜                〜
                4+MAX_RBUF-1├────────┤
                            │data[MAX_RBUF-1]│
                4+MAX_RBUF  └────────┘

        number  読み取る文字数を指定する変数のアドレスを指定します。
                この変数(*number) に対して１回で入力する文字数をセットしてくだ
                さい。
                リード終了後、この変数(*number) に実際に読み取った文字数が再セ
                ットされます。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_FUNC         cnc_upstart関数が実行されていません。

                EW_LENGTH       データブロック長の誤り

                                ＮＣ指令データの読み取り文字数(*number)に 0 が
                                指定されています。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムはCNC側に登録されているNCプログラムを読み込み、その
        内容を画面に表示します。

#include <stdio.h>
#include "apilib.h"
#define BUFSIZE 40
/* number is NC program number to be read. */
short example( short number )
{
        char buf[BUFSIZE+4] ;
        short ret, number ;
        ret = cnc_upstart( FlibHndl ) ;
        if ( ret ) return ( ret ) ;
        for (;;) {
                number = BUFSIZE - 1 ;
                ret = cnc_upload( FlibHndl, (ODBUP *)(&buf), &number ) ;
                if ( ret ) {
                        cnc_upend( FlibHndl ) ;
                        return ( ret ) ;
                }
                buf[4+number] = '\x00' ;
                printf( "%s", &buf[4] ) ;
                if ( buf[4+number-1] == '%' ) break ;
        }
        putchar( '\n' ) ;
        ret = cnc_upend( FlibHndl ) ;
        return ( ret ) ;
}

  ( 6) ＮＣ指令データのリードの終了

関数名  cnc_upend

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_upend(unsigned short FlibHndl);

解説    ＮＣ指令データのリード（アップロード）の終了をライブラリに通知します。
        （アップロードを行った後、必ず実行する必要があります）

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_FUNC         cnc_upstart関数が実行されていません。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        「NC指令データの入力(cnc_upload)」の使用例を参照してください。

  ( 7) 指定プログラムのサーチ

関数名  cnc_search

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_search(unsigned short FlibHndl,
                                                                short number);

解説    CNCのプログラムメモリに登録されているプログラム番号をサーチします。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        number  プログラム番号を指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_BUSY         ビジィ
                                ・"OP"信号オン中（EDIT,MEMORY モードのみ）
                                　加工プログラムを運転中です。
                                ・ダウンロード(cnc_dwnend)にて処理を終了させて
                                  ください。
                                ・CNCがアラーム（PS000,PS101）状態
                                　CNC側のアラームを解除してください。

                EW_DATA         データの誤り
                                プログラム(number)がNC内に存在しません、または
                                不正です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       CNCのモードにより、動作内容が変わります。
                        EDIT,MEMORY モード：フォアグラウンドサーチ
                        上記以外のモード　：バックグラウンドサーチ
                （フォアグラウンドサーチ：選択中プログラムの再設定を行います）
                （バックグラウンドサーチ：指定プログラムの存在確認を行います）

プログラム例
        以下のプログラムは指定された番号のプログラムをサーチし、結果を表示し
        ます。

#include <stdio.h>
#include "apilib.h"

/* num is program number to be searched. */
void example( short num )

{
        short ret ;
        ret = cnc_search( FlibHndl, num ) ;
        switch ( ret ) {
                case EW_OK:
                        printf( "PROGRAM O%d have been searched.\n", num ) ;
                case EW_DATA:
                        printf( "PROGRAM O%d doesn't exist.\n", num ) ;
                case EW_PROT:
                        printf( "PROTECTED.\n" ) ;
                case EW_BUSY:
                        printf( "REJECTED.\n" ) ;
        }
}

  ( 8) 全プログラムの削除

関数名  cnc_delall

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_delall(unsigned short FlibHndl);

解説    CNCに登録されているすべてのプログラム番号を削除します。

        プロテクトされているプログラムに対する削除は行われません。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_BUSY         ビジィ
                                ・CNC側がバックグラウンド編集中
                                　バックグラウンド編集を終了させてください。
                                ・ダウンロード、照合実行中
                                　cnc_dwnendにて処理を終了させてください。
                                ・CNCがアラーム(PS000,PS101)状態
                                　CNC側のアラームを解除してください。
                                ・CNC が MEMORY,MDI モード
                                　モードを MEMORY,MDI 以外に変更してください。
                                ・"OP"信号オン中（EDIT,MEMORY モードのみ）
                                　加工プログラムを運転中です。

                EW_PROT         ライトプロテクト
                                ・プロテクトKEY(DI)がONになっています
                                ・CNCのパラメータ（8000番台/9000番台プロテクト、
                                  暗号化）が書き込み禁止の設定になっています。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       本機能には以下のモードが関係します。
                MEM, MDI 以外のモードで使用できます。

プログラム例
        以下のプログラムは全プログラムを削除し、結果を表示します。

#include <stdio.h>
#include "apilib.h"

void example( void )
{

        short ret ;
        ret = cnc_delall( FlibHndl ) ;
        switch ( ret ) {
                case EW_OK:
                        printf( "ALL PROGRAMS has been deleted.\n", num ) ;
                case EW_PROT:
                        printf( "PROTECTED.\n" ) ;
                case EW_BUSY:
                        printf( "REJECTED.\n" ) ;
        }
}

  ( 9) 指定プログラムの削除

関数名  cnc_delete

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_delete(unsigned short FlibHndl,
                                                                short number);

解説    CNC側に登録されている特定の加工プログラム(NC指令データ)を削除します。

        プロテクトされているプログラムに対する削除は行われません。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        number  プログラム番号を指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_BUSY         ビジィ
                                ・CNC側がバックグラウンド編集中
                                　バックグラウンド編集を終了させてください。
                                ・ダウンロード、照合実行中
                                　cnc_dwnendにて処理を終了させてください。
                                ・CNCがアラーム(PS000,PS101)状態
                                　CNC側のアラームを解除してください。
                                ・CNC が MDI モード
                                　モードを MDI 以外に変更してください。
                                ・"OP"信号オン中（EDIT,MEMORY モードのみ）
                                　加工プログラムを運転中です。
                                ・フォアグラウンドで選択されているプログラム
                                　選択中のプログラムを変更してください。

                EW_PROT         ライトプロテクト
                                ・プロテクトKEY(DI)がONになっています
                                ・CNCのパラメータ（8000番台/9000番台プロテクト、
                                  暗号化）が書き込み禁止の設定になっています。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       本機能には以下のモードが関係します。
                MDI 以外のモードで使用できます。

プログラム例
        以下のプログラムは指定された番号のプログラムを削除し、結果を表示し
        ます。


#include <stdio.h>
#include "apilib.h"

/* num is program number to be deleted. */
void example( short num )
{
        short ret ;
        ret = cnc_delete( FlibHndl, num ) ;
        switch ( ret ) {
                case EW_OK:
                        printf( "PROGRAM O%d has been deleted.\n", num ) ;
                case EW_DATA:
                        printf( "PROGRAM O%d doesn't exist.\n", num ) ;
                case EW_PROT:
                        printf( "PROTECTED.\n" ) ;
                case EW_BUSY:
                        printf( "REJECTED.\n" ) ;
        }
}

  (10) プログラムディレクトリのリード

関数名  cnc_rdprogdir

宣言    #include        "Fwlib32.h
        FWLIBAPI short WINAPI cnc_rdprogdir(unsigned short FlibHndl,
                short type, short datano_s, short datano_e, short length,
                                                        PRGDIR *prgdir);

解説    CNC側に登録されている全ての加工プログラムのプログラム番号一覧を読み
        だします。

        指定された範囲のプログラム番号、コメント、使用文字数をASCII文字列形式
        で読みだします。datano_s, datano_e にそれぞれ読みだし開始プログラム番
        号、読みだし終了プログラム番号をセットします。全てのプログラムを読み
        だすには datano_s=1, datano_e=9999 とします。type で読みだすプログラ
        ム一覧の形式を指定します

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        type    読み出すプログラム一覧の形式を指定します。
                        0 : プログラム番号のみ
                        1 : プログラム番号とコメント
                        2 : プログラム番号、コメントおよび使用文字数
        datano_s
                開始プログラム番号を指定します。

        datano_e
                終了プログラム番号を指定します。

        length  ブロック長(バッファサイズ)を指定します。

        prgdir  プログラムディレトクリを返すPRGDIR構造体へのポインタです。
                PRGDIR構造体は次の通りです。
                typedef struct prgdir {
                        char    prg_data[MAX_PBUF] ;    /* ディレトクリデータ */
                } PRGDIR ;                      (MAX_PBUF : 最大リード文字数)

        リードデータのフォーマット
        ~~~~~~~~~~~~~~~~~~~~~~~~~~
        CNC側から読み込まれるプログラムディレクトリ情報は以下のようなフォーマッ
        トのASCIIコードの文字列です。

        type=0  Oxxxx Oxxxx ... %

        type=1  % LF Oxxxx (コメント) LF Oxxxx (コメント) LF ... LF %

        type=2  Oxxxx (コメント) 使用文字数 Oxxxx (コメント) 使用文字数 ... %

                ただし  LF              0x0A ('\n')
                        Oxxxx           プログラム番号。昇順にソートされます。

                                        数字部分は先行する'0'が省略されたASCII
                                        文字列です。("O1"〜"O9999")
                        使用文字数      先行する'0'が省略されたASCII文字列です。
                                        この数値は80文字単位に切り上げられてい
                                        ます。
                        コメント        プログラム番号の直後に記憶されている
                                        ものが格納されます。コメント本体の最大
                                        長は48文字です。(前後のカッコを含める
                                        と最大50文字)48文字以上のコメントが記
                                        憶されている場合は、48文字を越えた部分
                                        は出力されません。プログラムにコメント
                                        がない場合はカッコのみ("()")が格納され
                                        ます。

        いずれの指定でも、プログラムが全く登録されていない場合や、指定された範
        囲のプログラムが存在しない場合は '%' のみが出力されます。

        バッファに書き込まれた文字列の終端にはnull文字('\x00')は付加されません。

        CNC側に以下のプログラムが登録されている時、datano_s=1, datano_e=9999
        として本関数を実行した時に読み取れる内容は次のようになります。

                プログラム番号(コメント)        文字数
                -------------------------------+------
                O0012 (TEST) ;                  420
                O0200 (WORK1) ;                 352
                O0201 ;                         537
                O9001 (SUB-PRO1) ;              781

        type    読み取れる内容
        -------+-----------------------------------------------------------
        0       "O12O200O201O9001%"
        1       "%\nO12(TEST)\nO200(WORK1)\nO201()\nO9001(SUB-PRO1)\n%"
        2       "O12(TEST)420O200(WORK1)352O201()537O9001(SUB-PRO1)781%"

        バッファサイズ(length)が小さい場合は、指定された長さまで読みだされます。
        バッファサイズが15バイトの場合は以下の通りです。

        type    読み取れる内容
        -------+-----------------------------------------------------------
        0       "O12O200O201O900"
        1       "%\nO12(TEST)\nO20"
        2       "O12(TEST)420O20"

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ブロック長(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                開始プログラム番号(datano_s)、終了プログラム番

                                号(datano_e)が不正です。

                EW_ATTRIB       データ属性の誤り
                                出力フォーマット(type)が不正です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは指定された範囲のNCプログラムの登録状況を読みだし、
        プログラム番号一覧を表示します。

#include <stdio.h>
#include <string.h>
#include "apilib.h"
#define BUFSIZE 256

/* start/end specify program number range. */
short example( short start, short end )
{
        char buf[BUFSIZE] ;
        short ret, idx ;
        memset( buf, '\x00', BUFSIZE ) ;
        ret = cnc_rdprogdir( FlibHndl, 0, start, end, BUFSIZE-1,
                                (struct prgdir *)(&buf) ) ;
        if ( ret ) {
                printf( "ERROR: %d\n", ret ) ;
                return ( ret ) ;
        }
        for ( idx = 0 ; idx < strlen( buf ) ; idx++ ) {
                if ( buf[idx] == 'O' ) putchar( '\n' ) ;
                putchar( buf[idx] ) ;
        }
        putchar( '\n' ) ;
}

  (11) プログラム情報のリード

関数名  cnc_rdproginfo

宣言    #include        "Fwlib32.h
        FWLIBAPI short WINAPI cnc_rdproginfo(unsigned short FlibHndl,
                                short type, short length, ODBNC *prginfo);

解説    CNC側に既に登録されている加工プログラムの管理データを読みだします。

        加工プログラムの管理データは、
                登録されているプログラムの数
                登録可能なプログラムの残り数
                使用済みのメモリ領域(キャラクタ数)
                使用可能なメモリ領域の残り数(キャラクタ数)
        です。これらの情報をバイナリ形式、またはASCII文字列形式で取得できます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        type    出力フォーマットを指定します。
                        0 : バイナリ
                        1 : ASCII

        length  データブロック長を指定します。
                        12 : バイナリ
                        31 : ASCII

        prginfo プログラムディレトクリを返すODBNC構造体へのポインタです。
                ODBNC構造体は次の通りです。
                typedef struct odbnc {
                     union {
                        struct {
                             short   reg_prg ;   /* 登録済プログラム数 */
                             short   unreg_prg ; /* 未登録プログラム数 */
                             long    used_mem ;  /* 使用済メモリ領域(文字数) */
                             long    unused_mem ;/* 未使用メモリ領域(文字数) */
                        } bin ;
                        char asc[31] ;           /* ASCII形式用バッファ */
                     } u ;
                } ODBNC ;

                type=0 の時
                        構造体の各メンバにバイナリ形式で値が格納されます。
                        prginfo.bin.reg_prg     登録済プログラム数
                        prginfo.bin.unreg_prg   未登録プログラム数
                        prginfo.bin.used_mem    使用済メモリ領域（キャラクタ数）
                        prginfo.bin.unused_mem  未使用メモリ領域（キャラクタ数）

                type=1 の時
                        prginfo.u.asc に以下の形式のASCII文字列が格納されます。


                        % LF d1 LF d2 LF d3 LF d4 LF %

                ただし  LF      0x0A ('\n')
                        d1      登録済みプログラム数
                        d2      未登録プログラム数(登録可能な残りプログラム数)
                        d3      使用済メモリ領域(キャラクタ数)
                        d4      未使用メモリ領域(使用可能な残りメモリ領域)
                                (キャラクタ数)
                d1〜d4 は先行する '0' が省略されたASCII文字列です。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ブロック長(length)が不正です。

                EW_ATTRIB       データ属性の誤り
                                出力フォーマット(type)が不正です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムはNCプログラムの管理データを読みだし、画面に表示しま
        す。

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        ODBNC buf ;
        short ret ;
        ret = cnc_rdproginfo( FlibHndl, 0, 12, &buf ) ;
        if ( ret )
                printf( "ERROR: %d\n", ret ) ;
        else {
                printf( "Registered program number   = %d\n",
                        buf.u.bin.reg_prg ) ;
                printf( "Registerable program number = %d\n",
                        buf.u.bin.unreg_prg ) ;
                printf( "Used memory                 = %ld\n",
                        buf.u.bin.used_mem ) ;
                printf( "Free memory                 = %ld\n",
                        buf.u.bin.unused_mem ) ;
        }
}

  (12) 実行中のプログラム番号のリード

関数名  cnc_rdprgnum

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdprgnum(unsigned short FlibHndl,
                                                        ODBPRO *prgnum);

解説    CNC側で現在選択されている加工プログラムのプログラム番号を読みだします。

        その時にCNC側がサブプログラムを実行している場合は、そのメインプログラム
        のプログラム番号も読出すことができます。この時、読出すことができるプロ
        グラム番号は、一番もとの親プログラムのプログラム番号です。実行中のプロ
        グラムがサブプログラムでない時には、メインプログラム番号には実行中プロ
        グラム番号がセットされます。

        アプリケーションプログラムでCNC側の加工プログラムを管理する場合などに
        使用します。

        プログラム番号は符号無しのバイナリ形式で buf.data, buf.mdata に格納
        されます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        prgnum  実行中のプログラム番号を返すODBPRO構造体へのポインタです。
                ODBPRO構造体は次の通りです。
                typedef struct odbpro {
                     short  dummy[2] ;   /* 未使用 */
                     short  data ;       /* 実行中のプログラム番号 */
                     short  mdata ;      /* メインプログラム番号 */
                } ODBPRO ;

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        下記のNCプログラムの O9876/N210 のブロック実行中に、以下のプログラム
        を実行すると "CURRENT(O9876)  MAIN(O1234)" と表示されます。

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        struct odbpro buf ;

        cnc_rdprgnum( FlibHndl, &buf ) ;
        printf( "CURRENT(O%d)  MAIN(O%d)\n", buf.data, buf.mdata ) ;
}

        O1234 ;                 O5678 ;                 O9876 ;
        N10 M98 P5678 ;         N110 M98 P9876 ;        N210 M45 ;
        N20 M30 ;               N120 M99 ;              N220 M99 ;

  (13) 実行中のシーケンス番号のリード

関数名  cnc_rdseqnum

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdseqnum(unsigned short FlibHndl,
                                                        ODBSEQ *seqnum);

解説    CNC側で現在選択されている加工プログラムの現在のシーケンス番号を読みだ
        します。

        ただし、加工プログラムの全ブロックにシーケンス番号が付けられていない
        時は、実行した最後のブロックのシーケンス番号が読まれます。

        アプリケーションプログラムでCNC側で実行しているブロックあるいは工程を
        監視したり、あるいは単に表示する場合などに使用します。

        シーケンス番号は符号無しのバイナリ形式で buf.data に格納されます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        seqnum  実行中のシーケンス番号を返すODBSEQ構造体へのポインタです。
                ODBSEQ構造体は次の通りです。
                typedef struct odbseq {
                     short  dummy[2] ;   /* 未使用 */
                     long  data     ;    /* 実行中のシーケンス番号 */
                } ODBSEQ ;

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        下記のNCプログラムの O1234/N30 のブロック実行中に、以下のプログラム
        を実行すると "CURRENT N30" と表示されます。

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        struct odbact buf ;
        cnc_rdseqnum( FlibHndl, &buf ) ;
        printf( "CURRENT N%ld\n", buf.data ) ;
}


        O1234 ;
        N10 M3 S1500 ;
        N20 T12 ;
        N30 G0 X110. ;
        N40 ...

  (14) 実行中プログラムのリード

関数名  cnc_rdexecprog

宣言    #include        "Fwlib32.h
        FWLIBAPI short WINAPI cnc_rdexecprog(unsigned short FlibHndl,
                        unsigned short *length, short *blknum, char *data);

解説    実行中プログラムの内容を指定文字数分読みだします。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        length  読み出す文字数を指定する変数のアドレスを指定します。
                この変数(*length) に対して読み取る文字数をセットしてください。
                リード終了後、この変数(*length) に実際に読み取った文字数が再セ
                ットされます。

        blknum  先読みブロック数を格納する変数のアドレスを指定します。

        data    実行中プログラム内容を格納する配列の先頭アドレスを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ブロック長(*length)が不正です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (15) ＭＤＩ運転用プログラムの出力

関数名  cnc_wrmdiprog

宣言    #include        "Fwlib32.h
        FWLIBAPI short WINAPI cnc_wrmdiprog(unsigned short FlibHndl,
                                                short length, char *data);

解説    ＭＤＩ運転用プログラムをCNCに出力(ダウンロード)します。

        出力データのフォーマット
        ~~~~~~~~~~~~~~~~~~~~~~~~
        CNC側に登録するNCプログラムは以下のようなフォーマットのASCIIコードの
        文字列です。

                LF Oxxxx LF ブロック1 LF ブロック2 LF ... LF Mxx LF %

                ただし  LF      0x0A ('\n')
                        Oxxxx   プログラム番号
                        Mxx     プログラム末尾のＭコード(M02,M30など)

        プログラム全体の先頭には LF を、末尾には '%' を付加してください。
        先頭の LF よりも前にあるデータは無視されます。登録するプログラムの
        先頭には必ずアドレス 'O' に続けてプログラム番号を指定してください。
        例えば、

                O1234 ;
                G1 F0.3 W10. ;
                M30 ;
                %

        というプログラムを登録する時は、

                "\nO1234\nG1F0.3W10.\nM30\n%"

        を cnc_wrmdiprog関数で転送します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        length  出力するＮＣ指令データの文字数を指定します。
                        1 〜 199

        data    ＮＣ指令データの先頭アドレスを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り

                                ブロック長(length)が不正です。

                EW_DATA         データの誤り
                                ・NCプログラムで使用できない文字が検出された。
                                ・TVチェック有効の時、ブロック内の文字数(ブロッ
                                  ク末尾のLFを含む)が奇数のブロックが検出された
                                上記の点を確認してください。

                EW_MODE         CNCモードの誤り
                                MDIモードに変更してください。

                EW_REJECT       CNC側の処理実行拒否

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       本機能は MDIモードで使用する必要があります。

  (16) ＭＤＩ運転用実行ポインタのリード

関数名  cnc_rdmdipntr

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdmdipntr(unsigned short FlibHndl,
                                                                ODBMDIP *mdip);

解説    MDI運転中プログラムに関連する実行ポインタ情報を獲得します。
        獲得できる内容は以下の項目です。
        ・実行中のプログラム番号
                MDI 運転の場合、基本的に 0 となります。
                実行中のプログラムがサブプログラムの場合、サブプログラム番号と
                なります。
        ・実行ブロックポインタ
                現在実行中のブロックポインタです。
        ・先読みプログラム番号
                先読みしている(CNC画面上で緑色で表示)プログラム番号です。
                MDI 運転の場合、基本的に 0 となり、サブプログラムを先読みしてい
                る場合、そのプログラム番号となります。
        ・先読みブロックポインタ
                先読みしているプログラム内の最後のブロックポインタです。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        mdip    実行ポインタ情報を返すODBMDIP構造体へのポインタです。
                ODBMDIP構造体は次の通りです。
                typedef struct odbmdip {
                     short      mdiprog;        /* 実行中のプログラム番号 */
                     long       mdipntr;        /* 実行ブロックポインタ */
                     short      crntprog;       /* 先読みプログラム番号 */
                     long       crntpntr;       /* 先読みブロックポインタ */
                } ODBMDIP ;

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
　　　          EW_MODE         CNCモードの誤り
                                MDIモードに変更してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       本機能は MDIモードで使用する必要があります。

  (17) ＭＤＩ運転用実行ポインタのライト

関数名  cnc_wrmdipntr

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wrmdipntr(unsigned short FlibHndl,
                                                                long crntpntr);

解説    ＭＤＩ運転用実行開始ポインタを指定します。
        (実行中ポインタを直接操作することはできません)

        当関数を実行するときは、先に cnc_wrmdiprog()関数により、MDI プログラム
        を登録してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        crntpntr
                実行開始ブロックポインタを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_DATA         データの誤り
                                実行開始ブロックポインタ(crntpntr)の指定が不正
                                です。

                EW_MODE         CNCモードの誤り
                                MDIモードに変更してください。

                EW_REJECT       CNC側の処理実行拒否
                                ・編集中
                                ・MDIプログラムが登録されていません。
                                　cnc_wrmdiprog関数を使用して、あらかじめプログ
                                　ラムを登録してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       本機能は MDIモードで使用する必要があります。

  (18) シーケンス番号のサーチ

関数名  cnc_seqsrch

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_seqsrch(unsigned short FlibHndl,
                                                                long seq_no);

解説    CNC側で現在選択されている加工プログラムに対して指定したシーケンス番号を
        サーチします。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        seq_no  シーケンス番号を指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_DATA         データの誤り
                                指定したシーケンス番号が存在しません。
                EW_MODE         CNCモードの誤り
                                CNCモードの項を参照してください。
                EW_REJECT       CNC側の処理実行拒否

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       本機能は MEMモードで使用する必要があります。

  (19) カーソルの頭出し

関数名  cnc_rewind

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rewind(unsigned short FlibHndl);

解説    CNC側で現在選択されている加工プログラムに対してカーソルの頭出しを行いま
        す。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_MODE         CNCモードの誤り
                                CNCモードの項を参照してください。
                EW_REJECT       CNC側の処理実行拒否

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       本機能には以下のモードが関係します。
                MDI 以外のモードで使用できます。

ＮＣ用データファイル関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_rdtofs       工具オフセット量のリード
  ( 2) cnc_wrtofs       工具オフセット量のライト
  ( 3) cnc_rdtofsr      工具オフセット量のリード（範囲指定）
  ( 4) cnc_wrtofsr      工具オフセット量のライト（範囲指定）
  ( 5) cnc_rdtofsinfo   工具オフセット情報のリード
  ( 6) cnc_rdparam      パラメータのリード
  ( 7) cnc_wrparam      パラメータのライト
  ( 8) cnc_rdparar      パラメータのリード（範囲指定）
  ( 9) cnc_wrparas      パラメータのライト（複数個指定）
  (10) cnc_rdparainfo   パラメータ情報のリード
  (11) cnc_rdsetr       セッティングデータのリード（範囲指定）
  (12) cnc_wrsets       セッティングデータのライト（複数個指定）
  (13) cnc_rdmacro      カスタムマクロ変数のリード
  (14) cnc_wrmacro      カスタムマクロ変数のライト
  (15) cnc_rdmacror     カスタムマクロ変数のリード（範囲指定）
  (16) cnc_wrmacror     カスタムマクロ変数のライト（範囲指定）
  (17) cnc_rdmacroinfo  カスタムマクロ変数情報のリード
  (18) cnc_getmactype   カスタムマクロ変数タイプの取得
  (19) cnc_setmactype   カスタムマクロ変数タイプの設定
-------------------------------------------------------------------------------

  ( 1) 工具オフセット量のリード

関数名  cnc_rdtofs

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdtofs(unsigned short FlibHndl, short number,
                                short type, short length, ODBTOFS *tofs);

解説    number,typeで指定された番号の工具オフセット量を読み出します。
        オフセット量は符号付のバイナリ形式でODBTOFS内のdataに格納されます。

        オフセット量の単位は以下のとおりです。

                                              直線軸     直線軸     回転軸
                              1004#1 1004#0  ミリ入力  インチ入力
                               (ISC)  (ISA)       [mm]     [inch]      [deg]
                ---------------------------+----------+----------+----------
           (IS-A)                0      1   0.01       0.001      0.01
           (IS-B)                0      0   0.001      0.0001     0.001
           (IS-C)                1      0   0.0001     0.00001    0.0001
                IS-A は、Power Mate-H の場合に有効です。
                IS-C は、Power Mate-D の場合に有効です。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        number  リードするオフセット番号を指定します。
                リード可能なオフセットの組数は、cnc_rdtofsinfo()関数で取得でき
                ます。

        type    リードするオフセットのタイプ＝０を指定します。

        length  データブロック長（ODBTOFS構造体のサイズ＝８）を指定します。

        tofs    工具オフセット量を返すODBTOFS構造体へのポインタです。
                ODBTOFS構造体は次の通りです。
                typedef struct odbtofs {
                        short   datano ; /* オフセット番号 */
                        short   type ;   /* オフセットのタイプ */
                        long    data ;   /* オフセット量 */
                } ODBTOFS ;

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBTOFS構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                オフセット番号(number)の指定が不適切です。


                EW_ATTRIB       データ属性の誤り
                                オフセットのタイプ(type)の指定が不適切です。


CNCオプション   本機能にオプションは必要ありません。。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。
                        1004#0(Power Mate-H の場合)
                        1004#1(Power Mate-D の場合)

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは指定された工具番号の補正量を読みだして表示します。

#include <stdio.h>
#include "apilib.h"

/* tidx is tool index. */
void example( short tidx )
{
        ODBTOFS tofs ;
        short ret ;
        ret = cnc_rdtofs( FlibHndl, tidx, 0, 8, &tofs ) ;
        if ( !ret ) printf( "Z(%d) = %ld\n", tidx, tofs.data ) ;
}

  ( 2) 工具オフセット量のライト

関数名  cnc_wrtofs

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wrtofs(unsigned short FlibHndl, short number,
                                        short type, short length, long data);

解説    number,typeで指定された番号の工具オフセット量をdataで指定された値に書き
        換えます。オフセット量は符号付のバイナリ形式でdataに格納します。

        オフセット量の単位は以下のとおりです。

                                              直線軸     直線軸     回転軸
                              1004#1 1004#0  ミリ入力  インチ入力
                               (ISC)  (ISA)       [mm]     [inch]      [deg]
                ---------------------------+----------+----------+----------
           (IS-A)                0      1   0.01       0.001      0.01
           (IS-B)                0      0   0.001      0.0001     0.001
           (IS-C)                1      0   0.0001     0.00001    0.0001
                IS-A は、Power Mate-H の場合に有効です。
                IS-C は、Power Mate-D の場合に有効です。

        オフセット量の設定可能なデータ範囲は以下のとおりです。

                                        直線軸         直線軸        回転軸
                       1004#1 1004#0   ミリ入力      インチ入力
                        (ISC)  (ISA)        [mm]         [inch]          [deg]
                -------------------+--------------+--------------+--------------
           (IS-A)         0      0  ± 999.99      ± 99.999      ± 999.99
           (IS-B)         0      0  ± 999.999     ± 99.9999     ± 999.999
           (IS-C)         1      0  ± 999.9999    ± 99.99999    ± 999.9999
                IS-A は、Power Mate-H の場合に有効です。
                IS-C は、Power Mate-D の場合に有効です。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        number  ライトするオフセット番号を指定します。
                ライト可能なオフセットの組数は、cnc_rdtofsinfo()関数で取得でき
                ます。

        type    ライトするオフセットのタイプ＝０を指定します。

        length  データブロック長（＝８）を指定してください。

        data    工具オフセット量を設定してください。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────

                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                サイズ(length)が8未満です。

                EW_NUMBER       データ番号の誤り
                                オフセット番号(number)の指定が不適切です。

                EW_ATTRIB       データ属性の誤り
                                オフセットのタイプ(type)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。。

CNCパラメータ   本機能には以下のパラメータが関係します。
                        1004#0(Power Mate-H の場合)
                        1004#1(Power Mate-D の場合)

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは指定された番号のオフセット量を書き換えます。

#include <stdio.h>
#include "apilib.h"

/* tidx is tool index. */
/* offset is new offset value. */
short example( short tidx, long offset )
{
        short ret ;
        ret = cnc_wrtofs( FlibHndl, tidx, 0, 8, offset ) ;
        return ( ret ) ;
}

  ( 3) 工具オフセット量のリード（範囲指定）

関数名  cnc_rdtofsr

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdtofsr(unsigned short FlibHndl,
                short s_number, short type, short e_number, short length,
                                                        IODBTO *tofsr);

解説    s_number,e_number,typeで指定された範囲の工具オフセット量を読み出します。
        オフセット量は符号付のバイナリ形式でIODBTO内に格納されます。

        オフセット量の単位は「工具オフセット量のリード(cnc_rdtofs)」と同じです。
        同関数の解説を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        s_number
                リードを開始するオフセット番号を指定します。
                リード可能なオフセットの組数は、cnc_rdtofsinfo()関数で取得でき
                ます。

        e_number
                リードを終了するオフセット番号を指定します。

        type    リードするオフセットのタイプを指定します（以下参照）。

        length  データブロック長を指定します（以下参照）。

        tofsr   工具オフセット量を返すIODBTO構造体へのポインタです。
                IODBTO構造体は次の通りです。
                typedef struct  iodbto {
                    short datano_s;             /* 開始オフセット番号 */
                    short type;                 /* オフセットのタイプ */
                    short datano_e;             /* 終了オフセット番号 */
                    union {
                        long    m_ofs[N];       /* 個別 */
                        long    m_ofs_a[N];     /* 全体 */
                    } u ;
                } IODBTO ;      /* N は読みだすオフセット量の個数 */

        typeに指定する値、およびデータブロック長(length)の指定、読みだされる補
        正量の種類と格納される場所は以下のとおりです。

        type    length  属性    補正量の種類    格納される場所
        -------+-------+-------+---------------+--------------------------
         0      6+4*N   個別    工具補正量      tofsr.u.m_ofs[i]
        -------+-------+-------+---------------+--------------------------
        -1      6+4*N   全体    工具補正量      tofsr.u.m_ofs_a[i]
        N は読みだすオフセットの個数、i=0〜(N-1) です。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。

        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBTOFS構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                オフセット番号(number)の指定が不適切です。

                EW_ATTRIB       データ属性の誤り
                                オフセットのタイプ(type)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。
                        1004#0(Power Mate-H の場合)
                        1004#1(Power Mate-D の場合)

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは(99組)の全工具補正量を読みだして表示します。

#include <stdio.h>
#include <stdlib.h>
#include "apilib.h"
#define MAXTOOL 99

short example( void )
{
        IODBTO *tofsr ;
        short ret, idx ;
        tofsr = (IODBTO *)malloc( 6+4*MAXTOOL ) ;
        ret = cnc_rdtofsr( FlibHndl, 1, 0, MAXTOOL, 6+4*MAXTOOL, tofsr ) ;
        if ( !ret ) {
                printf( "No  Z:offset\n" ) ;
                printf( "---+-------+\n" ) ;
                for ( idx = 0 ; idx < MAXTOOL ; idx++ ) {
                        printf( "%02d%8ld\n",idx, tofsr->u.m_ofs[i] ) ;
                }
        }
        free( tofsr ) ;
        return ( ret ) ;
}

  ( 4) 工具オフセット量のライト（範囲指定）

関数名  cnc_wrtofsr

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wrtofsr(unsigned short FlibHndl,
                                                short length, IODBTO *tofsr);

解説    datano_s,datano_e,typeで指定された範囲の工具オフセット量を書き換えます。
        オフセット量は符号付のバイナリ形式でIODBTO内に格納します。
        オフセット量の単位/設定可能データ範囲は「工具オフセット量のライト(cnc_
        wrtofs)」と同じです。同関数の解説を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        length  データブロック長を指定します。

        tofsr   書き換える工具オフセット量を指定するIODBTO構造体へのポインタで
                す。IODBTO構造体は次の通りです。
                typedef struct  iodbto {
                    short datano_s;             /* 開始オフセット番号 */
                    short type;                 /* オフセットのタイプ */
                    short datano_e;             /* 終了オフセット番号 */
                    union {
                        long    m_ofs[N];       /* 個別 */
                        long    m_ofs_a[N];     /* 全体 */
                    } u ;
                } IODBTO ;      /* N は書き換えるオフセット量の個数 */

                datano_sライトを開始するオフセット番号を指定します。
                        ライト可能なオフセットの組数は、cnc_rdtofsinfo()関数で
                        取得できます。

                datano_eライトを終了するオフセット番号を指定します。

                type    ライトするオフセットのタイプを指定します。

        typeに指定する値、およびデータブロック長(length)の指定、書き込む補正量
        の種類と格納場所は「工具オフセット量のリード(範囲指定)(cnc_rdtofsr)」と
        同じです。同関数の解説を参照してください。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBTOFS構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り

                                オフセット番号(number)の指定が不適切です。

                EW_ATTRIB       データ属性の誤り
                                オフセットのタイプ(type)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。。

CNCパラメータ   本機能には以下のパラメータが関係します。
                        1004#0(Power Mate-H の場合)
                        1004#1(Power Mate-D の場合)

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは(99組)の全工具補正量を設定します。

#include <stdlib.h>
#include <string.h>
#include "apilib.h"
#define MAXTOOL 99

/* offset is array of new offset value. */
short example( long *offset )
{
        IODBTO *tofsr ;
        short ret ;
        tofsr = (IODBTO *)malloc( 6+4*MAXTOOL ) ;
        tofsr->datano_s = 1 ;
        tofsr->datano_e = MAXTOOL ;
        tofsr->type = -1 ;
        memcpy( &(tofsr->u.m_ofs_a[0]), offset, 4*MAXTOOL ) ;
        ret = cnc_wrtofsr( FlibHndl, 6+4*MAXTOOL, tofsr ) ;
        free( tofsr ) ;
        return ( ret ) ;
}

  ( 5) 工具オフセット情報のリード

関数名  cnc_rdtofsinfo

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdtofsinfo(unsigned short FlibHndl,
                                                        ODBTLINF *tlinf);

解説    工具オフセットのメモリタイプ、および使用可能な個数を読みだします。
        ODBTLINF内のofs_type, use_noにバイナリ形式で格納されます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        tlinf   工具オフセット情報を返すODBTLINF構造体へのポインタです。
                ODBTLINF構造体は次の通りです。
                typedef struct  odbtlinf {
                        short   ofs_type;       /* メモリタイプ */
                        short   use_no;         /* 使用可能な個数 */
                } ODBTLINF ;

                ofs_type
                        オフセットのメモリタイプは常に０となります。

                use_no  使用可能なオフセットの個数


戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 6) パラメータのリード

関数名  cnc_rdparam

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdparam(unsigned short FlibHndl,
                short number, short axis, short length, IODBPSD *param);

解説    numberで指定された番号、axisで指定された軸（軸型のパラメータのみ）のパ
        ラメータを読み出します。
        データ形式は各パラメータによりますが、バイト/ワード/２ワード形のパラメ
        ータは一般に符号付のバイナリ形式です。

        axisに ALL_AXES を指定することにより全軸の読み取りを一度に行うことがで
        きます。その際、各軸のパラメータはIODBPSD内の各配列に格納されます。

        パラメータには型と軸の属性により以下のような種類があり、パラメータ番号
        ごとに異なります。cnc_rdparainfo()関数により、これらの属性情報をリード
        できます。

        パラメータの種類        目的                            バイトサイズ
        -----------------------+-------------------------------+------------
        ビット形パラメータ      1ビットごとに意味を持つ         1
        ビット軸形パラメータ    1ビットごとに意味を持つ(軸毎)   1
        バイト形パラメータ      1バイト長のデータを記憶         1
        バイト軸形パラメータ    1バイト長のデータを記憶(軸毎)   1
        ワード形パラメータ      2バイト長のデータを記憶         2
        ワード軸形パラメータ    2バイト長のデータを記憶(軸毎)   2
        ２ワード形パラメータ    4バイト長のデータを記憶         4
        ２ワード軸形パラメータ  4バイト長のデータを記憶(軸毎)   4

        ただし、ビット形パラメータを1ビット単位で読みだすことはできません。
        同一のパラメータ番号に属する8ビット(つまり1バイト)単位で一度に読みだす
        ことになります。

        各パラメータの詳細については CNCのパラメータ説明書を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        number  リードするパラメータ番号を指定します。
                指定可能なパラメータ番号は CNCのパラメータ説明書を参照してくだ
                さい。 また、cnc_rdparainfo()関数でも取得できます。

        axis    リードする軸番号を指定します。
                      0      : 軸形でないパラメータ
                      1〜m   : 軸形パラメータの１軸指定(m : 最大制御軸数)
                    ALL_AXES : 軸形パラメータの全軸指定(ALL_AXES : -1)

        length  データブロック長（IODBPSD構造体のサイズ）を指定します。
                  ・4+(パラメータのバイトサイズ)*(読みだす軸数)


                下図はパラメータのサイズが 4バイトの場合です。
                パラメータのサイズが 1,2バイトの場合は、1個(1軸)あたりのデータ
                部のサイズがそれぞれ 1,2バイトになります。

                           軸なし/一軸指定                    全軸指定
                IODBPSD  0┌───┐        ─          0┌───┐        ─
                          │datano│        ↑           │datano│        ↑
                         2├───┤        │          2├───┤        │
                          │type  │      length         │type  │      length
                         4├───┴───┐│          4├───┴───┐│
                          │    ldata     │↓           │ldatas[0]  :1軸 │
                         8└───────┘─          8├───────┤│
                                                         〜              〜│
                                                4+2x(n-1)├───────┤│
                                                         │ldatas[n-1]:n軸 ↓
                                                    4+2xn└───────┘─

                n は、制御軸数となります。

        param   パラメータを返すIODBPSD構造体へのポインタです。
                IODBPSD構造体は次の通りです。
                typedef struct  iodbpsd {
                    short datano;              /* パラメータ番号 */
                    short type;                /* 軸番号 */
                    union {
                        char cdata;            /* ビット/バイト形パラメータ */
                        short idata;           /* ワード形パラメータ */
                        long ldata;            /* ２ワード形パラメータ */
                        char cdatas[MAX_AXIS]; /* ビット/バイト軸形パラメータ */
                        short idatas[MAX_AXIS];/* ワード軸形パラメータ */
                        long ldatas[MAX_AXIS]; /* ２ワード軸形パラメータ */
                    } u ;
                } IODBPSD ;             /* MAX_AXIS : 最大制御軸数 */

                datano  リードしたパラメータ番号が格納されます。

                type    リードしたパラメータの属性が格納されます。
                        軸番号
                            0      : 軸形でないパラメータ
                            1〜m   : 軸形パラメータの１軸指定(m : 最大制御軸数)
                          ALL_AXES : 軸形パラメータの全軸指定(ALL_AXES : -1)

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                IODBPSD構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                パラメータ番号(number)の指定が不適切です。

                EW_ATTRIB       データ属性の誤り

                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは制御軸の軸名称を全軸分(軸数=MAX_AXIS)読みだして表示し
        ます。

#include <stdio.h>
#include <stdlib.h>
#include "apilib.h"

void example( void )
{
        ODBSYS info ;
        IODBPSD param ;
        short ret, idx, axno ;
        cnc_sysinfo( 0, &info ) ;
        axno = atoi( info.axes ) ;
        ret = cnc_rdparam( FlibHndl, 1020, -1, 4+1*MAX_AXIS, &param ) ;
        for ( idx = 0 ; idx < axno ; idx++ ) {
                printf( "#%d", idx+1 ) ;
                if ( param.u.cdatas[idx] == 0 )
                        printf( "\033[7m%c\033[27m\n", idx+'1' ) ;
                else
                        printf( "%c\n", param.u.cdatas[idx] ) ;
        }
}

  ( 7) パラメータのライト

関数名  cnc_wrparam

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wrparam(unsigned short FlibHndl,
                                                short length, IODBPSD *param);

解説    datanoで指定された番号、typeで指定された軸（軸型のパラメータのみ）のパ
        ラメータを書き換えます。
        データ形式は各パラメータによりますが、バイト/ワード/２ワード形のパラメ
        ータは一般に符号付のバイナリ形式です。

        typeに ALL_AXES を指定することにより全軸の書き換えを一度に行うことがで
        きます。その際、各軸のパラメータはIODBPSD内の各配列に格納します。

        パラメータには型と軸の属性により以下のような種類があり、パラメータ番号
        ごとに異なります。cnc_rdparainfo()関数により、これらの属性情報をリード
        できます。

        パラメータの種類        目的                            バイトサイズ
        -----------------------+-------------------------------+------------
        ビット形パラメータ      1ビットごとに意味を持つ         1
        ビット軸形パラメータ    1ビットごとに意味を持つ(軸毎)   1
        バイト形パラメータ      1バイト長のデータを記憶         1
        バイト軸形パラメータ    1バイト長のデータを記憶(軸毎)   1
        ワード形パラメータ      2バイト長のデータを記憶         2
        ワード軸形パラメータ    2バイト長のデータを記憶(軸毎)   2
        ２ワード形パラメータ    4バイト長のデータを記憶         4
        ２ワード軸形パラメータ  4バイト長のデータを記憶(軸毎)   4

        ただし、ビット形パラメータを1ビット単位で書き換えることはできません。
        同一のパラメータ番号に属する8ビット(つまり1バイト)をまとめて読みだし、
        目的のビットを変更してから8ビット単位で書き換えることになります。

        パラメータによってはデータを書き換えた時にPS000アラーム電源を１度落とさ
        なければなりません、になる場合があります。

        各パラメータの詳細については CNCのパラメータ説明書を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        length  データブロック長（IODBPSD構造体のサイズ）を指定します。
                  ・4+(パラメータのバイトサイズ)*(書き換える軸数)

                下図はパラメータのサイズが 4バイトの場合です。
                パラメータのサイズが 1,2バイトの場合は、1個(1軸)あたりのデータ
                部のサイズがそれぞれ 1,2バイトになります。

                           軸なし/一軸指定                    全軸指定
                IODBPSD  0┌───┐        ─          0┌───┐        ─
                          │datano│        ↑           │datano│        ↑

                         2├───┤        │          2├───┤        │
                          │type  │      length         │type  │      length
                         4├───┴───┐│          4├───┴───┐│
                          │    ldata     │↓           │ldatas[0]  :1軸 │
                         8└───────┘─          8├───────┤│
                                                         〜              〜│
                                                4+2x(n-1)├───────┤│
                                                         │ldatas[n-1]:n軸 ↓
                                                    4+2xn└───────┘─

                n は、制御軸数となります。

        param   書き換えるパラメータを指定するIODBPSD構造体へのポインタです。
                IODBPSD構造体は次の通りです。
                typedef struct  iodbpsd {
                    short datano;              /* パラメータ番号 */
                    short type;                /* 軸番号 */
                    union {
                        char cdata;            /* ビット/バイト形パラメータ */
                        short idata;           /* ワード形パラメータ */
                        long ldata;            /* ２ワード形パラメータ */
                        char cdatas[MAX_AXIS]; /* ビット/バイト軸形パラメータ */
                        short idatas[MAX_AXIS];/* ワード軸形パラメータ */
                        long ldatas[MAX_AXIS]; /* ２ワード軸形パラメータ */
                    } u ;
                } IODBPSD ;             /* MAX_AXIS : 最大制御軸数 */

                datano  ライトするパラメータ番号を指定します。
                        指定可能なパラメータ番号は CNCのパラメータ説明書を参照
                        してください。
                        また、cnc_rdparainfo()関数でも取得できます。

                type    ライトする軸番号を指定します。
                            0      : 軸形でないパラメータ
                            1〜m   : 軸形パラメータの１軸指定(m : 最大制御軸数)
                          ALL_AXES : 軸形パラメータの全軸指定(ALL_AXES : -1)

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                IODBPSD構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                パラメータ番号(datano)の指定が不適切です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(type)の指定が不適切です。

                EW_NOOPT        オプションなし
                (Power Mate)    指定されたパラメータを使用するために必要なオプ
                                ションが付加されていません。


                EW_PROT         書き込み禁止です。


CNCオプション   Power Mateでは、特定のオプションで使用するパラメータは
                そのオプションが必要な場合があります。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例

        以下のプログラムは指定された軸のストロークリミットの設定値を書き換えま
        す。

#include "apilib.h"

/* axis is axis index. */
/* plus and minus are plus and minus position of stroke limit. */
short example( short axis, long plus, long minus  )
{
        IODBPSD param ;
        short ret ;
        param.datano = 1320 ;
        param.type = axis ;
        param.u.ldata = plus ;
        ret = cnc_wrparam( FlibHndl, 4+4*1, &param ) ;
        if ( ret ) return ( ret ) ;
        param.datano = 1321 ;
        param.type = axis ;
        param.u.ldata = minus ;
        ret = cnc_wrparam( FlibHndl, 4+4*1, &param ) ;
        return ( ret ) ;
}

  ( 8) パラメータのリード（範囲指定）

関数名  cnc_rdparar

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdparar(unsigned short FlibHndl,
                                  short *s_number, short axis, short *e_number,
                                                   short *length, void *param);

解説    s_number,e_numberで指定された範囲の axisで指定された軸（軸型のパラメー
        タのみ）のパラメータを読み出します。
        データ形式は各パラメータによりますが、バイト/ワード/２ワード形のパラメ
        ータは一般に符号付のバイナリ形式です。

        axisに ALL_AXES を指定することにより、指定された範囲の軸形パラメータは
        全軸の読み取りが行われます。

        パラメータには型と軸の属性により以下のような種類があり、パラメータ番号
        ごとに異なります。cnc_rdparainfo()関数により、これらの属性情報をリード
        できます。

        パラメータの種類        目的                            バイトサイズ
        -----------------------+-------------------------------+------------
        ビット形パラメータ      1ビットごとに意味を持つ         1
        ビット軸形パラメータ    1ビットごとに意味を持つ(軸毎)   1
        バイト形パラメータ      1バイト長のデータを記憶         1
        バイト軸形パラメータ    1バイト長のデータを記憶(軸毎)   1
        ワード形パラメータ      2バイト長のデータを記憶         2
        ワード軸形パラメータ    2バイト長のデータを記憶(軸毎)   2
        ２ワード形パラメータ    4バイト長のデータを記憶         4
        ２ワード軸形パラメータ  4バイト長のデータを記憶(軸毎)   4

        ただし、ビット形パラメータを1ビット単位で読み出すことはできません。
        同一のパラメータ番号に属する8ビット(つまり1バイト)単位で一度に読み出す
        ことになります。

        各パラメータの詳細については CNCのパラメータ説明書を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        s_number
                リードを開始するパラメータ番号を指定します。
                関数からは、実際にリードされた最初のパラメータ番号が返ります。

                指定可能なパラメータ番号は CNCのパラメータ説明書を参照してくだ
                さい。 また、cnc_rdparainfo()関数でも取得できます。

        e_number
                リードを終了するパラメータ番号を指定します。
                関数からは、実際にリードされた最後のパラメータ番号が返ります。


                なお、CNC 側ソフトの機能追加などに伴い、パラメータも追加される
                ことがあります。読み出す範囲内にパラメータが追加された場合、エ
                ラーになったり(戻り値:EW_LENGTH)、アプリケーションプログラムの
                処理が正しく実行できなくなる可能性があります。このようなことを
                避けるために、パラメータ番号が連続している部分のみをまとめて読
                み出し範囲に指定するようにしてください。

        axis    リードする軸番号を指定します。
                      0      : 軸形でないパラメータ
                      1〜m   : 軸形パラメータの１軸指定(m : 最大制御軸数)
                    ALL_AXES : 軸形パラメータの全軸指定(ALL_AXES : -1)

                なお、axisに何を指定しても軸形でないパラメータは読み出されます
                が、指定範囲内に軸形のパラメータが存在する時、axis=0を指定する
                とエラーとなります(戻り値:EW_ATTRIB)。

        length  指定した範囲のパラメータを格納するのに必要なデータブロック長を
                指定します。
                パラメータ１個あたりは下図のようになり、それがパラメータ番号順
                (昇順)に指定された個数分並びますので、指定するlengthはそれらの
                合計になります。
                  ・[4+(各パラメータのバイトサイズ)*(読みだす軸数)]の合計

                関数からは、実際にリードしたサイズが返りますので長めに指定する
                ことができます。

                下図はパラメータのサイズが 1バイトの場合です。
                パラメータのサイズが 1バイトで 1個あたりのlengthが奇数バイトに
                なる場合は、最後にダミー領域が必要です。
                パラメータのサイズが 2,4バイトの場合は、1個(1軸)あたりのサイズ
                がそれぞれ 2,4バイトになりますのでダミー領域は不要です。

                           軸なし/一軸指定                    全軸指定
                IODBPSD  0┌───┐  ─                0┌───┐        ─
                          │datano│  ↑                 │datano│        ↑
                         2├───┤  │                2├───┤        │
                          │type  │length/個            │type  │   length/個
                         4├─┬─┘  │                4├─┬─┘        │
                          │cdata     │                 │cdatas[0]  :1軸 │
                         5├─┤      │                5├─┤            │
                          │dummy     ↓                 〜  〜            │
                         6└─┘      ─        4+1x(n-1)├─┤            │
                                                         │cdatas[n-1]:n軸 │
                                                    4+1xn├─┤            │
                                                         │dummy(nが奇数   ↓
                                                         └─┘  の場合)   ─

                n は、最大制御軸数です。

        param   パラメータを返す領域へのポインタです。
                個々のパラメータの参照は、IODBPSD構造体を使用します。
                typedef struct  iodbpsd {
                    short datano;              /* パラメータ番号 */
                    short type;                /* 上位バイト:型属性 */
                                               /* 下位バイト:軸番号 */

                    union {
                        char cdata;            /* ビット/バイト形パラメータ */
                        short idata;           /* ワード形パラメータ */
                        long ldata;            /* ２ワード形パラメータ */
                        char cdatas[MAX_AXIS]; /* ビット/バイト軸形パラメータ */
                        short idatas[MAX_AXIS];/* ワード軸形パラメータ */
                        long ldatas[MAX_AXIS]; /* ２ワード軸形パラメータ */
                    } u ;
                } IODBPSD ;             /* MAX_AXIS : 最大制御軸数 */

                datano  リードしたパラメータ番号が格納されます。

                type    リードしたパラメータの属性が格納されます。
                        上位バイト：型属性
                            0 : ビット型
                            1 : バイト型
                            2 : ワード型
                            3 : ２ワード型

                        下位バイト：軸番号
                            0      : 軸形でないパラメータ
                            1〜m   : 軸形パラメータの１軸指定(m : 最大制御軸数)
                          ALL_AXES : 軸形パラメータの全軸指定(ALL_AXES : -1)

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                パラメータ格納領域のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                パラメータ番号(s_number,e_number)の指定が不適
                                切です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは指定された範囲および軸のパラメータを読みだし画面に
        表示します。

#include <stdio.h>
#include <stdlib.h>
#include "apilib.h"
/* start/end are start/end number to be read, axis is axis number. */
short example( short start, short end, short axis )

{
        ODBSYS info ;
        IODBPSD *param, *ptr ;
        short ret, idx1, idx2, axno, inc ;
        cnc_sysinfo( 0, &info ) ;
        axno = atoi( info.axes ) ;
        param = (IODBPSD *)calloc( 1, 1000 ) ;
        ret = cnc_rdparar( FlibHndl, start, axis, end, 1000, param ) ;
        ptr = param ;
        if ( !ret ) {
            for ( idx1 = start ; idx1 <= end ; idx1++ ) {
                if ( ( idx1 != 0 ) && ( ptr->datano == 0 ) ) break ;
                printf( "No.%05d ", ptr->datano ) ;
                switch ( ptr->type >> 8 ) {
                        case 0: printf( "BIT " ) ; break ;
                        case 1: printf( "BYTE" ) ; break ;
                        case 2: printf( "WORD" ) ; break ;
                        case 3: printf( "2WRD" ) ; break ;
                }
                switch ( ptr->type & 0xff ) {
                    case 0xff :
                        for ( idx2 = 0 ; idx2 < axno ; idx2++ ) {
                            printf( "  #%d:", idx2+1 ) ;
                            switch ( ptr->type >> 8 ) {
                                case 0:
                                    printf( "0x%02X",
                                      (unsigned char)(ptr->u.cdatas[idx2]) ) ;
                                    inc = 1 ; break ;
                                case 1:
                                    printf( "%d", ptr->u.cdatas[idx2] ) ;
                                    inc = 1 ; break ;
                                case 2:
                                    printf( "%d", ptr->u.idatas[idx2] ) ;
                                    inc = 2 ; break ;
                                case 3:
                                    printf( "%ld", ptr->u.ldatas[idx2] ) ;
                                    inc = 4 ; break ;
                            }
                        }
                        putchar( '\n' ) ;
                        ptr = (IODBPSD *)(((char *)ptr)+4+8*inc) ;
                        break ;
                    default :
                        printf( "  #%d:", ptr->type & 0xff ) ;
                    case 0 :
                        switch ( ptr->type >> 8 ) {
                            case 0:
                                printf( "  0x%02X\n",
                                        (unsigned char)(ptr->u.cdata) ) ;
                                inc = 1+1 ; break ;
                            case 1:
                                printf( "  %d\n", ptr->u.cdata ) ;
                                inc = 1+1 ; break ;
                            case 2:
                                printf( "  %d\n", ptr->u.idata ) ;

                                inc = 2 ; break ;
                            case 3:
                                printf( "  %ld\n", ptr->u.ldata ) ;
                                inc = 4 ; break ;
                        }
                        ptr = (IODBPSD *)(((char *)ptr)+4+inc) ;
                        break ;
                }
            }
        }
        else
                printf( "ERROR!(%d)\n", ret ) ;
        free( param ) ;
        return ( ret ) ;
}

  ( 9) パラメータのライト（複数個指定）

関数名  cnc_wrparas

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wrparas(unsigned short FlibHndl,
                                                short length, (void *)param);

解説    paramに格納された複数個のパラメータを書き換えます。
        データ形式は各パラメータによりますが、バイト/ワード/２ワード形のパラメ
        ータは一般に符号付のバイナリ形式です。

        typeに ALL_AXES を指定することにより全軸の書き換えを一度に行うことがで
        きます。その際、各軸のパラメータはIODBPSD内の各配列に格納します。

        パラメータには型と軸の属性により以下のような種類があり、パラメータ番号
        ごとに異なります。cnc_rdparainfo()関数により、これらの属性情報をリード
        できます。

        パラメータの種類        目的                            バイトサイズ
        -----------------------+-------------------------------+------------
        ビット形パラメータ      1ビットごとに意味を持つ         1
        ビット軸形パラメータ    1ビットごとに意味を持つ(軸毎)   1
        バイト形パラメータ      1バイト長のデータを記憶         1
        バイト軸形パラメータ    1バイト長のデータを記憶(軸毎)   1
        ワード形パラメータ      2バイト長のデータを記憶         2
        ワード軸形パラメータ    2バイト長のデータを記憶(軸毎)   2
        ２ワード形パラメータ    4バイト長のデータを記憶         4
        ２ワード軸形パラメータ  4バイト長のデータを記憶(軸毎)   4

        ただし、ビット形パラメータを1ビット単位で書き換えることはできません。
        同一のパラメータ番号に属する8ビット(つまり1バイト)をまとめて読みだし、
        目的のビットを変更してから8ビット単位で書き換えることになります。

        パラメータによってはデータを書き換えた時に PS 000アラーム：電源を１度落
        とさなければなりません、になる場合があります。

        各パラメータの詳細については CNCのパラメータ説明書を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        length  書き換えるパラメータを格納した領域のデータブロック長を指定しま
                す。
                パラメータ１個あたりは下図のとおりで、それがパラメータ番号順
                (昇順)に並んだ構造ですので、指定するlengthはそれらの合計になり
                ます。
                  ・[4+(各パラメータのバイトサイズ)*(書き換える軸数)]の合計

                下図はパラメータのサイズが 1バイトの場合です。
                パラメータのサイズが 1バイトで 1個あたりのlengthが奇数バイトに
                なる場合は、最後にダミー領域が必要です。
                パラメータのサイズが 2,4バイトの場合は、1個(1軸)あたりのサイズ

                がそれぞれ 2,4バイトになりますのでダミー領域は不要です。

                           軸なし/一軸指定                    全軸指定
                IODBPSD  0┌───┐  ─                0┌───┐        ─
                          │datano│  ↑                 │datano│        ↑
                         2├───┤  │                2├───┤        │
                          │type  │length/個            │type  │   length/個
                         4├─┬─┘  │                4├─┬─┘        │
                          │cdata     │                 │cdatas[0]  :1軸 │
                         5├─┤      │                5├─┤            │
                          │dummy     ↓                 〜  〜            │
                         6└─┘      ─        4+1x(n-1)├─┤            │
                                                         │cdatas[n-1]:n軸 │
                                                    4+1xn├─┤            │
                                                         │dummy(nが奇数   ↓
                                                         └─┘  の場合)   ─

                n は、最大制御軸数です。

        param   書き換えるパラメータを格納する領域へのポインタです。
                個々のパラメータの参照は、IODBPSD構造体を使用します。
                typedef struct  iodbpsd {
                    short datano;              /* パラメータ番号 */
                    short type;                /* 上位バイト:型属性 */
                                               /* 下位バイト:軸番号 */
                    union {
                        char cdata;            /* ビット/バイト形パラメータ */
                        short idata;           /* ワード形パラメータ */
                        long ldata;            /* ２ワード形パラメータ */
                        char cdatas[MAX_AXIS]; /* ビット/バイト軸形パラメータ */
                        short idatas[MAX_AXIS];/* ワード軸形パラメータ */
                        long ldatas[MAX_AXIS]; /* ２ワード軸形パラメータ */
                    } u ;
                } IODBPSD ;             /* MAX_AXIS : 最大制御軸数 */

                datano  ライトするパラメータ番号を指定します。
                        指定可能なパラメータ番号は CNCのパラメータ説明書を参照
                        してください。
                        また、cnc_rdparainfo()関数でも取得できます。

                type    ライトするパラメータの属性を指定します。
                        上位バイト：型属性
                            0 : ビット型
                            1 : バイト型
                            2 : ワード型
                            3 : ２ワード型

                        下位バイト：軸番号
                            0      : 軸形でないパラメータ
                            1〜m   : 軸形パラメータの１軸指定(m : 最大制御軸数)
                          ALL_AXES : 軸形パラメータの全軸指定(ALL_AXES : -1)

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                パラメータ格納領域のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                パラメータ番号(datano)の指定が不適切です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(type)の指定が不適切です。

                EW_NOOPT        オプションなし
                                指定されたパラメータを使用するために必要なオプ
                                ションが付加されていません。

                EW_PROT         書き込み禁止です。

CNCオプション   Power Mateでは、特定のオプションで使用するパラメータは
                そのオプションが必要な場合があります。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムはマクロ呼び出しを行なうMコードを No.6080〜No.6089
        に設定します。

#include <stdlib.h>
#include "apilib.h"

/* mcode is 10 M-code values to be set. */
short example( short *mcode )
{
        IODBPSD *param, *ptr ;
        short ret, idx ;
        param = (IODBPSD *)calloc( 1, 100 ) ;
        ptr = param ;
        for ( idx = 0 ; idx < 10 ; idx++ ) {
                ptr->datano = 6080 + idx ;
                ptr->type = 0 ;
                ptr->cdata = mcode[idx] ;
                ptr = (IODBPSD *)(((char *)ptr)+6) ;
        }
        ret = cnc_wrparas( FlibHndl, 6*10, param ) ;
        free( param ) ;
        return ( ret ) ;
}

  (10) パラメータ情報のリード

関数名  cnc_rdparainfo

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdparainfo(unsigned short FlibHndl,
                short s_number, unsigned short read_no, ODBPARAIF *paraif);

解説    s_number, read_no で指定されたCNCパラメータ情報を読み出します。

        CNCパラメータの分布は基本的に非連続で、個別の番号毎に型、サイズ等属性が
        異なります。パラメータの表示等を行う場合に使用します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        s_number
                開始パラメータ番号を指定します。

        read_no リードするパラメータ情報の個数を指定します。

        paraif  パラメータ情報を返すODBPARAIF構造体へのポインタです。
                ODBPARAIF構造体は次の通りです。
                typedef struct odbparaif {
                        unsigned short  info_no ;    /* パラメータ情報の個数 */
                        short           prev_no ;    /* 前のパラメータ番号 */
                        short           next_no ;    /* 次のパラメータ番号 */
                        struct {
                                short   prm_no ;     /* パラメータ番号 */
                                short   prm_type ;   /* パラメータの属性 */
                        } info[N] ;     /* N : 読み出すパラメータ情報の個数 */
                } ODBPARAIF ;

                info_no         パラメータ情報の個数
                                実際に読み取ったパラメータ情報の個数

                prev_no         前のパラメータ番号
                                最初にリードしたパラメータ情報の前の有効番号

                next_no         次のパラメータ番号
                                最後にリードしたパラメータ情報の後の有効番号

                info[N].prm_no  パラメータ番号
                                実際に存在するパラメータ番号

                info[N].prm_type        パラメータの属性
                                以下の属性が設定されます。
                                bit 0,1 : 型属性
                                                0 : ビット型    2：ワード型
                                                1 : バイト型    3：２ワード型
                                bit   2 : 軸属性
                                                0 : 軸なし      1 : 軸あり

                                bit   3 : 符号
                                                0 : 符号あり    1 : 符号なし
                                bit   4 : セッティング入力可
                                                0 : 不可        1 : 可
                                bit   5 : 書き込み禁止
                                                0 : 可          1 : 不可
                                bit   6 : 書き込み後電源断／再投入が必要
                                                0 : 不要        1 : 必要
                                bit   7 : リード不可
                                                0 : 可          1 : 不可
                                bit   8 : スピンドルパラメータ
                                                0:スピンドル以外  1:スピンドル
                                bit 9 - 15：（リザーブ）

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照して下さい）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_NUMBER       データ番号の誤り
                                開始パラメータ番号(s_number)の指定が不適切です

CNCオプション   本機能にオプションは必要ありません。。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (11) セッティングデータのリード（範囲指定）

関数名  cnc_rdsetr

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdsetr(unsigned short FlibHndl,
                                  short *s_number, short axis, short *e_number,
                                                     short *length, void *set);

解説    s_number,e_numberで指定された範囲の axisで指定された軸（軸型のセッティ
        ングデータのみ）のセッティングデータを読み出します。
        データ形式は各セッティングデータによりますが、バイト/ワード/２ワード形
        のセッティングデータは一般に符号付のバイナリ形式です。

        axisに ALL_AXES を指定することにより、指定された範囲の軸形セッティング
        データは全軸の読み取りが行われます。

        セッティングデータには型と軸の属性により以下のような種類があり、セッテ
        ィングデータ番号ごとに異なります。

        セッティングデータの種類 目的                            バイトサイズ
        ------------------------+-------------------------------+------------
        ビット形データ           1ビットごとに意味を持つ         1
        ビット軸形データ         1ビットごとに意味を持つ(軸毎)   1
        バイト形データ           1バイト長のデータを記憶         1
        バイト軸形データ         1バイト長のデータを記憶(軸毎)   1
        ワード形データ           2バイト長のデータを記憶         2
        ワード軸形データ         2バイト長のデータを記憶(軸毎)   2
        ２ワード形データ         4バイト長のデータを記憶         4
        ２ワード軸形データ       4バイト長のデータを記憶(軸毎)   4

        ただし、ビット形セッティングデータを 1ビット単位で読み出すことはできま
        せん。同一のセッティングデータ番号に属する8ビット(つまり1バイト)単位で
        一度に読み出すことになります。

        セッティング入力が不可のパラメータを読み出すことができない点を除いては
        『パラメータのリード(範囲指定)(cnc_rdparar)』と同じです。

        各セッティングデータの詳細については CNCのパラメータ説明書を参照してく
        ださい。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        s_number
                リードを開始するセッティングデータ番号を指定します。
                関数からは、実際にリードされた最初のセッティングデータ番号が返
                ります。

                指定可能なセッティングデータ番号は CNCのパラメータ説明書を参照
                してください。

        e_number

                リードを終了するセッティングデータ番号を指定します。
                関数からは、実際にリードされた最後のセッティングデータ番号が返
                ります。

                なお、CNC 側ソフトの機能追加などに伴い、セッティングデータも追
                加されることがあります。読み出す範囲内にセッティングデータが追
                加された場合、エラーになったり(戻り値:EW_LENGTH)、アプリケーシ
                ョンプログラムの処理が正しく実行できなくなる可能性があります。
                このようなことを避けるために、セッティングデータ番号が連続して
                いる部分のみをまとめて読み出し範囲に指定するようにしてください。

        axis    リードする軸番号を指定します。
                    0      : 軸形でないセッティングデータ
                    1〜m   : 軸形セッティングデータの１軸指定(m : 最大制御軸数)
                  ALL_AXES : 軸形セッティングデータの全軸指定(ALL_AXES : -1)

                なお、axisに何を指定しても軸形でないセッティングデータは読み出
                されますが、指定範囲内に軸形のセッティングデータが存在する時、
                axis=0を指定するとエラーとなります(戻り値:EW_ATTRIB)。

        length  指定した範囲のセッティングデータを格納するのに必要なデータブロ
                ック長を指定します。
                セッティングデータ１個あたりは下図のようになり、それがセッティ
                ングデータ番号順(昇順)に指定された個数分並びますので、指定する
                lengthはそれらの合計になります。
                  ・[4+(各セッティングデータのバイトサイズ)*(読みだす軸数)]
                        の合計

                関数からは、実際にリードしたサイズが返りますので長めに指定する
                ことができます。

                下図はセッティングデータのサイズが 1バイトの場合です。
                セッティングデータのサイズが 1バイトで 1個あたりのlengthが奇数
                バイトになる場合は、最後にダミー領域が必要です。
                セッティングデータのサイズが 2,4バイトの場合は、1個(1軸)あたり
                のサイズがそれぞれ 2,4バイトになりますのでダミー領域は不要です。

                           軸なし/一軸指定                    全軸指定
                IODBPSD  0┌───┐  ─                0┌───┐        ─
                          │datano│  ↑                 │datano│        ↑
                         2├───┤  │                2├───┤        │
                          │type  │length/個            │type  │   length/個
                         4├─┬─┘  │                4├─┬─┘        │
                          │cdata     │                 │cdatas[0]  :1軸 │
                         5├─┤      │                5├─┤            │
                          │dummy     ↓                 〜  〜            │
                         6└─┘      ─        4+1x(n-1)├─┤            │
                                                         │cdatas[n-1]:n軸 │
                                                    4+1xn├─┤            │
                                                         │dummy(nが奇数   ↓
                                                         └─┘  の場合)   ─

                n は、最大制御軸数です。

        set     セッティングデータを返す領域へのポインタです。

                個々のセッティングデータの参照は、IODBPSD構造体を使用します。
                typedef struct  iodbpsd {
                    short datano;              /* セッティングデータ番号 */
                    short type;                /* 上位バイト:型属性 */
                                               /* 下位バイト:軸番号 */
                    union {
                        char cdata;            /* ビット/バイト形データ */
                        short idata;           /* ワード形データ */
                        long ldata;            /* ２ワード形データ */
                        char cdatas[MAX_AXIS]; /* ビット/バイト軸形データ */
                        short idatas[MAX_AXIS];/* ワード軸形データ */
                        long ldatas[MAX_AXIS]; /* ２ワード軸形データ */
                    } u ;
                } IODBPSD ;             /* MAX_AXIS : 最大制御軸数 */


                datano  リードしたセッティングデータ番号が格納されます。

                type    リードしたセッティングデータの属性が格納されます。
                        上位バイト：型属性
                            0 : ビット型
                            1 : バイト型
                            2 : ワード型
                            3 : ２ワード型

                        下位バイト：軸番号
                            0      : 軸形でないセッティングデータ
                            1〜m   : 軸形セッティングデータの１軸指定
                                     (m : 最大制御軸数)
                          ALL_AXES : 軸形セッティングデータの全軸指定
                                     (ALL_AXES : -1)

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                セッティングデータ格納領域のサイズ(length)が不
                                正です。

                EW_NUMBER       データ番号の誤り
                                セッティングデータ番号(s_number,e_number)の指
                                定が不適切です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (12) セッティングデータのライト（複数個指定）

関数名  cnc_wrsets

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wrsets(unsigned short FlibHndl, short length,
                                                                (void *)set);

解説    setに格納された複数個のセッティングデータを書き換えます。
        データ形式は各セッティングデータによりますが、バイト/ワード/２ワード形
        のセッティングデータは一般に符号付のバイナリ形式です。

        typeに ALL_AXES を指定することにより全軸の書き換えを一度に行うことがで
        きます。その際、各軸のセッティングデータは IODBPSD内の各配列に格納しま
        す。

        セッティングデータには型と軸の属性により以下のような種類があり、セッテ
        ィングデータ番号ごとに異なります。

        セッティングデータの種類 目的                            バイトサイズ
        ------------------------+-------------------------------+------------
        ビット形データ           1ビットごとに意味を持つ         1
        ビット軸形データ         1ビットごとに意味を持つ(軸毎)   1
        バイト形データ           1バイト長のデータを記憶         1
        バイト軸形データ         1バイト長のデータを記憶(軸毎)   1
        ワード形データ           2バイト長のデータを記憶         2
        ワード軸形データ         2バイト長のデータを記憶(軸毎)   2
        ２ワード形データ         4バイト長のデータを記憶         4
        ２ワード軸形データ       4バイト長のデータを記憶(軸毎)   4

        ただし、ビット形セッティングデータを 1ビット単位で書き換えることはでき
        ません。同一のセッティングデータ番号に属する8ビット(つまり1バイト)をま
        とめて読みだし、目的のビットを変更してから 8ビット単位で書き換えること
        になります。

        セッティング入力が不可のパラメータを書き換えることができない点を除いて
        は『パラメータのライト(複数個指定)(cnc_wrparas)』と同じです。

        各セッティングデータの詳細については CNCのパラメータ説明書を参照してく
        ださい。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        length  書き換えるセッティングデータを格納した領域のデータブロック長を
                指定します。
                セッティングデータ１個あたりは下図のとおりで、それがセッティン
                グデータ番号順(昇順)に並んだ構造ですので、指定するlengthはそれ
                らの合計になります。
                  ・[4+(各セッティングデータのバイトサイズ)*(書き換える軸数)]
                        の合計


                下図はセッティングデータのサイズが 1バイトの場合です。
                セッティングデータのサイズが 1バイトで 1個あたりのlengthが奇数
                バイトになる場合は、最後にダミー領域が必要です。
                セッティングデータのサイズが 2,4バイトの場合は、1個(1軸)あたり
                のサイズがそれぞれ 2,4バイトになりますのでダミー領域は不要です。

                           軸なし/一軸指定                    全軸指定
                IODBPSD  0┌───┐  ─                0┌───┐        ─
                          │datano│  ↑                 │datano│        ↑
                         2├───┤  │                2├───┤        │
                          │type  │length/個            │type  │   length/個
                         4├─┬─┘  │                4├─┬─┘        │
                          │cdata     │                 │cdatas[0]  :1軸 │
                         5├─┤      │                5├─┤            │
                          │dummy     ↓                 〜  〜            │
                         6└─┘      ─        4+1x(n-1)├─┤            │
                                                         │cdatas[n-1]:n軸 │
                                                    4+1xn├─┤            │
                                                         │dummy(nが奇数   ↓
                                                         └─┘  の場合)   ─

                n は、最大制御軸数です。

        set     書き換えるセッティングデータを格納する領域へのポインタです。
                個々のセッティングデータの参照は、IODBPSD構造体を使用します。
                typedef struct  iodbpsd {
                    short datano;              /* セッティングデータ番号 */
                    short type;                /* 上位バイト:型属性 */
                                               /* 下位バイト:軸番号 */
                    union {
                        char cdata;            /* ビット/バイト形データ */
                        short idata;           /* ワード形データ */
                        long ldata;            /* ２ワード形データ */
                        char cdatas[MAX_AXIS]; /* ビット/バイト軸形データ */
                        short idatas[MAX_AXIS];/* ワード軸形データ */
                        long ldatas[MAX_AXIS]; /* ２ワード軸形データ */
                    } u ;
                } IODBPSD ;             /* MAX_AXIS : 最大制御軸数 */

                datano  ライトするセッティングデータ番号を指定します。
                        指定可能なセッティングデータ番号は CNCのパラメータ説明
                        書を参照してください。

                type    ライトするセッティングデータの属性を指定します。
                        上位バイト：型属性
                            0 : ビット型
                            1 : バイト型
                            2 : ワード型
                            3 : ２ワード型

                        下位バイト：軸番号
                            0      : 軸形でないセッティングデータ
                            1〜m   : 軸形セッティングデータの１軸指定
                                     (m : 最大制御軸数)
                          ALL_AXES : 軸形セッティングデータの全軸指定

                                     (ALL_AXES : -1)

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                セッティングデータ格納領域のサイズ(length)が不
                                正です。

                EW_NUMBER       データ番号の誤り
                                セッティングデータ番号(datano)の指定が不適切で
                                す。

                EW_ATTRIB       データ属性の誤り
                                軸番号(type)の指定が不適切です。

                EW_NOOPT        オプションなし
                                指定されたセッティングデータを使用するために必
                                要なオプションが付加されていません。

CNCオプション   特定のオプションで使用するセッティングデータはそのオプションが
                必要な場合があります。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (13) カスタムマクロ変数のリード

関数名  cnc_rdmacro

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdmacro(unsigned short FlibHndl,
                                short number, short length, ODBM *macro);

解説    numberで指定された番号のカスタムマクロ変数を読み出します。
        データは符号付のバイナリ形式でODBM内に格納されます。

        読み出し可能なカスタムマクロ変数の種類は以下のとおりです。

        (1) ローカル変数 ( #1〜#33 )
            読み出す時点で実行されているカスタムマクロのローカル変数が読み出さ
            れます。

        (2) コモン変数 ( #100〜 )
            読み出し範囲は cnc_rdmacroinfo()関数の説明を参照してください。

        cnc_setmactype() 関数より、読み出すカスタムマクロ変数の型を切り換える
        ことができます。

                ・10進形式浮動小数点型（データ形式=M*10**(-E)）
                        mcr_val : 変数値(=M)
                                  符号付の4バイトバイナリ形式
                                  (有効範囲:    -99999999 〜 99999999)
                        dec_val : 小数点以下桁数(=E)
                                  符号付の2バイトバイナリ形式
                                  (有効範囲:    -1, 0 〜 8)

                        ※Power Mateでは、上記制限を越えるデータは扱えません
                         (mcr_val, dec_valとも -1 になります)ので2進形式浮動
                        小数点型を使用してください。

                ・2進形式浮動小数点型（データ形式=M*2**(-E)）
                        mcr_val : 変数の仮数部(=M)
                                  符号付の4バイトバイナリ形式
                                  (有効範囲:制限なし)
                        dec_val : 変数の指数部(=E)
                                  符号付の2バイトバイナリ形式
                                  (有効範囲:-128 〜 127)

        なお、カスタムマクロ変数には『空』という特殊な値がありますが、10進形式
        ／2進形式浮動小数点型ともに以下で表します。
                        mcr_val = 0
                        dec_val = -1

        カスタムマクロ変数の詳細については、CNCの取扱説明書を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。


        number  リードするカスタムマクロ変数番号を指定します。

        length  データブロック長（ODBM構造体のサイズ=10）を指定します。

                ODBM     0┌─────┐              ─
                          │datano    │              ↑
                         2├─────┤              │
                          │dummy     │              │
                         4├─────┴─────┐length
                          │mcr_val               │  │
                         8├─────┬─────┘  │
                          │dec_val   │              ↓
                        10└─────┘              ─

        macro   カスタムマクロ変数を返すODBM構造体へのポインタです。
                ODBM構造体は次の通りです。
                typedef struct  odbm {
                        short   datano ;        /* カスタムマクロ変数番号 */
                        short   dummy ;         /* 未使用 */
                        long    mcr_val ;       /* カスタムマクロ変数値 */
                        short   dec_val ;       /* 小数点以下桁数 */
                } ODBM ;

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBM構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                カスタムマクロ変数番号(number)の指定が不適切で
                                す。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは指定された番号のカスタムマクロ変数を読み出して表示し
        ます。

#include <stdio.h>
#include <string.h>
#include "apilib.h"

/* number is variable number to be read. */
short example( short number )
{
        ODBM macro ;
        char strbuf[11] ;

        short ret ;
        ret = cnc_rdmacro( FlibHndl, number, 10, &macro ) ;
        if ( !ret ) {
                sprintf( &strbuf[1], "%09ld", macro.mcr_val ) ;
                if ( strbuf[1] == '0' ) strbuf[1] = ' ' ;
                strncpy( &strbuf[0], &strbuf[1], 9 - macro.dec_val ) ;
                strbuf[9-macro.dec_val] = '.' ;
                printf( "%s\n", strbuf ) ;
        }
        else
                printf( "**********\n" ) ;
        return ( ret ) ;
}

  (14) カスタムマクロ変数のライト

関数名  cnc_wrmacro

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wrmacro(unsigned short FlibHndl,
                short number, short length, long mcr_val, short dec_val);

解説    numberで指定された番号のカスタムマクロ変数を書き換えます。
        データは符号付のバイナリ形式でmcr_val,dec_valに格納します。

        書き換え可能なカスタムマクロ変数の種類は以下のとおりです。
        ローカル変数は書き換えできません。

        (1) コモン変数 ( #100〜 )
            書き換え範囲は cnc_rdmacroinfo()関数の説明を参照してください。

        cnc_setmactype() 関数より、書き換えるカスタムマクロ変数の型を切り換える
        ることができます。

                ・10進形式浮動小数点型（データ形式=M*10**(-E)）
                        mcr_val : 変数値(=M)
                                  符号付の4バイトバイナリ形式
                                  (有効範囲:    -99999999 〜 99999999)

                        dec_val : 小数点以下桁数(=E)
                                  符号付の2バイトバイナリ形式
                                  (有効範囲:    -1, 0 〜 8)

                        ※Power Mateでは、上記制限を越えるデータは扱えません
                        （戻り値:EW_DATAになります）ので2進形式浮動小数点型を
                        使用してください。

                ・2進形式浮動小数点型（データ形式=M*2**(-E)）
                        mcr_val : 変数の仮数部(=M)
                                  符号付の4バイトバイナリ形式
                                  (有効範囲:制限なし)

                        dec_val : 変数の指数部(=E)
                                  符号付の2バイトバイナリ形式
                                  (有効範囲:-128 〜 127)

        なお、カスタムマクロ変数には『空』という特殊な値がありますが、10進形式
        ／2進形式浮動小数点型ともに以下で表します。

                        mcr_val = 0
                        dec_val = -1

        カスタムマクロ変数の詳細については、CNCの取扱説明書を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。


        number  ライトするカスタムマクロ変数番号を指定します。

        length  データブロック長（=10）を指定します。

        mcr_val カスタムマクロ変数の変数値／仮数部を指定します。

        dec_val カスタムマクロ変数の小数点以下桁数／指数部を指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                サイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                カスタムマクロ変数番号(number)の指定が不適切で
                                す。

                EW_DATA         データの誤り
                                カスタムマクロ変数値が有効範囲を越えています。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは指定された番号のカスタムマクロ変数に指定値を書き込み
        ます。

#include "apilib.h"

/* number is variable number to be written. */
/* value is value to be written. */
/* dec is decimal digit number. */
short example( short number, long value, short dec )
{
        short ret ;
        ret = cnc_wrmacro( FlibHndl, number, 10, value, dec ) ;
        return ( ret ) ;
}

  (15) カスタムマクロ変数のリード（範囲指定）

関数名  cnc_rdmacror

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdmacror(unsigned short FlibHndl,
                short s_number, short e_number, short length, IODBMR *macror);

解説    s_number,e_numberで指定された範囲のカスタムマクロ変数を読み出します。
        データは符号付のバイナリ形式でIODBMR内に格納されます。

        読み出し可能なカスタムマクロ変数の種類は以下のとおりです。
        (1) ローカル変数 ( #1〜#33 )
            読み出す時点で実行されているカスタムマクロのローカル変数が読み出さ
            れます。

        (2) コモン変数 ( #100〜 )
            読み出し範囲は cnc_rdmacroinfo()関数の説明を参照してください。

        cnc_setmactype() 関数より、読み出すカスタムマクロ変数の型を切り換える
        ことができます。

                ・10進形式浮動小数点型（データ形式=M*10**(-E)）
                        mcr_val : 変数値(=M)
                                  符号付の4バイトバイナリ形式
                                  (有効範囲:    -99999999 〜 99999999)

                        dec_val : 小数点以下桁数(=E)
                                  符号付の2バイトバイナリ形式
                                  (有効範囲:    -1, 0 〜 8)

                        ※Power Mateでは、上記制限を越えるデータは扱えません
                        (mcr_val, dec_valとも -1 になります)ので2進形式浮動小
                        数点型を使用してください。

                ・2進形式浮動小数点型（データ形式=M*2**(-E)）
                        mcr_val : 変数の仮数部(=M)
                                  符号付の4バイトバイナリ形式
                                  (有効範囲:制限なし)
                        dec_val : 変数の指数部(=E)
                                  符号付の2バイトバイナリ形式
                                  (有効範囲:-128 〜 127)

        なお、カスタムマクロ変数には『空』という特殊な値がありますが、10進形式
        ／2進形式浮動小数点型ともに以下で表します。
                        mcr_val = 0
                        dec_val = -1

        カスタムマクロ変数の詳細については、CNCの取扱説明書を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。


        s_number
                リードを開始するカスタムマクロ変数番号を指定します。

        e_number
                リードを終了するカスタムマクロ変数番号を指定します。

        length  データブロック長（IODBMR構造体のサイズ）を指定します。
                  ・6+6*(読み出すカスタムマクロ変数の個数)

                IODBMR   0┌─────┐              ─
                          │datano_s  │              ↑
                         2├─────┤              │
                          │dummy     │              │
                         4├─────┤              │
                          │datano_e  │              │
                         6├─────┴─────┐  │
                          │data[0].mcr_val       │length
                        10├─────┬─────┘  │
                          │data[0].dec_val           │
                        12├─────┴─────┐  │
                          〜          〜              │
                 6+6*(N-1)├─────┴─────┐  │
                          │data[N-1].mcr_val     │  │
                          ├─────┬─────┘  │
                          │data[N-1].dec_val         ↓
                     6+6*N└─────┘              ─

                N は読み出すカスタムマクロ変数の個数です。

        macror  カスタムマクロ変数を返すIODBMR構造体へのポインタです。
                IODBMR構造体は次の通りです。
                typedef struct  iodbmr {
                        short datano_s ; /* リード開始カスタムマクロ変数番号 */
                        short dummy ;    /* 未使用 */
                        short datano_e ; /* リード終了カスタムマクロ変数番号 */
                        struct {
                                long  mcr_val ; /* カスタムマクロ変数値 */
                                short dec_val ; /* 小数点以下桁数 */
                        } data[N] ;             /* N は読みだす変数の個数 */
                } IODBMR ;

                datano_s
                        実際にリードされた最初のカスタムマクロ変数番号が格納さ
                        れます。

                datano_e
                        実際にリードされた最後のカスタムマクロ変数番号が格納さ
                        れます。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────

                EW_LENGTH       データブロック長の誤り
                                IODBMR構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                カスタムマクロ変数番号(s_number,e_number)の指
                                定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは指定された範囲のカスタムマクロ変数を読み出して表示し
        ます。

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "apilib.h"

/* start/end are start/end variable number to be read. */
short example( short start, short end )
{
        IODBMR *macror ;
        char strbuf[11] ;
        short ret, idx ;
        macror = (IODBMR *)malloc( 1000 ) ;
        ret = cnc_rdmacror( FlibHndl, start, end, 1000, macror ) ;
        if ( !ret )
                for ( idx = 0 ; idx <= end-start ; idx++ ) {
                        sprintf( &strbuf[1], "%09ld",
                                        macror->data[idx].mcr_val ) ;
                        if ( strbuf[1] == '0' ) strbuf[1] = ' ' ;
                        strncpy( &strbuf[0], &strbuf[1],
                                        9 - macror->data[idx].dec_val ) ;
                        strbuf[9-macror->data[idx].dec_val] = '.' ;
                        printf( "#%04d  %s\n", start+idx, strbuf ) ;
                }
        else
                printf( "ERROR!(%d)\n", ret ) ;
        free( macror ) ;
        return ( ret ) ;
}

  (16) カスタムマクロ変数のライト（範囲指定）

関数名  cnc_wrmacror

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wrmacror(unsigned short FlibHndl,
                                                short length, IODBMR *macror);

解説    datano_s,datano_eで指定された範囲のカスタムマクロ変数を書き換えます。
        データは符号付のバイナリ形式でIODBMR内に格納します。

        書き換え可能なカスタムマクロ変数の種類は以下のとおりです。
        ローカル変数は書き換えできません。

        (1) コモン変数 ( #100〜 )
            書き換え範囲は cnc_rdmacroinfo()関数の説明を参照してください。

        cnc_setmactype() 関数より、書き換えるカスタムマクロ変数の型を切り換える
        ることができます。

                ・10進形式浮動小数点型（データ形式=M*10**(-E)）
                        mcr_val : 変数値(=M)
                                  符号付の4バイトバイナリ形式
                                  (有効範囲:    -99999999 〜 99999999)

                        dec_val : 小数点以下桁数(=E)
                                  符号付の2バイトバイナリ形式
                                  (有効範囲:    -1, 0 〜 8)

                        ※Power Mateでは、上記制限を越えるデータは扱えません
                        （戻り値:EW_DATAになります）ので2進形式浮動小数点型を
                        使用してください。

                ・2進形式浮動小数点型（データ形式=M*2**(-E)）
                        mcr_val : 変数の仮数部(=M)
                                  符号付の4バイトバイナリ形式
                                  (有効範囲:制限なし)

                        dec_val : 変数の指数部(=E)
                                  符号付の2バイトバイナリ形式
                                  (有効範囲:-128 〜 127)

        なお、カスタムマクロ変数には『空』という特殊な値がありますが、10進形式
        ／2進形式浮動小数点型ともに以下で表します。

                        mcr_val = 0
                        dec_val = -1

        カスタムマクロ変数の詳細については、CNCの取扱説明書を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。


        length  データブロック長（IODBMR構造体のサイズ）を指定します。
                  ・6+6*(書き換えるカスタムマクロ変数の個数)

                IODBMR   0┌─────┐              ─
                          │datano_s  │              ↑
                         2├─────┤              │
                          │dummy     │              │
                         4├─────┤              │
                          │datano_e  │              │
                         6├─────┴─────┐  │
                          │data[0].mcr_val       │length
                        10├─────┬─────┘  │
                          │data[0].dec_val           │
                        12├─────┴─────┐  │
                          〜          〜              │
                 6+6*(N-1)├─────┴─────┐  │
                          │data[N-1].mcr_val     │  │
                          ├─────┬─────┘  │
                          │data[N-1].dec_val         ↓
                     6+6*N└─────┘              ─

                N は書き換えるカスタムマクロ変数の個数です。

        macror  カスタムマクロ変数を格納するIODBMR構造体へのポインタです。
                IODBMR構造体は次の通りです。
                typedef struct  iodbmr {
                        short datano_s ; /* ライト開始カスタムマクロ変数番号 */
                        short dummy ;    /* 未使用 */
                        short datano_e ; /* ライト終了カスタムマクロ変数番号 */
                        struct {
                                long  mcr_val ; /* カスタムマクロ変数値 */
                                short dec_val ; /* 小数点以下桁数 */
                        } data[N] ;             /* N は書き換える変数の個数 */
                } IODBMR ;

                datano_s
                        ライトを開始するカスタムマクロ変数番号を指定します。

                datano_e
                        ライトを終了するカスタムマクロ変数番号を指定します。

                mcr_val カスタムマクロ変数の変数値／仮数部を指定します。

                dec_val カスタムマクロ変数の小数点以下桁数／指数部を指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                IODBMR構造体のサイズ(length)が不正です。


                EW_NUMBER       データ番号の誤り
                                カスタムマクロ変数番号(datano_s,datano_e)の指
                                定が不適切です。

                EW_DATA         データの誤り
                                カスタムマクロ変数値が有効範囲を越えています。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは指定された範囲のカスタムマクロ変数を書き換えます。

#include <stdlib.h>
#include "apilib.h"

/* start is start variable number to be written. */
/* value is array of value to be written. */
/* number is number of variable. */
short example( short start, long *value, short number )
{
        IODBMR *macror ;
        short ret, idx ;
        macror = (IODBMR *)malloc( 6+6*number ) ;
        macror->datano_s = start ;
        macror->datano_e = start + number - 1 ;
        for ( idx = 0 ; idx < number ; idx++ ) {
                macror->data[idx].mcr_val = value[idx] ;
                macror->data[idx].dec_val = 0 ;
        }
        ret = cnc_wrmacror( FlibHndl, 6+6*number, macror ) ;
        free( macror ) ;
        return ( ret ) ;
}

  (17) カスタムマクロ変数情報のリード

関数名  cnc_rdmacroinfo

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdmacroinfo(unsigned short FlibHndl,
                                                        ODBMVINF *mvinf);

解説    カスタムマクロのローカル変数、およびコモン変数の使用可能な個数を読み出
        します。ODBMVINF内のuse_no1, use_no2にバイナリ形式で格納されます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        mvinf   カスタムマクロ変数情報を返すODBMVINF構造体へのポインタです。
                ODBMVINF構造体は次の通りです。
                typedef struct  odbmvinf {
                        short   use_no1 ;       /* ローカル変数の個数 */
                        short   use_no2 ;       /* コモン変数の範囲 */
                } ODBMVINF ;

                use_no1 使用可能なローカル変数の個数が格納されます。
                        33個固定です。

                use_no2 使用可能なコモン変数の範囲を示す値が格納されます。

                                        0 : 100〜149, 500〜531
                                        1 : 100〜199, 500〜999
                                        2 : 100〜199, 500〜699


戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (18) カスタムマクロ変数タイプの取得

関数名  cnc_getmactype

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_getmactype(unsigned short FlibHndl,
                                                            short *macro_type);

解説    cnc_rdmacro, cnc_wrmacro, cnc_rdmacror, cnc_wrmacror関数で使用するカス
        タムマクロ変数のタイプを取得します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        macro_type
                カスタムマクロ変数のタイプ
                        ０    ：10進形式浮動小数点型（初期状態）
                        ０以外：2進形式浮動小数点型

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （エラーの詳細については、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (19) カスタムマクロ変数タイプの設定

関数名  cnc_setmactype

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_setmactype(unsigned short FlibHndl,
                                                        short macro_type);

解説    cnc_rdmacro, cnc_wrmacro, cnc_rdmacror, cnc_wrmacror関数で使用するカス
        タムマクロ変数のタイプを切り換えます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        macro_type
                カスタムマクロ変数のタイプ
                        ０    ：10進形式浮動小数点型（初期状態）
                        ０以外：2進形式浮動小数点型

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （エラーの詳細については、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

操作履歴データ関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_stopophis    履歴データのサンプリングの停止
  ( 2) cnc_startophis   履歴データのサンプリングの再開
  ( 3) cnc_rdophisno    操作履歴データ数のリード
  ( 4) cnc_rdophistry   操作履歴データのリード
  ( 5) cnc_rdalmhisno   アラーム履歴データ数のリード
  ( 6) cnc_rdalmhistry  アラーム履歴データのリード
  ( 7) cnc_clearophis   操作履歴データのクリア
  ( 8) cnc_rdhissgnl    操作履歴対象信号のリード
  ( 9) cnc_wrhissgnl    操作履歴対象信号の設定
-------------------------------------------------------------------------------

  ( 1) 履歴データのサンプリングの停止

関数名  cnc_stopophis

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_stopophis(unsigned short FlibHndl);

解説    操作履歴データとアラーム履歴データのサンプリングの停止をＮＣに指示しま
        す。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 2) 履歴データのサンプリングの再開

関数名  cnc_startophis

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_startophis(unsigned short FlibHndl);

解説    操作履歴データとアラーム履歴データのサンプリングの再開をCNCに指示します

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 3) 操作履歴データ数のリード

関数名  cnc_rdophisno

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdophisno(unsigned short FlibHndl,
                                                        unsigned short *hisno);

解説    操作履歴データ数のリードを行います。

        この関数を使用する前に、履歴データのサンプリングの停止(cnc_stopophis)
        を行う必要があります。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        hisno   操作履歴データ数を格納する変数のアドレスを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_FUNC         関数未実行
                                履歴データのサンプリングの停止(cnc_stopophis)
                                が行われていません。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 4) 操作履歴データのリード

関数名  cnc_rdophistry

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdophistry(unsigned short FlibHndl,
                                unsigned short s_no, unsigned short e_no,
                                        unsigned short length, ODBHIS *his);

解説    操作履歴データのリードを行います。

        レコードの種類(rec_type)により、操作履歴データの構造が違いますので、デ
        ータにアクセスする場合は種類に応じた構造体を使用して下さい。

        操作履歴データ並びにアラーム履歴データはCNC側で自動的に記録されています
        これらのデータにアクセスするためにはCNC側のサンプリングを一時的に停止さ
        せる必要があります。このため、本関数を使用する前に、『履歴データのサン
        プリングの停止』(cnc_stopophis)を実行する必要があります。

        また、リードが済み次第、履歴データのサンプリング停止時間を最小限にする
        ために『履歴データのサンプリングの再開』(cnc_startophis)を実行してくだ
        さい。

        開始／終了のレコード番号とは、リードする操作履歴データのレコード毎につ
        けた番号のことです。このレコード番号は『履歴データのサンプリングの停止
        』を実行してから『履歴データのサンプリングの再開』が実行されるまで有効
        です。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        s_no    開始レコード番号を指定します。
                (1 以上を指定して下さい)

        e_no    終了レコード番号を指定します。
                (1 以上を指定して下さい)

        length  データブロック長（ODBHIS構造体のサイズ）を指定します。

                ODBHIS   0┌────┐           ─
                          │  s_no  │           ↑
                         2├────┤           │
                          │  type  │           │
                         4├────┤           │
                          │  e_no  │           │
                         6├────┴────┐length
                          │      data[0]     │ │
                        14├─────────┤ │
                          〜                  〜 │
                 6+8*(n-1)├─────────┤ │
                          │      data[n]     │ ↓
                     6+8*n└─────────┘ ─


                data.rec_alm    0┌───────────┐
                                 │       rec_type       │
                                2├───────────┤
                                 │       alm_grp        │
                                4├───────────┤
                                 │       alm_no         │
                                6├─────┬─────┘
                                 │ axis_no  │
                                7├─────┤
                                 │  dummy   │
                                8└─────┘

                data.rec_mdi    0┌───────────┐
                                 │       rec_type       │
                                2├─────┬─────┘
                                 │ key_code │
                                3├─────┤
                                 │ pw_flag  │
                                4├─────┤
                                 │ dummy[0] │
                                5├─────┤
                                 │ dummy[1] │
                                6├─────┤
                                 │ dummy[2] │
                                7├─────┤
                                 │ dummy[3] │
                                8└─────┘
                data.rec_sgn    0┌───────────┐
                                 │       rec_type       │
                                2├─────┬─────┘
                                 │ sig_name │
                                3├─────┤
                                 │ sig_old  │
                                4├─────┤
                                 │ sig_new  │
                                5├─────┤
                                 │  dummy   │
                                6├─────┴─────┐
                                 │       sig_no         │
                                8└───────────┘

                data.rec_date   0┌───────────┐
                                 │       rec_type       │
                                2├─────┬─────┘
                                 │  year    │
                                3├─────┤
                                 │  month 　│
                                4├─────┤
                                 │   day    │
                                5├─────┤
                                 │  pw_flg  │
                                6├─────┤
                                 │ dummy[0] │
                                7├─────┤

                                 │ dummy[1] │
                                8└─────┘

                data.rec_time   0┌───────────┐
                                 │       rec_type       │
                                2├─────┬─────┘
                                 │  hour    │
                                3├─────┤
                                 │  minute　│
                                4├─────┤
                                 │  second  │
                                5├─────┤
                                 │  pw_flg  │
                                6├─────┤
                                 │ dummy[0] │
                                7├─────┤
                                 │ dummy[1] │
                                8└─────┘

        his     操作履歴データを返すODBHIS構造体へのポインタです。
                ODBHIS構造体は次の通りです。
                typedef struct odbhis {
                    unsigned    s_no;           /* 開始レコード番号 */
                    short       type;           /* 未使用 */
                    unsigned    e_no;           /* 入力した最後のレコード番号 */
                    union {
                        struct {
                                short   rec_type; /* レコードの種類 */
                                short   alm_grp;  /* アラームの種類 */
                                short   alm_no;   /* アラーム番号 */
                                char    axis_no;  /* 軸番号 */
                                char    dummy;    /* 未使用 */
                        } rec_alm;                /* アラーム */
                        struct {
                                short   rec_type; /* レコードの種類 */
                                char    key_code; /* キーコード */
                                char    pw_flag;  /* 未使用 */
                                char    dummy[4]; /* 未使用 */
                        } rec_mdi;                /* ＭＤＩ */
                        struct {
                                short   rec_type; /* レコードの種類 */
                                char    sig_name; /* 信号の名称 */
                                char    sig_old;  /* 変化前のビットパターン */
                                char    sig_new;  /* 変化後のビットパターン */
                                char    dummy;    /* 未使用 */
                                short   sig_no;   /* 信号の番号 */
                        } rec_sgn;                /* 信号 */
                        struct {
                                short   rec_type; /* レコードの種類 */
                                char    year;     /* 年 */
                                char    month;    /* 月 */
                                char    day;      /* 日 */
                                char    pw_flag;  /* 電源投入フラグ */
                                char    dummy[2]; /* 未使用 */
                        } rec_date;               /* 日付 */

                        struct {
                                short   rec_type; /* レコードの種類 */
                                char    hour;     /* 時 */
                                char    minute;   /* 分 */
                                char    second;   /* 秒 */
                                char    pw_flag;  /* 電源投入フラグ */
                                char    dummy[2]; /* 未使用 */
                        } rec_time;               /* 時間 */
                    } data[N];          /* N : 読み出す操作履歴データの個数 */
                } ODBHIS ;

                rec_type        レコードの種類がセットされます。
                        0 : MDI キー
                        1 : 信号
                        2 : アラーム

                alm_grp         アラームの種類がセットされます。
                        bit  0 : P/S 100
                        bit  1 : P/S 000
                        bit  2 : P/S 101
                        bit  3 : P/S その他
                        bit  4 : オーバトラベル
                        bit  5 : オーバヒート
                        bit  6 : サーボアラーム
                        bit  7 : システムアラーム
                        bit  8 : ＡＰＣアラーム
                        bit  9 : (未使用)
                        bit 10 : P/S5000 番台
                        bit 11 : (未使用)
                        bit 12 : (未使用)
                        bit 13 : (未使用)
                        bit 14 : (未使用)
                        bit 15 : 外部アラームメッセージ

                alm_no          アラーム番号がセットされます。
                axis_no         (未使用)
                key_code        キーコードがセットされます。
                sig_name        信号の名称
                                        1 : X
                                        2 : G
                                        3 : Y
                                        4 : F
                sig_old         変化前のビットパターン
                sig_new         変化後のビットパターン
                sig_no          信号の番号
                                        X : 0 〜 127, 1000 〜 1063
                                        G : 0 〜 255, 1000 〜 1255
                                        Y : 0 〜 127, 1000 〜 1063
                                        F : 0 〜 255, 1000 〜 1255
                year            年 (0 〜 99)
                month           月 (1 〜 12)
                data            日 (1 〜 31)
                hour            時 (0 〜 23)
                minute          分 (0 〜 59)
                second          秒 (0 〜 59)


戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_FUNC         関数未実行
                                履歴データのサンプリングの停止(cnc_stopophis)
                                が行われていません。

                EW_LENGTH       データブロック長の誤り
                                ODBHIS構造体のサイズ(length)が不正です。
                                以下の場合が該当します。
                                 (e_no-s_no+1) * sizeof(data[0]) + 6 < length

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 5) アラーム履歴データ数のリード

関数名  cnc_rdalmhisno

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdalmhisno(unsigned short FlibHndl,
                                                        unsigned short *hisno);

解説    アラーム履歴データ数のリードを行います。
        この関数を使用する前に、履歴データのサンプリングの停止(cnc_stopophis)
        を行う必要があります。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        hisno   アラーム履歴データ数を格納する変数のアドレスを指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_FUNC         関数未実行
                                履歴データのサンプリングの停止(cnc_stopophis)
                                が行われていません。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 6) アラーム履歴データのリード

関数名  cnc_rdalmhistry

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdalmhistry(unsigned short FlibHndl,
                                unsigned short s_no, unsigned short e_no,
                                        unsigned short length, ODBAHIS *his);

解説    アラーム履歴データのリードを行います。
        １個のアラーム履歴データの単位をレコードと呼びます。

        操作履歴データ並びにアラーム履歴データはCNC側で自動的に記録されています
        これらのデータにアクセスするためにはCNC側のサンプリングを一時的に停止さ
        せる必要があります。このため、本関数を使用する前に、『履歴データのサン
        プリングの停止』(cnc_stopophis)を実行する必要があります。

        また、リードが済み次第、履歴データのサンプリング停止時間を最小限にする
        ために『履歴データのサンプリングの再開』(cnc_startophis)を実行してくだ
        さい。

        開始／終了のレコード番号とは、リードするアラーム履歴データのレコード毎
        につけた番号のことです。このレコード番号は『履歴データのサンプリングの
        停止』を実行してから『履歴データのサンプリングの再開』が実行されるまで
        有効です。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        s_no    開始レコード番号を指定します。
                (1 以上を指定して下さい)

        e_no    終了レコード番号を指定します。
                (1 以上を指定して下さい)

        length  データブロック長（ODBAHIS構造体のサイズ）を指定します。

                ODBAHIS  0┌────┐           ─
                          │  s_no  │           ↑
                         2├────┤           │
                          │  type  │           │
                         4├────┤           │
                          │  e_no  │           │
                         6├────┴────┐length
                          │    alm_his[0]    │ │
                        54├─────────┤ │
                          〜                  〜 │
                6+48*(n-1)├─────────┤ │
                          │    alm_his[n]    │ ↓
                    6+48*n└─────────┘ ─

                alm_his  0┌─────────────┐

                          │          dummy           │
                         2├─────────────┤
                          │         alm_grp          │
                         4├─────────────┤
                          │         alm_no           │
                         6├──────┬──────┘
                          │  axis_no   │
                         7├──────┤
                          │    year    │
                         8├──────┤
                          │   month    │
                         9├──────┤
                          │    day     │
                        10├──────┤
                          │    hour    │
                        11├──────┤
                          │   minute   │
                        12├──────┤
                          │   second   │
                        13├──────┤
                          │   dummy2   │
                        14├──────┴──────┐
                          │         len_meg          │
                        16├──────┬──────┘
                          │ alm_msg[0] │
                        17├──────┤
                          〜            〜
                        47├──────┤
                          │ alm_msg[31]│
                        48└──────┘

        his     アラーム履歴データを返すODBAHIS構造体へのポインタです。
                ODBAHIS構造体は次の通りです。
                typedef struct odbahis {
                    unsigned    s_no;           /* 開始レコード番号 */
                    short       type;           /* (未使用) */
                    unsigned    e_no;           /* 終了レコード番号 */
                        struct {
                                short   dummy;
                                short   alm_grp; /* アラームの種類(未使用)*/
                                short   alm_no;  /* アラーム番号 */
                                char    axis_no; /* 軸情報                */
                                                 /* （１〜最大制御軸番号）*/
                                char    year;    /* 年 */
                                char    month;   /* 月 */
                                char    day;     /* 日 */
                                char    hour;    /* 時 */
                                char    minute;  /* 分 */
                                char    second;  /* 秒 */
                                char    dummy2;
                                short   len_msg; /* アラームメッセージ */
                                                 /* の文字数(0-32)     */
                                char    alm_msg[32]; /* アラームメッセージ */
                        } alm_his[N]; /* N : 読み出すアラーム履歴データの個数 */
                } ODBAHIS ;


                alm_no          アラーム番号
                axis_no         軸番号 (1 〜 最大制御軸番号)
                                (軸に関係ないアラームの場合は -1 です)
                year            年 (0 〜 99)
                month           月 (1 〜 12)
                data            日 (1 〜 31)
                hour            時 (0 〜 23)
                minute          分 (0 〜 59)
                second          秒 (0 〜 59)
                len_msg         アラームメッセージの文字数 (0 〜 32)
                alm_msg         アラームメッセージ

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_FUNC         関数未実行
                                履歴データのサンプリングの停止(cnc_stopophis)
                                が行われていません。

                EW_LENGTH       データブロック長の誤り
                                ODBAHIS構造体のサイズ(length)が不正です。
                                以下の場合が該当します。
                                 (e_no-s_no+1) * sizeof(data[0]) + 6 < length

                EW_NUMBER       データ番号の誤り
                                レコード番号(s_no,e_no)が不正です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 7) 操作履歴データのクリア

関数名  cnc_clearophis

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_clearophis(unsigned short FlibHndl,
                                                                short slct);

解説    操作履歴データとアラーム履歴データのクリアを行います。

        Power Mateでは slct の設定により操作履歴とアラーム履歴どちらを
        クリアするか選択できます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        slct    クリアする履歴データの種類を指定します。
                        0 : 操作履歴
                        1 : アラーム履歴

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_ATTRIB       データ属性の誤り
                                履歴データの種類(slct)の指定が不正です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 8) 操作履歴対象信号のリード

関数名  cnc_rdhissgnl

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdhissgnl(unsigned short FlibHndl,
                                                                IODBSIG *sig);

解説    操作履歴の対象となる信号のリードを行います。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        sig     操作履歴対象信号を返すIODBSIG構造体へのポインタです。
                IODBSIG構造体は次の通りです。

                typedef struct iodbsig {
                     short      datano;           /* 未使用 */
                     short      type;             /* 未使用 */
                     struct {
                                short   ent_no;   /* 登録順番号*/
                                short   sig_no;   /* 信号の番号 */
                                char    sig_name; /* 信号の名称 */
                                char    mask_pat; /* 信号のマスクパターン */
                     } data[20];
                } IODBSIG ;

                ent_no          登録順番号 (1 〜 20)

                sig_no          登録されている信号の番号
                                        X : 0 〜 127, 1000 〜 1063
                                        G : 0 〜 255, 1000 〜 1255
                                        Y : 0 〜 127, 1000 〜 1063
                                        F : 0 〜 255, 1000 〜 1255

                sig_name        登録されている信号の名称
                                        0 : 未登録
                                        1 : X
                                        2 : G
                                        3 : Y
                                        4 : F

                mask_pat        信号のマスクパターン

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 9) 操作履歴対象信号の設定

関数名  cnc_wrhissgnl

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wrhissgnl(unsigned short FlibHndl,
                                                                IODBSIG *sig);

解説    操作履歴対象信号の設定を行います。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        sig     操作履歴対象信号の設定を行うIODBSIG構造体へのポインタです。
                IODBSIG構造体は次の通りです。

                typedef struct iodbsig {
                     short      datano;           /* 未使用 */
                     short      type;             /* 信号の個数 */
                     struct {
                                short   ent_no;   /* 登録順番号*/
                                short   sig_no;   /* 信号の番号 */
                                char    sig_name; /* 信号の名称 */
                                char    mask_pat; /* 信号のマスクパターン */
                     } data[20];
                } IODBSIG ;

                ent_no          登録順番号 (1 〜 20)

                sig_no          登録する信号の番号
                                        X : 0 〜 127, 1000 〜 1063
                                        G : 0 〜 255, 1000 〜 1255
                                        Y : 0 〜 127, 1000 〜 1063
                                        F : 0 〜 255, 1000 〜 1255

                sig_name        登録する信号の名称
                                        0 : 未登録
                                        1 : X
                                        2 : G
                                        3 : Y
                                        4 : F

                mask_pat        信号のマスクパターン

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_ATTRIB       データ属性の誤り
                                登録する信号の個数(type)の指定が不正です。


                EW_DATA         データの誤り

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

軸移動制御関係
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
 *( 1) cnc_opdi         信号操作指令
 *( 2) cnc_refpoint     リファレンス点復帰
 *( 3) cnc_abspoint     アブソリュート移動指令
 *( 4) cnc_incpoint     インクレメンタル移動指令
 *( 5) cnc_dwell        ドゥエル
 *( 6) cnc_coordre      座標系設定
 *( 7) cnc_exebufstat   実行バッファ状態の読取
 *( 8) cnc_finstate     実行完了状態の読取
 *( 9) cnc_setfin       実行完了状態の解除
-------------------------------------------------------------------------------
 * この関数は、Power Mate-D では使用できません。

  ( 1) 信号操作指令

関数名  cnc_opdi

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_opdi(unsigned short FlibHndl, short number,
                                                                ODBOPDI *idb );

解説    信号の操作番号を指定して、特定のＧコード信号の切り換えを行います。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        number  操作信号番号を指定します。

        idb     信号の状態を示すODBOPDI構造体へのポインタです。
                ODBOPDI構造体は次の通りです。
                typedef struct odbopdi {
                        short   axis;           /* 軸番号 */
                        union {
                                char    cdata;
                                short   idata;
                                long    ldata;
                        } u;                    /* 信号データ */
                } ODBOPDI;

+---------+-------------------------+---------------------------------------+
| 操作信号|      操作信号名         |       設定値                          |
|   番号  |                         |                                       |
+---------+-------------------------+---------------------------------------+
|    １   | 非常停止信号            | cdata   0:非常停止 1:解除             |
+---------+-------------------------+---------------------------------------+
|    ２   | フィードホールド信号    | cdata   0:フィードホールド            |
|         |                         |         1:解除                        |
+---------+-------------------------+---------------------------------------+
|    ３   | リセット信号            | cdata   1:リセット 0:解除             |
+---------+-------------------------+---------------------------------------+
|    ４   | サーボオフ信号          | cdata #7  #6  #5  #4  #3  #2  #1  #0  |
|         |                         |     +---+---+---+---+---+---+---+---+ |
|         |                         |     | ０| ０|   |   |   |   |   |   | |
|         |                         |     +---+---+---+---+---+---+---+---+ |
|         |                         |    #0   1:第１軸サーボオフ            |
|         |                         |         0:第１軸サーボオン            |
|         |                         |    〜                                 |
|         |                         |    #5   1:第６軸サーボオフ            |
|         |                         |         0:第６軸サーボオン            |
+---------+-------------------------+---------------------------------------+
|    ７   | 早送り信号              | cdata   1:早送り信号オン              |
|         |                         |         0:早送り信号オフ              |
+---------+-------------------------+---------------------------------------+
|    ８   | スタート信号            | cdata   1:スタート信号オン            |
|         |                         |         0:スタート信号オフ            |

+---------+-------------------------+---------------------------------------+
|    ９   | モード切換え信号        | cdata #7  #6  #5  #4  #3  #2  #1  #0  |
|         |                         |     +---+---+---+---+---+---+---+---+ |
|         |                         |     | ０| ０| ０| ０|   |   |   |   | |
|         |                         |     +---+---+---+---+---+---+---+---+ |
|         |                         |       #3,#2,#1,#0                     |
|         |                         |       0  0  0  0  :MDI                |
|         |                         |       0  0  0  1  :MEM                |
|         |                         |       0  0  1  0  :EDIT               |
|         |                         |       0  0  1  1  :REF                |
|         |                         |       0  1  0  0  :JOG                |
|         |                         |       0  1  0  1  :INC                |
|         |                         |       0  1  1  1  :HNDL               |
+---------+-------------------------+---------------------------------------+
|   １０  | 送り速度オーバライド信号| cdata  00000000  :  0%                |
|         |                         |        00000001  :  1%                |
|         |                         |        00000010  :  2%                |
|         |                         |        ・・・・                       |
|         |                         |        01100100  :100%                |
|         |                         |        ・・・・                       |
|         |                         |        11111110  :254%                |
|         |                         |        11111111  :  0%                |
+---------+-------------------------+---------------------------------------+
|   １２  | トルクモード信号        | cdata #7  #6  #5  #4  #3  #2  #1  #0  |
|         |                         |     +---+---+---+---+---+---+---+---+ |
|         |                         |     | ０| ０|   |   |   |   |   |   | |
|         |                         |     +---+---+---+---+---+---+---+---+ |
|         |                         |    #0   1:第１軸トルクモード有効      |
|         |                         |         0:第１軸トルクモード無効      |
|         |                         |    〜                                 |
|         |                         |    #5   1:第６軸トルクモード有効      |
|         |                         |         0:第６軸トルクモード無効      |
+---------+-------------------------+---------------------------------------+
|   １３  | トルクオーバライド信号  | axis     :設定軸番号１〜６軸まで      |
|         |                         |           0:全軸設定                  |
|         |                         | cdata    :０〜２５５                  |
|         |                         |   オーバライド値                      |
|         |                         |        = ( cdata / 255 ) * 100%       |
+---------+-------------------------+---------------------------------------+
|   １４  | ジョグ送り信号          | axis     :設定軸番号１〜６軸まで      |
|         |                         |           0:全軸設定                  |
|         |                         | cdata #7  #6  #5  #4  #3  #2  #1  #0  |
|         |                         |     +---+---+---+---+---+---+---+---+ |
|         |                         |     | ０| ０| ０| ０|   | ０| ０|   | |
|         |                         |     +---+---+---+---+---+---+---+---+ |
|         |                         |    #3    :移動方向 1:-J  0:+J         |
|         |                         |    #0   1:移動開始                    |
|         |                         |         0:移動停止                    |
+---------+-------------------------+---------------------------------------+
|   １５  | シングルブロック信号    | cdata   1:シングルブロックオン        |
|         |                         |         0:シングルブロックオフ        |
+---------+-------------------------+---------------------------------------+

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。

        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                --------------------------------------------------------------
                戻り値          意味／対処方法
                --------------------------------------------------------------
                EW_BUSY         ビジィ
                                ＣＮＣの処理が終了するまで待つか、リトライ
                                してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 2) リファレンス点復帰

関数名  cnc_refpoint

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_refpoint(unsigned short FlibHndl,
                        short path_no, short nmod, short axis, ODBEXEC *odb);

解説    path_no, axis で指定された軸を、リファレンス点復帰します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        path_no 系統番号を指定します。（１〜６）

        nmod    完了通知フラグの有無を指定します。
                        １：完了通知有り
                        ０：完了通知無し

        axis    軸番号を指定します。（１〜６）

        odb     各系統別実行状態情報を返すODBEXEC構造体へのポインタです。
                ODBEXEC構造体は次の通りです。
                typedef struct odbexec {
                        short   dummy;          /* 未使用 */
                        char    cdata[2][8];    /* 各系統別実行状態情報 */
                } ODBEXEC;

                cdata   現在の指令バッファの状態を示します。

                        7      6      5      4      3      2      1      0 bit
                    +------+------+------+------+------+------+------+------+
      cdata[0][x-1] |      |      |EMNT16|EMNT15|EMNT14|EMNT13|EMNT12|EMNT11|
                    +------+------+------+------+------+------+------+------+
      cdata[1][x-1] |      |      |EMNT26|EMNT25|EMNT24|EMNT23|EMNT22|EMNT21|
                    +------+------+------+------+------+------+------+------+
                    +------+------+---------------------------------------+
                    |EMNT2x|EMNT1x|       実行バッファ状態                |
                    +------+------+---------------------------------------+
                    |  0   |  0   |  実行バッファは空です                 |
                    |  0   |  1   |  実行バッファ１にデータがあります     |
                    |  1   |  0   |  実行バッファ２にデータがあります     |
                    |  1   |  1   |  実行バッファ１、２にデータがあります |
                    +------+------+---------------------------------------+
                        x : 系統番号

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                --------------------------------------------------------------
                戻り値          意味／対処方法
                --------------------------------------------------------------

                EW_BUSY         ビジィ
                                ＣＮＣの処理が終了するまで待つか、リトライ
                                してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。

                8003#7  ダイレクトコマンドによるモーション指令の有無
                8010    PMCによる軸制御における各軸のDI/DO群の選択

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは、１系統の１軸目にリファレンス点復帰指令をし、
        指令バッファ状態を表示させます。

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        ODBEXEC odb ;
        short   ret ;
        short   i, j ;

        ret = cnc_refpoint( FlibHndl, 1, 0, 1, &odb ) ;

        printf( "Return value : %d\n", ret ) ;
        if( ret == 0 ){
                for( i = 0 ; i < 2 ; i++ ){
                        for( j = 0 ; j < 8 ; j++ ){
                                printf( "%x ", odb.cdata[i][j] ) ;
                        }
                        printf( "\n" ) ;
                }
        }
}

  ( 3) アブソリュート移動指令

関数名  cnc_abspoint

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_abspoint(unsigned short FlibHndl,
                        short path_no, short nmod, short axis, long feed,
                                                ODBPOS *idb, ODBEXEC *odb);

解説    path_no, idb.idata で指定された軸を、idb.ldataにアブソリュート指令
        で指定したポジションへ、feed 速度で移動します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        path_no 系統番号を指定します。（１〜６）

        nmod    完了通知フラグの有無を指定します。
                        １：完了通知有り
                        ０：完了通知無し

        axis    移動軸数を指定します。（１〜６）

        feed    移動速度を指定します。

        idb     各軸毎の移動情報を示すODBPOS構造体へのポインタです。
                ODBPOS構造体は次の通りです。
                typedef struct odbpos {
                        short   idata;          /* 軸番号 */
                        long    ldata;          /* 座標値 */
                } ODBPOS;

                idata   移動する軸番号を指定します。

                ldata   移動する座標値を指定します。
                        移動単位は以下のとおりです。

                        +---------------------+---------------+
                        |                     |     IS-B      |
                        +---------------------+---------------+
                        | 直線軸（ミリ出力）  | 0.001  [mm]   |
                        +---------------------+---------------+
                        | 直線軸（インチ出力）| 0.0001 [inch] |
                        +---------------------+---------------+
                        | 回転軸              | 0.001  [deg]  |
                        +---------------------+---------------+

        odb     各系統別実行状態情報を返すODBEXEC構造体へのポインタです。
                ODBEXEC構造体は次の通りです。
                typedef struct odbexec {
                        short   dummy;          /* 未使用 */
                        char    cdata[2][8];    /* 各系統別実行状態情報 */
                } ODBEXEC;


                cdata   現在の指令バッファの状態を示します。

                        7      6      5      4      3      2      1      0 bit
                    +------+------+------+------+------+------+------+------+
      cdata[0][x-1] |      |      |EMNT16|EMNT15|EMNT14|EMNT13|EMNT12|EMNT11|
                    +------+------+------+------+------+------+------+------+
      cdata[1][x-1] |      |      |EMNT26|EMNT25|EMNT24|EMNT23|EMNT22|EMNT21|
                    +------+------+------+------+------+------+------+------+
                    +------+------+---------------------------------------+
                    |EMNT2x|EMNT1x|       実行バッファ状態                |
                    +------+------+---------------------------------------+
                    |  0   |  0   |  実行バッファは空です                 |
                    |  0   |  1   |  実行バッファ１にデータがあります     |
                    |  1   |  0   |  実行バッファ２にデータがあります     |
                    |  1   |  1   |  実行バッファ１、２にデータがあります |
                    +------+------+---------------------------------------+
                        x : 系統番号

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                --------------------------------------------------------------
                戻り値          意味／対処方法
                --------------------------------------------------------------
                EW_BUSY         ビジィ
                                ＣＮＣの処理が終了するまで待つか、リトライ
                                してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。

                8003#7  ダイレクトコマンドによるモーション指令の有無
                8010    PMCによる軸制御における各軸のDI/DO郡の選択

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは、１系統の１軸目を１００の位置、２軸目を−１００の
        位置に速度５００で移動させる指令をし、指令バッファの状態を返させるも
        のです。
        （ミリ出力、設定単位は IS-Bであるとします。）

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        ODBPOS  idb[2] ;
        ODBEXEC odb ;
        short   ret ;
        short   i, j ;


        idb[0].idata = 1 ;
        idb[0].ldata = 100000 ;
        idb[1].idata = 2 ;
        idb[1].ldata = -100000 ;

        ret = cnc_abspoint( FlibHndl, 1, 0, 2, 500, idb, &odb ) ;

        printf( "Return value : %d\n", ret ) ;
        if( ret == 0 ){
                for( i = 0 ; i < 2 ; i++ ){
                        for( j = 0 ; j < 8 ; j++ ){
                                printf( "%x ", odb.cdata[i][j] ) ;
                        }
                        printf( "\n" ) ;
                }
        }
}

  ( 4) インクレメンタル移動指令

関数名  cnc_incpoint

宣言    #include        "Fwlib32.h"                             (Windows'95版)
        FWLIBAPI short WINAPI cnc_incpoint(unsigned short FlibHndl,
                        short path_no, short nmod, short axis, long feed,
                                                ODBPOS *idb, ODBEXEC *odb);

解説    path_no, idb.idata で指定された軸を、idb.ldataにインクレメンタル指令
        で指定した移動距離分、feed 速度で移動します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        path_no 系統番号を指定します。（１〜６）

        nmod    完了通知フラグの有無を指定します。
                        １：完了通知有り
                        ０：完了通知無し

        axis    移動軸数を指定します。（１〜６）

        feed    移動速度を指定します。

        idb     各軸毎の移動情報を示すODBPOS構造体へのポインタです。
                ODBPOS構造体は次の通りです。
                typedef struct odbpos {
                        short   idata;          /* 軸番号 */
                        long    ldata;          /* 座標値 */
                } ODBPOS;

                idata   移動する軸番号を指定します。

                ldata   移動する距離を指定します。
                        移動単位は以下のとおりです。

                        +---------------------+---------------+
                        |                     |     IS-B      |
                        +---------------------+---------------+
                        | 直線軸（ミリ出力）  | 0.001  [mm]   |
                        +---------------------+---------------+
                        | 直線軸（インチ出力）| 0.0001 [inch] |
                        +---------------------+---------------+
                        | 回転軸              | 0.001  [deg]  |
                        +---------------------+---------------+

        odb     各系統別実行状態情報を返すODBEXEC構造体へのポインタです。
                ODBEXEC構造体は次の通りです。
                typedef struct odbexec {
                        short   dummy;          /* 未使用 */
                        char    cdata[2][8];    /* 各系統別実行状態情報 */

                } ODBEXEC;

                cdata   現在の指令バッファの状態を示します。

                        7      6      5      4      3      2      1      0 bit
                    +------+------+------+------+------+------+------+------+
      cdata[0][x-1] |      |      |EMNT16|EMNT15|EMNT14|EMNT13|EMNT12|EMNT11|
                    +------+------+------+------+------+------+------+------+
      cdata[1][x-1] |      |      |EMNT26|EMNT25|EMNT24|EMNT23|EMNT22|EMNT21|
                    +------+------+------+------+------+------+------+------+
                    +------+------+---------------------------------------+
                    |EMNT2x|EMNT1x|       実行バッファ状態                |
                    +------+------+---------------------------------------+
                    |  0   |  0   |  実行バッファは空です                 |
                    |  0   |  1   |  実行バッファ１にデータがあります     |
                    |  1   |  0   |  実行バッファ２にデータがあります     |
                    |  1   |  1   |  実行バッファ１、２にデータがあります |
                    +------+------+---------------------------------------+
                        x : 系統番号

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                --------------------------------------------------------------
                戻り値          意味／対処方法
                --------------------------------------------------------------
                EW_BUSY         ビジィ
                                ＣＮＣの処理が終了するまで待つか、リトライ
                                してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。

                8003#7  ダイレクトコマンドによるモーション指令の有無
                8010    PMCによる軸制御における各軸のDI/DO郡の選択

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは、１系統の１軸目の位置を＋１００、２軸目の位置を
        −１００に速度５００で移動させる指令をし、指令バッファ状態を表示し
        ます。（ミリ出力、設定単位は IS-B であるとします。）

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        ODBPOS  idb[2] ;
        ODBEXEC odb ;
        short   ret ;
        short   i, j ;


        idb[0].idata = 1 ;
        idb[0].ldata = 100000 ;
        idb[1].idata = 2 ;
        idb[1].ldata = -100000 ;

        ret = cnc_incpoint( FlibHndl, 1, 0, 2, 500, idb, &odb ) ;

        printf( "Return value : %d\n", ret ) ;
        if( ret == 0 ){
                for( i = 0 ; i < 2 ; i++ ){
                        for( j = 0 ; j < 8 ; j++ ){
                                printf( "%x ", odb.cdata[i][j] ) ;
                        }
                        printf( "\n" ) ;
                }
        }
}

  ( 5) ドゥエル

関数名  cnc_dwell

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_dwell(unsigned short FlibHndl, short path_no,
                        short nmod, short axis, ODBPOS *idb, ODBEXEC *odb);

解説    path_no で指定された系統を、idb.ldata で指定した時間(sec)停止させます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        path_no 系統番号を指定します。（１〜６）

        nmod    完了通知フラグの有無を指定します。
                        １：完了通知有り
                        ０：完了通知無し

        axis    停止軸数を指定します。（１〜６）

        idb     各軸毎の時間情報を示すODBPOS構造体へのポインタです。
                ODBPOS構造体は次の通りです。
                typedef struct odbpos {
                        short   idata;          /* 軸番号 */
                        long    ldata;          /* 停止時間(sec) */
                } ODBPOS;

                idata   軸番号を指定します。

                ldata   時間(sec)を指定します。(0.001 - 99999.999)

        odb     各系統別実行状態情報を返すODBEXEC構造体へのポインタです。
                ODBEXEC構造体は次の通りです。
                typedef struct odbexec {
                        short   dummy;          /* 未使用 */
                        char    cdata[2][8];    /* 各系統別実行状態情報 */
                } ODBEXEC;

                cdata   現在の指令バッファの状態を示します。

                        7      6      5      4      3      2      1      0 bit
                    +------+------+------+------+------+------+------+------+
      cdata[0][x-1] |      |      |EMNT16|EMNT15|EMNT14|EMNT13|EMNT12|EMNT11|
                    +------+------+------+------+------+------+------+------+
      cdata[1][x-1] |      |      |EMNT26|EMNT25|EMNT24|EMNT23|EMNT22|EMNT21|
                    +------+------+------+------+------+------+------+------+
                    +------+------+---------------------------------------+
                    |EMNT2x|EMNT1x|       実行バッファ状態                |
                    +------+------+---------------------------------------+
                    |  0   |  0   |  実行バッファは空です                 |
                    |  0   |  1   |  実行バッファ１にデータがあります     |
                    |  1   |  0   |  実行バッファ２にデータがあります     |

                    |  1   |  1   |  実行バッファ１、２にデータがあります |
                    +------+------+---------------------------------------+
                        x : 系統番号

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                --------------------------------------------------------------
                戻り値          意味／対処方法
                --------------------------------------------------------------
                EW_BUSY         ビジィ
                                ＣＮＣの処理が終了するまで待つか、リトライ
                                してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。

                8003#7  ダイレクトコマンドによるモーション指令の有無
                8010    PMCによる軸制御における各軸のDI/DO郡の選択

CNCモード       すべてのモードで使用できます。

  ( 6) 座標系設定

関数名  cnc_coordre

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_coordre(unsigned short FlibHndl,
                                        short path_no, short nmod, short axis,
                                                ODBPOS *idb, ODBEXEC *odb);

解説    path_no, idb.idata で指定された軸を、idb.ldata で指定した座標に設定
        します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        path_no 系統番号を指定します。（１〜６）

        nmod    完了通知フラグの有無を指定します。
                        １：完了通知有り
                        ０：完了通知無し

        axis    設定軸数を指定します。（１〜６）

        idb     各軸毎の座標情報を返すODBPOS構造体へのポインタです。
                ODBPOS構造体は次の通りです。
                typedef struct odbpos {
                        short   idata;          /* 軸番号 */
                        long    ldata;          /* 座標値 */
                } ODBPOS;

                idata   軸番号を指定します。

                ldata   座標値を指定します。
                        設定単位は以下のとおりです。

                        +---------------------+---------------+
                        |                     |     IS-B      |
                        +---------------------+---------------+
                        | 直線軸（ミリ出力）  | 0.001  [mm]   |
                        +---------------------+---------------+
                        | 直線軸（インチ出力）| 0.0001 [inch] |
                        +---------------------+---------------+
                        | 回転軸              | 0.001  [deg]  |
                        +---------------------+---------------+

        odb     各系統別実行状態情報を返すODBEXEC構造体へのポインタです。
                ODBEXEC構造体は次の通りです。
                typedef struct odbexec {
                        short   dummy;          /* 未使用 */
                        char    cdata[2][8];    /* 各系統別実行状態情報 */
                } ODBEXEC;


                cdata   現在の指令バッファの状態を示します。

                        7      6      5      4      3      2      1      0 bit
                    +------+------+------+------+------+------+------+------+
      cdata[0][x-1] |      |      |EMNT16|EMNT15|EMNT14|EMNT13|EMNT12|EMNT11|
                    +------+------+------+------+------+------+------+------+
      cdata[1][x-1] |      |      |EMNT26|EMNT25|EMNT24|EMNT23|EMNT22|EMNT21|
                    +------+------+------+------+------+------+------+------+
                    +------+------+---------------------------------------+
                    |EMNT2x|EMNT1x|       実行バッファ状態                |
                    +------+------+---------------------------------------+
                    |  0   |  0   |  実行バッファは空です                 |
                    |  0   |  1   |  実行バッファ１にデータがあります     |
                    |  1   |  0   |  実行バッファ２にデータがあります     |
                    |  1   |  1   |  実行バッファ１、２にデータがあります |
                    +------+------+---------------------------------------+
                        x : 系統番号

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                --------------------------------------------------------------
                戻り値          意味／対処方法
                --------------------------------------------------------------
                EW_BUSY         ビジィ
                                ＣＮＣの処理が終了するまで待つか、リトライ
                                してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。

                8003#7  ダイレクトコマンドによるモーション指令の有無
                8010    PMCによる軸制御における各軸のDI/DO郡の選択

CNCモード       すべてのモードで使用できます。

  ( 7) 実行バッファ状態の読取り

関数名  cnc_exebufstat

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_exebufstat(unsigned short FlibHndl,
                                                                ODBEXEC *odb);

解説    cnc_refpoint, cnc_abspoint, cnc_incpoint, cnc_dwell, cnc_coordre 等
        の命令で指令されたブロックのバッファの状態を通知させます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        odb     各系統別実行状態情報を返すODBEXEC構造体へのポインタです。
                ODBEXEC構造体は次の通りです。
                typedef struct odbexec {
                        short   dummy;          /* 未使用 */
                        char    cdata[2][8];    /* 各系統別実行状態情報 */
                } ODBEXEC;

                cdata   現在の指令バッファの状態を示します。

                        7      6      5      4      3      2      1      0 bit
                    +------+------+------+------+------+------+------+------+
      cdata[0][x-1] |      |      |EMNT16|EMNT15|EMNT14|EMNT13|EMNT12|EMNT11|
                    +------+------+------+------+------+------+------+------+
      cdata[1][x-1] |      |      |EMNT26|EMNT25|EMNT24|EMNT23|EMNT22|EMNT21|
                    +------+------+------+------+------+------+------+------+
                    +------+------+---------------------------------------+
                    |EMNT2x|EMNT1x|       実行バッファ状態                |
                    +------+------+---------------------------------------+
                    |  0   |  0   |  実行バッファは空です                 |
                    |  0   |  1   |  実行バッファ１にデータがあります     |
                    |  1   |  0   |  実行バッファ２にデータがあります     |
                    |  1   |  1   |  実行バッファ１、２にデータがあります |
                    +------+------+---------------------------------------+
                        x : 系統番号

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                --------------------------------------------------------------
                戻り値          意味／対処方法
                --------------------------------------------------------------
                EW_BUSY         ビジィ
                                ＣＮＣの処理が終了するまで待つか、リトライ
                                してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。


                8003#7  ダイレクトコマンドによるモーション指令の有無
                8010    PMCによる軸制御における各軸のDI/DO郡の選択

CNCモード       すべてのモードで使用できます。

  ( 8) 実行完了状態の読取り

関数名  cnc_finstate

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_finstate(unsigned short FlibHndl,
                                                                ODBFIN *odb);

解説    cnc_refpoint, cnc_abspoint, cnc_incpoint, cnc_dwell, cnc_coordre 等の
        命令で指令されたブロックの完了通知フラグの状態を各系統毎に通知させます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        odb     各系統別完了通知フラグの状態を返すODBFIN構造体へのポインタです。
                ODBFIN構造体は次の通りです。
                typedef struct odbfin {
                        short   dummy;          /* 未使用 */
                        char    cdata[8];       /* 各系統別完了通知フラグ */
                } ODBFIN;

                cdata   現在の完了通知フラグの状態を示します。

                       7      6      5      4      3      2      1      0 bit
                   +------+------+------+------+------+------+------+------+
        cdata[x-1] |      |      |EMNT63|EMNT15|EMNT14|EMNT13|EMNT12|EMNT11|
                   +------+------+------+------+------+------+------+------+
                    EMNT1x : 0 : 未完了
                             1 : 完了
                         x : 系統番号

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                --------------------------------------------------------------
                戻り値          意味／対処方法
                --------------------------------------------------------------
                EW_BUSY         ビジィ
                                ＣＮＣの処理が終了するまで待つか、リトライ
                                してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。

                8003#7  ダイレクトコマンドによるモーション指令の有無
                8010    PMCによる軸制御における各軸のDI/DO郡の選択

CNCモード       すべてのモードで使用できます。

  ( 9) 実行完了読取状態の解除

関数名  cnc_setfin

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_setfin(unsigned short FlibHndl, ODBFIN *idb);

解説    完了通知フラグをリセットします。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        odb     各系統別完了通知フラグの状態を返すODBFIN構造体へのポインタです。
                ODBFIN構造体は次の通りです。
                typedef struct odbfin {
                        short   dummy;          /* 未使用 */
                        char    cdata[8];       /* 各系統別完了通知フラグ */
                } ODBFIN;

                cdata   リセットする完了通知フラグを指定します。

                       7      6      5      4      3      2      1      0 bit
                   +------+------+------+------+------+------+------+------+
        cdata[x-1] |      |      |EMNT63|EMNT15|EMNT14|EMNT13|EMNT12|EMNT11|
                   +------+------+------+------+------+------+------+------+
                    EMNT1x : リセットするビットを１にする。
                         x : 系統番号

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                --------------------------------------------------------------
                戻り値          意味／対処方法
                --------------------------------------------------------------
                EW_BUSY         ビジィ
                                ＣＮＣの処理が終了するまで待つか、リトライ
                                してください。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。

                8003#7  ダイレクトコマンドによるモーション指令の有無
                8010    PMCによる軸制御における各軸のDI/DO郡の選択

CNCモード       すべてのモードで使用できます。

その他
-------------------------------------------------------------------------------
  関数名                機  能  内  容
-------------------------------------------------------------------------------
  ( 1) cnc_sysinfo      ＣＮＣシステム情報のリード
  ( 2) cnc_sysconfig    ＣＮＣシステム構成情報のリード
  ( 3) cnc_statinfo     ＣＮＣステータス情報のリード
  ( 4) cnc_alarm        アラームステータスのリード
  ( 5) cnc_rdalminfo    アラーム情報のリード
  ( 6) cnc_modal        モーダルデータのリード
  ( 7) cnc_diagnoss     ダイアグノーズデータのリード
  ( 8) cnc_diagnosr     ダイアグノーズデータのリード（範囲指定）
  ( 9) cnc_getfigure    最大有効桁数、小数点以下桁数のリード
  (10) cnc_rdcurrent    サーボ調整用実電流のリード
  (11) cnc_rdsrvspeed   サーボ調整用実速度のリード
  (12) cnc_rdloopgain   サーボ調整用ループゲインのリード
  (13) cnc_rdopmsg      オペレータメッセージのリード
  (14) cnc_rdopnlsgnl   ソフトオペパネの出力信号イメージのリード
  (15) cnc_wropnlsgnl   ソフトオペパネの出力信号のライト
  (16) cnc_rdopnlgnrl   ソフトオペパネの汎用出力信号イメージのリード
  (17) cnc_wropnlgnrl   ソフトオペパネの汎用出力信号のライト
  (18) cnc_rdopnlgsname ソフトオペパネの汎用信号名称のリード
  (19) cnc_wropnlgsname ソフトオペパネの汎用信号名称の設定
-------------------------------------------------------------------------------

  ( 1) ＣＮＣシステム情報のリード

関数名  cnc_sysinfo

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_sysinfo(unsigned short FlibHndl,
                                                        ODBSYS *sysinfo);

解説    CNCのシステムソフトウェアのROM系列および版数、制御軸数などのCNC固有の
        システム情報を読みだします。

        CNC側のシステムソフトウェアとPMC側との適合性の確認、CNC側の絶対位置座標
        値、機械位置座標値などの座標値データを読み出す時の軸数の取得などに使用
        します。

        各文字列の終端には NULL文字('\0')は付加されません。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        sysinfo ＣＮＣシステム情報を返すODBSYS構造体へのポインタです。

                ODBSYS構造体は次の通りです。
                typedef struct odbsys {
                        short   dummy ;         /* 未使用 */
                        short   max_axis ;      /* 最大制御軸数 */
                        char    cnc_type[2] ;   /* CNCの種類 (ASCII) */
                        char    mt_type[2] ;    /* Power Mate の種類 (ASCII) */
                        char    series[4] ;     /* 系列番号 (ASCII) */
                        char    version[4] ;    /* 版数 (ASCII) */
                        char    axes[2] ;       /* 制御軸数 (ASCII) */
                } ODBSYS ;

                max_axis        最大制御軸数
                                ＣＮＣシステムにて制御可能な最大軸数です。

                cnc_type        ＣＮＣの種類(ASCII)
                                'PM' : Power Mate

                mt_type         Power Mate の種類(ASCII)
                                ' D' : Power Mate-D
                                ' H' : Power Mate-H

                series          CNCソフトの系列番号(ASCII)
                                ４桁の文字列を渡します。

                version         CNCソフトの版数(ASCII)
                                ４桁の文字列を渡します。

                axes            制御軸数(ASCII)
                                ２桁の文字列を渡します。
                                ４軸の場合、' 4'となります。


                ODBSYS   0┌────┐
                          │dummy   │
                         2├────┤
                          │max_axis│
                         4├────┤
                          │cnc_type│
                         6├────┤
                          │mt_type │
                         8├────┴───┐
                          │     series     │
                        12├────────┤
                          │    version     │
                        16├────┬───┘
                          │  axes  │
                        18└────┘

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。

        （エラーの詳細については、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        "PM-H (8880-14) 4軸システム"において本関数を実行すると以下の情報が
        得られます。
                sysinfo.max_axis = 6
                sysinfo.cnc_type = "PM"
                sysinfo.mt_type  = " H"
                sysinfo.series   = "8880"
                sysinfo.version  = "0014"
                sysinfo.axes     = " 4"

  ( 2) ＣＮＣシステム構成情報のリード

関数名  cnc_sysconfig

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_sysconfig(unsigned short FlibHndl,
                                                        ODBSYSC *sysinfo);

解説    ＣＮＣのシステム構成情報を読み出します。
        各種情報はODBSYSC内の各メンバに格納されます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        sysinfo ＣＮＣシステム情報を返すODBSYSC構造体へのポインタです。

                typedef struct odbsysc {
                     char    slot_no_p[16];     /* 物理スロット番号 */
                     char    slot_no_l[16];     /* 論理スロット番号 */
                     short   mod_id[16];        /* モジュールＩＤ */
                     short   soft_id[16];       /* ソフトＩＤ */
                     char    s_series[16][5];   /* ソフトの系列 */
                     char    s_version[16][5];  /* ソフトの版数 */
                     char    dummy[16];         /* 未使用 */

                     short   m_rom;             /* CNC ソフトの組み付け状態 */
                     short   s_rom;  /* SUB CPU の CNC ソフトの組み付け状態 */
                     char    svo_soft[8];     /* サーボのソフトの系列、版数 */
                     char    pmc_soft[6];      /* PMC 管理ソフトの系列、版数 */
                     char    lad_soft[6];       /* ラダーの系列、版数 */
                     char    mcr_soft[8];       /* マクロエグゼキュータ、
                                        オーダメードマクロの系列、版数 */
                     char    spl1_soft[6];
                                /* スピンドルのソフトの系列、版数(1台目) */
                     char    spl2_soft[6];
                                /* スピンドルのソフトの系列、版数(2台目) */
                     short   frmmin;    /* FROMモジュールの容量(MAIN) */
                     short   drmmin;    /* DRAMモジュールの容量(MAIN) */
                     short   srmmin;    /* 追加SRAMモジュールの容量(MAIN) */
                     short   pmcmin;    /* PMCモジュールの種類(MAIN) */
                     short   sv1min;  /* サーボモジュール(1,2軸)の有無(MAIN) */
                     short   sv3min;  /* サーボモジュール(3,4軸)の有無(MAIN) */
                     short   sv5min;  /* サーボモジュール(5,6軸)の有無(MAIN) */
                     short   sicmin;    /* SICの有無(MAIN) */
                     short   posmin;    /* POSITION LSIの有無(MAIN) */
                     short   submin;    /* サブボードの情報 */
                     short   hdiio;   /* 高速スキップ用LSIの有無(I/Oカード) */
                     short   dummy[32];
                } ODBSYSC ;

                slot_no_p       未使用
                slot_no_l       未使用

                mod_id          未使用
                soft_id         ソフトＩＤ
                                実装されているモジュールのソフトIDが実装順にバ
                                イナリで格納されます。この配列は、FFHにより終
                                端されています。FFH以降のデータは無効です。
                                        40H : CNC

                s_series        ソフトの系列
                                実装されているボードのソフトの系列が実装順に
                                ASCII コード(４バイト＋NULL)で格納されます。
                s_version       ソフトの版数
                                実装されているボードのソフトの系列が実装順に
                                ASCII コード(４バイト＋NULL)で格納されます。
                m_rom           未使用
                s_rom           未使用
                svo_soft        サーボのソフトの系列、版数
                                ASCIIコードで格納されます。先頭から4バイトが系
                                列、残りの4バイトが版数です。本ソフトがないこと
                                はありません。
                pmc_soft        PMC管理ソフトの系列、版数
                                ASCIIコードで格納されます。先頭から4バイトが系
                                列、残りの2バイトが版数です。本ソフトがないこと
                                はありません。
                lad_soft        ラダーの系列、版数
                                ASCIIコードで格納されます。先頭から4バイトが系
                                列、残りの2バイトが版数です。本ソフトがない場合
                                6バイトとも空白(20H)です。
                mcr_soft        マクロエグゼキュータ、オーダメードマクロの系列
                                版数
                                ASCIIコードで格納されます。2バイト目からの4バイ
                                トが系列、続く2バイトが版数です。本ソフトがない
                                場合、先頭のバイトは0FFH(ある場合は0FFH以外)で
                                す。最後のバイトは未使用です。
                spl1_soft       未使用
                spl2_soft       未使用
                frmmin          FROMモジュールの容量(MAIN)
                                        -1 :  未実装
                                         0 :  2 (MB)
                                         1 :  リザーブ
                                         2 :  4 (MB)
                drmmin
                                DRAMモジュールの容量(MAIN)
                                        -1 : 未実装
                                         0 :  2   (MB)
                                         1 :  2.5 (MB)
                                         2 :  リザーブ
                                         3 :  3   (MB)
                srmmin
                                追加SRAMモジュールの容量(MAIN)
                                        -1 : 未実装
                                         0 : 256 (KB)
                                         1 : 1   (MB)
                                         2 : 1   (MB)
                                         3 : 512 (KB)
                                         4 : 256 (KB)

                                         5 : 128 (KB)
                                         6 : 768 (KB)
                                         7 : 未実装
                pmcmin          PMCモジュールの種類(MAIN)
                                        -1 : 未実装
                                         0 : PMP2+SLC
                                         1 : Bit operation module
                                         2 : PMP モジュール
                                         3 : 未実装
                                         4 : リザーブ
                sv1min          サーボモジュール(1,2軸)の有無(MAIN)
                                        -1 : 無          0 : 有
                sv3min          サーボモジュール(3,4軸)の有無(MAIN)
                                        -1 : 無          0 : 有
                sv5min          サーボモジュール(5,6軸)の有無(MAIN)
                                        -1 : 無          0 : 有
                sicmin
                                SICの有無(MAIN)
                                        -1 : 無          0 : 有
                posmin
                                POSITION LSIの有無(MAIN)
                                        -1 : 無          0 : 有
                submin          サブボードの情報
                                        -1 : 未実装
                                         0 : リザーブ
                                         1 : RS485
                                         2 : 内蔵I/Oボード
                                         3 : M-NETボード
                                         4 : リザーブ
                                         5 : リザーブ
                                         6 : リザーブ
                                         7 : I/Oリンク２ボード
                hdiio           高速スキップ用LSIの有無(I/Oカード)
                                        -1 : 無          0 : 有

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 3) ＣＮＣステータス情報のリード

関数名  cnc_statinfo

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_statinfo(unsigned short FlibHndl,
                                                        ODBST *statinfo);

解説    CNCのステータス情報を読み出します。各種情報はODBST内の各メンバに格納さ
        れます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        statinfo
                CNCステータス情報を返すODBST構造体へのポインタです。

                typedef struct odbst {
                     short  dummy[2] ;    /* 未使用                   */
                     short  aut ;         /* 自動・手動運転モード選択 */
                     short  run ;         /* 自動運転状態             */
                     short  motion ;      /* 軸移動・ドウェルの状態   */
                     short  mstb ;        /* M, S, T, B機能の状態     */
                     short  emergency ;   /* 非常停止の状態           */
                     short  alarm ;       /* アラーム状態             */
                     short  edit ;        /* プログラム編集状態       */
                } ODBST ;

                aut     自動・手動運転モード選択
                                0 : MDI               1 : MEMory
                                2 : ****              3 : EDIT
                                4 : HaNDle            5 : JOG
                                6 : Theach in JOG     7 : Theach in HND
                                8 : INC・feed         9 : REFerence
                               10 : ReMoTe
                run     自動運転状態
                                0 : **** (reset)      1 : STOP
                                2 : HOLD              4 : STaRT
                motion  軸移動・ドウェルの状態
                                0 : ***               1 : MoTioN
                                3 : DWeLl
                mstb            M,S,T,B機能の状態
                                0 : *** （その他）    1 : FIN
                emergency
                        非常停止の状態
                                0 : (非常停止解除)    1 : EMerGency
                                2 : ReSET
                alarm   アラーム状態
                                0 : *** (その他)      1 : ALarM
                                2 : BATtery low
                edit    プログラム編集状態
                                0 : **** (無編集)     1 : EDIT
                                2 : SeaRCH            3 : OUTPUT

                                4 : INPUT             5 : COMPARE
                                6 : Label SKip        7 : OFfSeT
                                8 : Work ShiFT        9 : ReSTaRt

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。

        （エラーの詳細については、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 4) アラームステータスのリード

関数名  cnc_alarm

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_alarm(unsigned short FlibHndl,
                                                                ODBALM *alarm);

解説    CNC側がアラーム状態になっている時、その内容を読みだします。各種情報は
        ODBALM内のdataに格納されます。

        アプリケーションプログラムでCNC側のアラーム状態を監視し、保守情報の
        表示や解除の手順のガイダンスの表示などに使用します。

        CNC がシステムアラームの場合は、PC - CNC 間のデータのやり取りは一切不
        可能なため、アラームステータスの獲得は行えません。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        alarm   アラームステータス情報を返すODBALM構造体へのポインタです。
                ODBALM構造体は次の通りです。

                typedef struct odbalm {
                     short  dummy[2] ;          /* 未使用 */
                     short  data ;              /* アラームステータス */
                } ODBALM ;

                dummy           未使用

                data            アラームステータス
                                各ビットの意味は次の通りです。
                                #00 : P/S100
                                #01 : P/S000
                                #02 : P/S101
                                #03 : P/Sその他
                                #04 : オーバトラベルアラーム
                                #05 : オーバヒートアラーム
                                #06 : サーボアラーム
                                #07 : (未使用)
                                #08 : APCアラーム
                                #09 : (未使用)
                                #10 : P/S5000番台
                                #11 : (未使用)
                                #12 : (未使用)
                                #13 : (未使用)
                                #14 : (未使用)
                                #15 : 外部アラームメッセージ

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）


CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

プログラム例
        以下のプログラムは発生中のアラームの種類を表示します。

#include <stdio.h>
#include "apilib.h"
void example( void )
{
        char *almmsg[] = {
                "P/S 100 ALARM","P/S 000 ALARM",
                "P/S 101 ALARM","P/S ALARM (1-255)",
                "OT ALARM",     "OH ALARM",
                "SERVO ALARM",  "unknown ALARM",
                "APC ALARM",    "SPINDLE ALARM",
                "P/S ALARM (5000-)"
        } ;
        ODBALM buf ;
        unsigned short idx ;
        cnc_alarm( FlibHndl, &buf ) ;
        if ( buf.data == 0 )
                printf( "NO ALARM\n" ) ;
        else
                for ( idx = 0 ; idx < 11 ; idx++ ) {
                        if ( buf.data & 0x0001 )
                                printf( "%s\n", almmsg[idx] ) ;
                        buf.data >>= 1 ;
                }
}

  ( 5) アラーム情報のリード

関数名  cnc_rdalminfo


宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdalminfo(unsigned short FlibHndl,
                short type, short alm_type, short length, ALMINFO *alarminfo);

解説    CNC側で発生しているアラームの詳細な情報を読みだします。各種情報は
        ALMINFO内のdataに格納されます。

        アプリケーションプログラムで発生中のアラーム番号やアラームメッセージ
        を表示する場合などに使用します。

        CNC がシステムアラームの場合は、PC - CNC 間のデータのやり取りは一切不
        可能なため、アラーム情報の獲得は行えません。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        type    出力フォーマットのタイプを指定します。
                        0 : アラーム情報 1 (メッセージなし)
                        1 : アラーム情報 2 (メッセージあり)

        alm_type
                アラームの種類を指定します。
                各ビットの意味は次の通りです。
                                #00 : P/S100
                                #01 : P/S000
                                #02 : P/S101
                                #03 : P/Sその他
                                #04 : オーバトラベル
                                #05 : オーバヒート
                                #06 : サーボアラーム
                                #07 : (未使用)
                                #08 : APCアラーム
                                #09 : (未使用)
                                #10 : P/S5000番台
                                #11 : (未使用)
                                #12 : (未使用)
                                #13 : (未使用)
                                #14 : (未使用)
                                #15 : 外部アラームメッセージ

        length  データブロック長（ALMINFO構造体のサイズ）を指定します。

                u.alm1           0┌───────────┐ ─
                                  │       alm[0]         │ ↑
                                 4├───────────┤ │
                                  〜                      〜 │
                           4*(N-1)├───────────┤length
                                  │       alm[N-1]       │ │

                               4*N├───────────┤ │
                                  │       data_end       │ ↓
                             4*N+2└───────────┘ ─

                        u.alm1.alm       0┌───────────┐
                                          │         axis         │
                                         2├───────────┤
                                          │        alm_no        │
                                         4└───────────┘

                u.alm2           0┌───────────┐ ─
                                  │       alm[0]         │ ↑
                                38├───────────┤ │
                                  〜                      〜 │
                          38*(N-1)├───────────┤length
                                  │       alm[N-1]       │ │
                              38*N├───────────┤ │
                                  │       data_end       │ ↓
                            38*N+2└───────────┘ ─

                        u.alm2.alm       0┌───────────┐
                                          │         axis         │
                                         2├───────────┤
                                          │        alm_no        │
                                         4├───────────┤
                                          │        msg_len       │
                                         6├─────┬─────┘
                                          │alm_msg[0]│
                                         7├─────┤
                                          〜          〜
                                        37├─────┤
                                          │alm_msg[31]
                                        38└─────┘

                N は読み出すアラーム情報の個数です。

        alarminfo
                アラーム情報を返すALMINFO構造体へのポインタです。
                ALMINFO構造体は次の通りです。

                typedef struct alminfo {
                     union {
                        struct {
                            struct {
                                short axis ;            ;/* 軸情報 */
                                short alm_no ;          ;/* アラーム番号 */
                            } alm[N] ;
                            short data_end ;            ;/* データエンド */
                        } alm1 ;
                        struct {
                            struct {
                                short axis ;            ;/* 軸情報 */
                                short alm_no ;          ;/* アラーム番号 */
                                short msg_len ;         ;/* メッセージ文字数 */
                                char alm_msg[32] ;    ;/* アラームメッセージ */

                            } alm[N] ;
                            short data_end ;            ;/* データエンド */
                        }alm2 ;
                    } u ;
                } ALMINFO ;     /*  N : 読み出すアラーム情報の個数 */

                axis            軸情報がセットされます。
                                0      : 軸形でない
                                1〜m   : 軸形(m : 最大制御軸数)

                alarm_no        アラーム番号(バイナリ)がセットされます。

                msg_len         メッセージ文字数(バイナリ)がセットされます。
                                ( 1 〜 32 )

                alm_msg         アラームメッセージ文字列(ASCII)がセットされます

                data_end        データエンドがセットされます。
                                常に0FFFFHがセットされます。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ALMINFO構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                出力フォーマットのタイプ(type)が不適切です。

                EW_ATTRIB       データ属性の誤り
                                アラーム種類(alm_type)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 6) モーダルデータのリード

関数名  cnc_modal

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_modal(unsigned short FlibHndl, short type,
                                                short block, ODBMDL *modal);

解説    CNC側のモーダル情報を読み出します。各種情報はODBMDL内の各メンバに格納
        されます。

        読みだすことのできるモーダルデータはモーダルGコードの値や M または F
        などの指令値です。

        モーダルデータの種別(type)により、データを格納する共用体のタイプが変化
        しますので、リード結果にアクセスする場合は種別に応じた共用体を使用して
        下さい。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        type    モーダルデータの種類を指定します。(詳しくは後述)
                        -3 : G コード以外の軸データ一括読み出し
                        -2 : G コード以外の一括読み出し
                        -1 : G コードの一括読み出し
                          0 〜  20 : G コードの個別読み出し
                        100 〜 126 : G コード以外の個別読み出し
                        200 〜 205 : G コード以外の軸データ個別読み出し

        block   読み出す対象となるブロックを指定します。
                        0 : 現在実行中のブロック
                        1 : 次のブロック
                        2 : 次の次のブロック

        modal   モーダルデータを返すODBMDL構造体へのポインタです。
                ODBMDL構造体は次の通りです。

                typedef struct odbmdl {
                     short datano;              /* データの種類 */
                     short type;                /* 指令されたブロック */
                     union {
                          char  g_data;         /* G コードのモーダルデータ */
                          char  g_rdata[21];    /* G コードのモーダルデータ */
                          struct {
                                long    aux_data;
                                        /* G コード以外のモーダルデータ */
                                char    flag1;  /* フラグ 1 */
                                char    flag2;  /* フラグ 2 */
                          }aux;
                          struct {
                                long    aux_data;
                                        /* G コード以外のモーダルデータ */

                                char    flag1;  /* フラグ 1 */
                                char    flag2;  /* フラグ 2 */
                          }raux1[27];
                          struct {
                                long    aux_data;
                                        /* G コード以外のモーダルデータ */
                                char    flag1;  /* フラグ 1 */
                                char    flag2;  /* フラグ 2 */
                          }raux2[MAX_AXIS];     /* MAX_AXIS : 最大制御軸数 */
                     }modal;
                } ODBMDL ;

                datano          モーダルデータの種類がセットされます。

                type            読み出す対象となるブロックがセットされます。

                g_data          G コードの個別読み出しの場合に使用します。
                                対応するGコードグループ内のモーダルGコードが読
                                みだされます。

                g_rdata         G コードの一括読み出しの場合に使用します。
                                すべてのGコードグループ内のモーダルGコードが読
                                みだされます。

                aux             G コード以外(軸データ含む)の個別読み出しの場合
                                に使用します。

                raux1           G コード以外の一括読み出しの場合に使用します。

                raux2           G コード以外の軸データ一括読み出しの場合に使用
                                します。

                aux_data        G コード以外のモーダルデータがセットされます。

                flag1           補助情報がセットされます。

                flag2           補助情報がセットされます。

        (1) モーダルGコードの読みだし

                type には 0〜20 までのGコードグループを指定します。

                -------+-------+---------------+
                type    g_data  Gコード
                -------+-------+---------------+
                0       0       G00
                        1       G01
                        2       G02
                        3       G03
                -------+-------+---------------+
                1       0       G17
                        4       G19
                        8       G18
                -------+-------+---------------+
                2       0       G90

                        1       G91
                -------+-------+---------------+
                4       0       G94
                        1       G95
                -------+-------+---------------+
                5       0       G20
                        1       G21
                -------+-------+---------------+
                7       0       G49
                        1       G43
                        2       G44
                -------+-------+---------------+
                11      0       G67
                        1       G66
                -------+-------+---------------+
                20      0       G13.1
                        1       G12.1
                -------+-------+---------------+

        g_data の第0〜6ビットには上の表の g_data 欄の数値がバイナリ形式で格納さ
        れます。g_data の第7ビットには block で指定した読みだし対象ブロック内で
        このGコードが指令されているかどうかが格納されます。

                     7   6   5   4   3   2   1   0
                  ┌─┬─┬─┬─┬─┬─┬─┬─┐
                ┌┼・│   各グループ内のコード   │ １バイト
                │└─┴─┴─┴─┴─┴─┴─┴─┘
                └─┬──→  0 : 現在のブロックで指令されていない
                    └──→  1 : 現在のブロックで指令されている

        例えば、次の加工プログラムの N100 のブロック実行中に本関数を実行した
        結果は以下のようになります。

                N090 G18 ;
                N100 G1 Z100. ;
                N110 G17 G2 X10. Y-20. R12. ;

                type    block   g_data          モーダル状態
                -------+-------+---------------+---------------------
                0       0       0x81            G1が指令されている
                0       1       0x82            G2が指令されている
                1       0       0x08            G18モード(指令なし)
                1       1       0x80            G17が指令されている

        Gコードに関するすべての type を一度に読み出すには、-1 を指定します。
        g_rdata に g_data の配列がセットされます。

        (2) Gコード以外のモーダルデータの読みだし

                type    指令アドレス
                -------+------------------------
                100     B
                101     D
                102     E
                103     F

                104     H
                105     L
                106     M
                107     S
                108     T
                109     R
                110     P
                111     Q
                112     A
                113     C
                114     I
                115     J
                116     K
                117     N
                118     O
                119     U
                120     V
                121     W
                122     X
                123     Y
                124     Z
                125     M2
                126     M3
                -------+------------------------
                200     第 1 軸
                201     第 2 軸
                202     第 3 軸
                203     第 4 軸
                204     第 5 軸
                205     第 6 軸
                -------+------------------------

        100番台の type を一度に読み出すには、-2 を指定します。
        raux1 の配列にデータがセットされます。
        200番台の type を一度に読み出すには、-3 を指定します。
        raux2 の配列にデータがセットされます。

              ┌───────────────┐
              │            データ            │ : 4 バイト
              ├───────────────┤
          ┌─│            FLAG1             │ : 1 バイト
          │  ├───────────────┤
        ┌┼─│            FLAG2             │ : 1 バイト
        ││  └───────────────┘
        ││     7   6   5   4   3   2   1   0
        ││  ┌─┬─┬─┬─┬─┬─┬─┬─┐
        │└→│  │  │  │−│   入力桁数   │
        │    └─┴─┴─┴─┴─┴─┴─┴─┘
        │      │  │  ├─→ 0 : 正
        │      │  │  └─→ 1 : 負
        │      │  ├───→ 0 : 小数点指令なし
        │      │  └───→ 1 :     〃    あり
        │      ├─────→ 0 : 現在のブロックに指令なし
        │      └─────→ 1 :         〃         あり
        │    ┌─┬─┬─┬─┬─┬─┬─┬─┐

        └─→│−│−│−│−│−│小数点以下桁数
              └─┴─┴─┴─┴─┴─┴─┴─┘
        ※  FLAG1の小数点指令あり／なし、およびFLAG2の小数点以下桁数はFコード
            のときのみ有効です。なお、小数点指令なしでも小数点以下桁数は『０』
            でない場合があります。
        ※  指令アドレスの M の入力桁数は、パラメータで設定した許容桁数が返さ
            れます。
                M パラメータNo.3030     M コードの許容桁数

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_NUMBER       データ番号の誤り
                                モーダルデータの種類(type)の指定が不適切です。

                EW_ATTRIB       データ属性の誤り
                                ブロックの指定(block)が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 7) ダイアグノーズデータのリード

関数名  cnc_diagnoss

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_diagnoss(unsigned short FlibHndl,
                        short number, short axis, short length, ODBDGN *diag);

解説    numberで指定された番号、axisで指定された軸（軸型のダイアグノーズデータ
        のみ）のダイアグノーズデータを読み出します。
        データ形式は各ダイアグノーズデータによりますが、バイト/ワード/２ワード
        形のダイアグノーズデータは一般に符号付のバイナリ形式です。

        axisに ALL_AXES を指定することにより全軸の読み取りを一度に行うことがで
        きます。その際、各軸のダイアグノーズデータは ODBDGN内の各配列に格納さ
        れます。

        ダイアグノーズデータには型と軸の属性により以下のような種類があり、ダイ
        アグノーズデータ番号ごとに異なります。

        ダイアグノーズデータの種類 目的                            バイトサイズ
        --------------------------+-------------------------------+------------
        ビット形データ             1ビットごとに意味を持つ         1
        ビット軸形データ           1ビットごとに意味を持つ(軸毎)   1
        バイト形データ             1バイト長のデータを記憶         1
        バイト軸形データ           1バイト長のデータを記憶(軸毎)   1
        ワード形データ             2バイト長のデータを記憶         2
        ワード軸形データ           2バイト長のデータを記憶(軸毎)   2
        ２ワード形データ           4バイト長のデータを記憶         4
        ２ワード軸形データ         4バイト長のデータを記憶(軸毎)   4

        ただし、ビット形ダイアグノーズデータを 1ビット単位で読みだすことはでき
        ません。同一のダイアグノーズデータ番号に属する8ビット(つまり1バイト)単
        位で一度に読みだすことになります。

        各ダイアグノーズデータの詳細については CNCの保守説明書を参照してくださ
        い。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        number  リードするダイアグノーズデータ番号を指定します。
                指定可能なダイアグノーズデータ番号は CNCの保守説明書を参照して
                ください。

        axis    リードする軸番号を指定します。
                    0      : 軸形でないダイアグノーズデータ
                    1〜m   : 軸形ダイアグノーズデータの１軸指定
                                                            (m : 最大制御軸数)
                  ALL_AXES : 軸形ダイアグノーズデータの全軸指定(ALL_AXES : -1)

        length  データブロック長（ODBDGN構造体のサイズ）を指定します。
                  ・4+(ダイアグノーズデータのバイトサイズ)*(読みだす軸数)


                下図はダイアグノーズデータのサイズが 4バイトの場合です。
                ダイアグノーズデータのサイズが 1,2バイトの場合は、1個(1軸)あた
                りのデータ部のサイズがそれぞれ 1,2バイトになります。

                           軸なし/一軸指定                    全軸指定
                ODBDGN  0┌───┐         ─          0┌───┐        ─
                         │datano│         ↑           │datano│        ↑
                        2├───┤         │          2├───┤        │
                         │type  │       length         │type  │      length
                        4├───┴───┐ │          4├───┴───┐│
                         │    ldata     │ ↓           │ldatas[0]  :1軸 │
                        8└───────┘ ─          8├───────┤│
                                                         〜              〜│
                                                4+2x(n-1)├───────┤│
                                                         │ldatas[n-1]:n軸 ↓
                                                    4+2xn└───────┘─

                n は、制御軸数となります。

        diag    ダイアグノーズデータを返すODBDGN構造体へのポインタです。
                ODBDGN構造体は次の通りです。
                typedef struct  iodbpsd {
                    short datano;              /* ダイアグノーズデータ番号 */
                    short type;                /* 軸番号 */
                    union {
                        char cdata;            /* ビット/バイト形データ */
                        short idata;           /* ワード形データ */
                        long ldata;            /* ２ワード形データ */
                        char cdatas[MAX_AXIS]; /* ビット/バイト軸形データ */
                        short idatas[MAX_AXIS];/* ワード軸形データ */
                        long ldatas[MAX_AXIS]; /* ２ワード軸形データ */
                    } u ;
                } ODBDGN ;              /* MAX_AXIS : 最大制御軸数 */

                datano  リードしたダイアグノーズデータ番号が格納されます。

                type    リードしたダイアグノーズデータの属性が格納されます。
                        軸番号
                            0      : 軸形でないダイアグノーズデータ
                            1〜m   : 軸形ダイアグノーズデータの１軸指定
                                     (m : 最大制御軸数)
                          ALL_AXES : 軸形ダイアグノーズデータの全軸指定
                                     (ALL_AXES : -1)

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ODBDGN構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り

                                ダイアグノーズデータ番号(number)の指定が不適切
                                です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 8) ダイアグノーズデータのリード（範囲指定）

関数名  cnc_diagnosr


宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_diagnosr(unsigned short FlibHndl,
                                  short *s_number, short axis, short *e_number,
                                                    short *length, void *diag);

解説    s_number,e_numberで指定された範囲の axisで指定された軸（軸型のダイアグ
        ノーズデータのみ）のダイアグノーズデータを読み出します。
        データ形式は各ダイアグノーズデータによりますが、バイト/ワード/２ワード
        形のダイアグノーズデータは一般に符号付のバイナリ形式です。

        axisに ALL_AXES を指定することにより、指定された範囲の軸形ダイアグノー
        ズデータは全軸の読み取りが行われます。

        ダイアグノーズデータには型と軸の属性により以下のような種類があり、ダイ
        アグノーズデータ番号ごとに異なります。

        ダイアグノーズデータの種類 目的                            バイトサイズ
        --------------------------+-------------------------------+------------
        ビット形データ             1ビットごとに意味を持つ         1
        ビット軸形データ           1ビットごとに意味を持つ(軸毎)   1
        バイト形データ             1バイト長のデータを記憶         1
        バイト軸形データ           1バイト長のデータを記憶(軸毎)   1
        ワード形データ             2バイト長のデータを記憶         2
        ワード軸形データ           2バイト長のデータを記憶(軸毎)   2
        ２ワード形データ           4バイト長のデータを記憶         4
        ２ワード軸形データ         4バイト長のデータを記憶(軸毎)   4

        ただし、ビット形ダイアグノーズデータを 1ビット単位で読みだすことはでき
        ません。同一のダイアグノーズデータ番号に属する8ビット(つまり1バイト)単
        位で一度に読みだすことになります。

        各ダイアグノーズデータの詳細については CNCの保守説明書を参照してくださ
        い。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        s_number
                リードを開始するダイアグノーズデータ番号を指定します。
                関数からは、実際にリードされた最初のダイアグノーズデータ番号が
                返ります。

                指定可能なダイアグノーズデータ番号は CNCの保守説明書を参照して
                ください。

        e_number
                リードを終了するダイアグノーズデータ番号を指定します。

                関数からは、実際にリードされた最後のダイアグノーズデータ番号が
                返ります。

                なお、CNC 側ソフトの機能追加などに伴い、ダイアグノーズデータも
                追加されることがあります。読み出す範囲内にダイアグノーズデータ
                が追加された場合、エラーになったり(戻り値:EW_LENGTH)、アプリケ
                ーションプログラムの処理が正しく実行できなくなる可能性がありま
                す。このようなことを避けるために、ダイアグノーズデータ番号が連
                続している部分のみをまとめて読み出し範囲に指定するようにしてく
                ださい。

        axis    リードする軸番号を指定します。
                    0      : 軸形でないダイアグノーズデータ
                    1〜m   : 軸形ダイアグノーズデータの１軸指定
                                                            (m : 最大制御軸数)
                  ALL_AXES : 軸形ダイアグノーズデータの全軸指定(ALL_AXES : -1)

                なお、axisに何を指定しても軸形でないダイアグノーズデータは読み
                出されますが、指定範囲内に軸形のダイアグノーズデータが存在する
                時、axis=0を指定するとエラーとなります(戻り値:EW_ATTRIB)。

        length  指定した範囲のダイアグノーズデータを格納するのに必要なデータブ
                ロック長を指定します。
                ダイアグノーズデータ１個あたりは下図のようになり、それがダイア
                グノーズデータ番号順(昇順)に指定された個数分並びますので、指定
                するlengthはそれらの合計になります。
                  ・[4+(各ダイアグノーズデータのバイトサイズ)*(読みだす軸数)]
                    の合計

                関数からは、実際にリードしたサイズが返りますので長めに指定する
                ことができます。

                下図はダイアグノーズデータのサイズが 1バイトの場合です。
                ダイアグノーズデータのサイズが 1バイトで 1個あたりのlengthが奇
                数バイトになる場合は、最後にダミー領域が必要です。
                ダイアグノーズデータのサイズが 2,4バイトの場合は、1個(1軸)あた
                りのサイズがそれぞれ 2,4バイトになりますのでダミー領域は不要で
                す。

                           軸なし/一軸指定                    全軸指定
                ODBDGN   0┌───┐  ─                0┌───┐        ─
                          │datano│  ↑                 │datano│        ↑
                         2├───┤  │                2├───┤        │
                          │type  │length/個            │type  │   length/個
                         4├─┬─┘  │                4├─┬─┘        │
                          │cdata     │                 │cdatas[0]  :1軸 │
                         5├─┤      │                5├─┤            │
                          │dummy     ↓                 〜  〜            │
                         6└─┘      ─        4+1x(n-1)├─┤            │
                                                         │cdatas[n-1]:n軸 │
                                                    4+1xn├─┤            │
                                                         │dummy(nが奇数   ↓
                                                         └─┘  の場合)   ─

                n は、最大制御軸数です。


        diag    ダイアグノーズデータを返す領域へのポインタです。
                個々のダイアグノーズデータの参照は、ODBDGN構造体を使用します。
                typedef struct  iodbpsd {
                    short datano;              /* ダイアグノーズデータ番号 */
                    short type;                /* 上位バイト:型属性 */
                                               /* 下位バイト:軸番号 */
                    union {
                        char cdata;            /* ビット/バイト形データ */
                        short idata;           /* ワード形データ */
                        long ldata;            /* ２ワード形データ */
                        char cdatas[MAX_AXIS]; /* ビット/バイト軸形データ */
                        short idatas[MAX_AXIS];/* ワード軸形データ */
                        long ldatas[MAX_AXIS]; /* ２ワード軸形データ */
                    } u ;
                } ODBDGN ;              /* MAX_AXIS : 最大制御軸数 */

                datano  リードしたダイアグノーズデータ番号が格納されます。

                type    リードしたダイアグノーズデータの属性が格納されます。
                        上位バイト：型属性
                            0 : ビット型
                            1 : バイト型
                            2 : ワード型
                            3 : ２ワード型

                        下位バイト：軸番号
                            0      : 軸形でないダイアグノーズデータ
                            1〜m   : 軸形ダイアグノーズデータの１軸指定
                                     (m : 最大制御軸数)
                          ALL_AXES : 軸形ダイアグノーズデータの全軸指定
                                     (ALL_AXES : -1)

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                ダイアグノーズデータ格納領域のサイズ(length)が
                                不正です。

                EW_NUMBER       データ番号の誤り
                                ダイアグノーズデータ番号(s_number,e_number)の
                                指定が不適切です。

                EW_ATTRIB       データ属性の誤り
                                軸番号(axis)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 9) 最大有効桁数、小数点以下桁数のリード

関数名  cnc_getfigure

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_getfigure(unsigned short FlibHndl,
                        short data_type, short *valid_fig, short *dec_fig_in,
                                                        short *dec_fig_out);

解説    CNC の各種データの最大有効桁数、入力単位、出力単位での小数点以下桁数を
        読み出します。

        ウィンドウライブラリで読み取れる値は、CNC側の設定単位でのバイナリデータ
        です。そのため、設定単位を考慮して小数点位置等の表示を行う必要がありま
        す。

        以下の関数を使用する際に、有効です。

        ・軸型データ            ・工具オフセット        ・カスタムマクロ
                cnc_absolute            cnc_rdtofs              cnc_rdmacro
                cnc_machine             cnc_rdtofsr             cnc_rdmacror
                cnc_relative                                    cnc_rdpmacro
                cnc_distance                                    cnc_rdpmacror
                cnc_skip
                cnc_srvdelay
                cnc_accdecdly
                cnc_rddynamic

        関数から返る値は以下の通りです。

        ・最大有効桁数
                                        Power Mate
                -----------------------+---------------+
                軸型データ              8
                工具オフセット          7
                カスタムマクロ          8
                                                                （単位［桁］）

        ・入力単位／出力単位の小数点以下桁数
          1) 軸型データ
                入出力単位の小数点以下桁数共に１軸目から現在の制御軸数分のデー
                タが有効となります。

                                直線軸          回転軸
                ---------------+---------------+------------------------
                                [mm]    [inch]  [deg]
                ---------------+-------+-------+------------------------
                IS-A            2       3       2
                IS-B            3       4       3
                IS-C            4       5       4
                IS-A は、Power Mate-H の場合に有効です。
                IS-C は、Power Mate-D の場合に有効です。

                * "IS-A"〜"IS-C"は、CNCパラメータの説明書を参照してください。

                * 直線軸のメトリック／インチは、以下のCNCパラメータに従います
                        入力単位のとき → 入力設定単位（0000#2）
                        出力単位のとき → 機械の直線軸の検出単位（1001#0）

          2) 工具オフセット
                入力単位の小数点以下桁数は１軸目のデータのみが有効となります。
                出力単位の小数点以下桁数は無効となります。

                                [mm]    [inch]
                ---------------+-------+--------
                IS-A            2       3
                IS-B            3       4
                IS-C            4       5
                IS-A は、Power Mate-H の場合に有効です。
                IS-C は、Power Mate-D の場合に有効です。

                * "IS-A"〜"IS-C"は、CNCパラメータの説明書を参照してください。

          3) カスタムマクロ
                入力単位の小数点以下桁数は１軸目のデータのみが有効となります。
                出力単位の小数点以下桁数は無効となります。

                                [mm]    [inch]
                ---------------+-------+--------
                IS-A            3       4
                IS-B            3       4
                IS-C            4       5
                IS-A は、Power Mate-H の場合に有効です。
                IS-C は、Power Mate-D の場合に有効です。

                * "IS-A"〜"IS-C"は、CNCパラメータの説明書を参照してください。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        data_type
                データの種類を指定します。
                        0 : 軸型データ
                        1 : 工具オフセット
                        2 : カスタムマクロ

        valid_fig
                最大有効桁数を格納する変数のアドレスを指定します。

        dec_fig_in
                入力単位での小数点以下桁数を格納する配列の先頭アドレスを指定し
                ます。この配列は最大制御軸数分必要です。
                （軸型データ以外の場合、配列の先頭だけが有効です）

        dec_fig_out
                出力単位での小数点以下桁数を格納する配列の先頭アドレスを指定し
                ます。この配列は最大制御軸数分必要です。
                （軸型データ以外の場合、配列の先頭だけが有効です）


戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照して下さい）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_ATTRIB       データ属性の誤り
                                データの種類(data_type)の指定が不適切です。


CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は CNCのパラメータ説明書を参照してください。

                        0000#2, 1001#0                  -+- 設定の影響を受けます
                        1004#0(Power Mate-H の場合)     -+
                        1004#1(Power Mate-D の場合)     -+

CNCモード       すべてのモードで使用できます。

  (10) サーボ調整用実電流のリード

関数名  cnc_rdcurrent

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdcurrent(unsigned short FlibHndl,
                                                                short *crrnt);

解説    『サーボ調整実電流』の値を読み出します。

        次に示すパラメータの値が０の場合、実電流としては０が取得されます。
                Power Mate              2086

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        crrnt   サーボ調整用実電流を格納する配列の先頭アドレスを指定します。こ
                の配列は最大制御軸数分必要です。実際に有効となるのは現在の制御
                軸数までです。
                long    crrnt[MAX_AXIS] ; /* MAX_AXIS : 最大制御軸数 */

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照して下さい）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能には以下のパラメータが関係します。
                詳細は 解説並びにCNCのパラメータ説明書を参照してください。
                        2086              --- 設定の影響を受けます

CNCモード       すべてのモードで使用できます。

  (11) サーボ調整用実速度のリード

関数名  cnc_rdsrvspeed

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdsrvspeed(unsigned short FlibHndl,
                                                                long *speed);

解説    『サーボ調整実速度』の値を読み出します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        speed   サーボ調整用実速度を格納する配列の先頭アドレスを指定します。こ
                の配列は最大制御軸数分必要です。実際に有効となるのは現在の制御
                軸数までです。
                long    speed[MAX_AXIS] ; /* MAX_AXIS : 最大制御軸数 */

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照して下さい）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (12) サーボ調整用ループゲインのリード

関数名  cnc_rdloopgain

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdloopgain(unsigned short FlibHndl,
                                                                long *gain);

解説    『サーボ調整ループゲイン』の値を読み出します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        gain    サーボ調整用ループゲインを格納する配列の先頭アドレスを指定しま
                す。この配列は最大制御軸数分必要です。実際に有効となるのは現在
                の制御軸数までです。
                long    gain[MAX_AXIS] ;  /* MAX_AXIS : 最大制御軸数 */

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照して下さい）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (13) オペレータメッセージのリード

関数名  cnc_rdopmsg

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdopmsg(unsigned short FlibHndl, short type,
                                                short length, OPMSG *opmsg);

解説    CNCのオペレータメッセージの内容を読みだします。オペレータメッセージは
        OPMSG内のdataに格納されます。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        type    オペレータメッセージの種類を指定します。
                           0 : 第１メッセージ

        length  データブロック長（OPMSG構造体のサイズ）を指定します。

                         0┌───────────┐ ──
                          │        datano        │  ↑
                         2├───────────┤  │
                          │         type         │  │
                         4├───────────┤  │
                          │       char_num       │  │
                         6├─────┬─────┘length
                          │ data[0]  │              │
                         7├─────┤              │
                          〜          〜              │
                     6+255├─────┤              │
                          │ data[255]│              ↓
                     6+256└─────┘             ──

        opmsg   オペレータメッセージを返すOPMSG構造体へのポインタです。
                OPMSG構造体は次の通りです。
                typedef struct msg {
                     short  datano ;         /* オペレータメッセージ番号 */
                     short  type ;           /* オペレータメッセージの種類 */
                     short  char_num ;       /* メッセージ文字数 */
                     char  data[MSG_SIZE] ;  /* オペレータメッセージ文字列 */

                } OPMSG ;                    /* MSG_SIZE : メッセージ文字数 */

                datano          オペレータメッセージ番号がセットされます。
                                メッセージあり
                                         100 〜  999
                                        2000 〜 2099
                                メッセージなし
                                        -1

                type            オペレータメッセージの種類がセットされます。
                                             0 : 第１メッセージ


                char_num        オペレータメッセージ文字数がセットされます。
                                        1 〜 256 : オペレータメッセージ

                data            オペレータメッセージ文字列がセットされます。
                                ASCII 文字列がセットされます。
                                終端に'\0'がセットされます。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_LENGTH       データブロック長の誤り
                                OPMSG構造体のサイズ(length)が不正です。

                EW_ATTRIB       データ属性の誤り
                                オペレータメッセージの種類(type)の指定が
                                不適切です。

                EW_NOOPT        オプションなし
                                必要なNCオプションを設定して下さい。

CNCオプション   本機能には以下のオプションが必要となります。
                        外部メッセージ
                        外部データ入力

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。


プログラム例
        以下のプログラムはオペレータメッセージを読みだし、その内容を画面に
        表示します。

#include <stdio.h>
#include "apilib.h"

void example( void )
{
        OPMSG buf ;
        cnc_rdopmsg( FlibHndl, 0, 6+256, &buf ) ;
        if ( buf.datano != -1 )
                printf( "#04d %s\n", buf.datano. buf.data ) ;
        else
                printf( "No operator message.\n" ) ;
}

  (14) ソフトオペパネの出力信号イメージのリード

関数名  cnc_rdopnlsgnl

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdopnlsgnl(unsigned short FlibHndl,
                                        short slct_data, IODBSGNL *sgnl);

解説    ソフトオペパネの出力信号イメージのリードを行います。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        slct_data
                データ選択フラグを指定します。
                        bit  0 : モード信号
                        bit  1 : （未使用）
                        bit  2 : （未使用）
                        bit  3 : 早送りオーバライド信号
                        bit  4 : 手動送り速度オーバライド信号
                        bit  5 : 送り速度オーバライド信号
                        bit  6 : （未使用）
                        bit  7 : オプショナルブロックスキップ信号
                        bit  8 : シングルブロック信号
                        bit  9 : マシンロック信号
                        bit 10 : ドライラン信号
                        bit 11 : メモリ保護信号
                        bit 12 : 自動運転休止信号
                        bit 13 : （未使用）
                        bit 14 : （未使用）
                        bit 15 : （未使用）
                        ※  各信号に対応するビットを０にするとその信号はリード
                            されません。その信号をリードする時は、対応するビッ
                            トを１にしてください。

        sgnl    ソフトオペパネの出力信号イメージを返すIODBSGNL構造体への
                ポインタです。
                IODBSGNL構造体は次の通りです。

                typedef struct iodbsgnl {
                     short     datano;        /* (未使用) */
                     short     type;          /* データ選択フラグ */
                     short     mode;          /* モード信号 */
                     short     hndl_ax;       /* （未使用） */
                     short     hndl_mv;       /* （未使用） */
                     short     rpd_ovrd;      /* 早送りオーバライド信号 */
                     short     jog_ovrd;      /* 手動送り速度オーバライド信号 */
                     short     feed_ovrd;     /* 送り速度オーバライド信号 */
                     short     spdl_ovrd;     /* (未使用) */
                     short     blck_del;      /* オプショナルブロック
                                                        スキップ信号 (0/1) */
                     short     sngl_blck;     /* シングルブロック信号 (0/1) */

                     short     machn_lock;    /* マシンロック信号 (0/1) */
                     short     dry_run;       /* ドライラン信号 (0/1) */
                     short     mem_prtct;     /* メモリ保護信号 (0/1) */
                     short     feed_hold;     /* 自動運転休止信号 (0/1) */
                } IODBSGNL ;

                datano          未使用

                type            データ選択フラグがセットされます。

                mode            モード信号がセットされます。
                                0 : MDI
                                1 : MEM
                                2 : EDIT
                                3 : HNDL or INC
                                4 : JOG
                                5 : REF

                hndl_ax         （未使用）

                hndl_mv         （未使用）

                rpd_ovrd        早送りオーバライド信号がセットされます。
                                0 : 100%
                                1 : 50%
                                2 : 25%
                                3 : F0
                jog_ovrd        手動送り速度オーバライド信号がセットされます。
                                0 : 0   %       10 :  2.0%      20 :  52.0%
                                1 : 0.1 %       11 :  2.7%      21 :  72.0%
                                2 : 0.14%       12 :  3.7%      22 : 100  %
                                3 : 0.2 %       13 :  5.2%      23 : 140  %
                                4 : 0.27%       14 :  7.2%      24 : 200  %
                                5 : 0.37%       15 : 10.0%
                                6 : 0.52%       16 : 14.0%
                                7 : 0.72%       17 : 20.0%
                                8 : 1.0 %       18 : 27.0%
                                9 : 1.4 %       19 : 37.0%

                feed_ovrd       送り速度オーバライド信号がセットされます。
                                0 :  0%         10 : 100%       20 : 200%
                                1 : 10%         11 : 110%
                                2 : 20%         12 : 120%
                                3 : 30%         13 : 130%
                                4 : 40%         14 : 140%
                                5 : 50%         15 : 150%
                                6 : 60%         16 : 160%
                                7 : 70%         17 : 170%
                                8 : 80%         18 : 180%
                                9 : 90%         19 : 190%

                spdl_ovrd       未使用

                blck_del        オプショナルブロックスキップ信号 (0/1) が
                                セットされます。


                sngl_blck       シングルブロック信号 (0/1) がセットされます。

                machn_lock      マシンロック信号 (0/1) がセットされます。

                dry_run         ドライラン信号 (0/1) がセットされます。

                mem_prtct       メモリ保護信号 (0/1) がセットされます。

                feed_hold       自動運転休止信号 (0/1) がセットされます。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (15) ソフトオペパネの出力信号のライト

関数名  cnc_wropnlsgnl

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wropnlsgnl(unsigned short FlibHndl,
                                                        IODBSGNL *sgnl);

解説    ソフトオペパネの信号の書き込みを行います。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        sgnl    オペレータメッセージを返すIODBSGNL構造体へのポインタです。
                IODBSGNL構造体は次の通りです。

                typedef struct iodbsgnl {
                     short     datano;        /* (未使用) */
                     short     type;          /* データ選択フラグ */
                     short     mode;          /* モード信号 */
                     short     hndl_ax;       /* （未使用）*/
                     short     hndl_mv;       /* （未使用）*/
                     short     rpd_ovrd;      /* 早送りオーバライド信号 */
                     short     jog_ovrd;      /* 手動送り速度オーバライド信号 */
                     short     feed_ovrd;     /* 送り速度オーバライド信号 */
                     short     spdl_ovrd;     /* (未使用) */
                     short     blck_del;      /* オプショナルブロック
                                                        スキップ信号 (0/1) */
                     short     sngl_blck;     /* シングルブロック信号 (0/1) */
                     short     machn_lock;    /* マシンロック信号 (0/1) */
                     short     dry_run;       /* ドライラン信号 (0/1) */
                     short     mem_prtct;     /* メモリ保護信号 (0/1) */
                     short     feed_hold;     /* 自動運転休止信号 (0/1) */
                } IODBSGNL ;

                datano          未使用

                type            データ選択フラグを設定します。
                        bit  0 : モード信号
                        bit  1 : （未使用）
                        bit  2 : （未使用）
                        bit  3 : 早送りオーバライド信号
                        bit  4 : 手動送り速度オーバライド信号
                        bit  5 : 送り速度オーバライド信号
                        bit  6 : （未使用）
                        bit  7 : オプショナルブロックスキップ信号
                        bit  8 : シングルブロック信号
                        bit  9 : マシンロック信号
                        bit 10 : ドライラン信号
                        bit 11 : メモリ保護信号
                        bit 12 : 自動運転休止信号
                        bit 13 : （未使用）
                        bit 14 : （未使用）

                        bit 15 : （未使用）
                        ※  各信号に対応するビットを０にするとその信号はライト
                            されません。その信号をライトする時は、対応するビッ
                            トを１にしてください。

                mode            モード信号を指定します。
                                0 : MDI
                                1 : MEM
                                2 : EDIT
                                3 : HNDL or INC
                                4 : JOG
                                5 : REF

                hndl_ax         （未使用）

                hndl_mv         （未使用）

                rpd_ovrd        早送りオーバライド信号を指定します。
                                0 : 100%
                                1 : 50%
                                2 : 25%
                                3 : F0

                jog_ovrd        手動送り速度オーバライド指定をセットします。
                                0 : 0   %       10 :  2.0%      20 :  52.0%
                                1 : 0.1 %       11 :  2.7%      21 :  72.0%
                                2 : 0.14%       12 :  3.7%      22 : 100  %
                                3 : 0.2 %       13 :  5.2%      23 : 140  %
                                4 : 0.27%       14 :  7.2%      24 : 200  %
                                5 : 0.37%       15 : 10.0%
                                6 : 0.52%       16 : 14.0%
                                7 : 0.72%       17 : 20.0%
                                8 : 1.0 %       18 : 27.0%
                                9 : 1.4 %       19 : 37.0%

                feed_ovrd       送り速度オーバライド信号を指定します。
                                0 :  0%         10 : 100%       20 : 200%
                                1 : 10%         11 : 110%
                                2 : 20%         12 : 120%
                                3 : 30%         13 : 130%
                                4 : 40%         14 : 140%
                                5 : 50%         15 : 150%
                                6 : 60%         16 : 160%
                                7 : 70%         17 : 170%
                                8 : 80%         18 : 180%
                                9 : 90%         19 : 190%

                spdl_ovrd       未使用

                blck_del        オプショナルブロックスキップ信号 (0/1) を
                                指定します。

                sngl_blck       シングルブロック信号 (0/1) を指定します。

                machn_lock      マシンロック信号 (0/1) を指定します。


                dry_run         ドライラン信号 (0/1) を指定します。

                mem_prtct       メモリ保護信号 (0/1) を指定します。

                feed_hold       自動運転休止信号 (0/1) を指定します。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_DATA         データの誤り
                                IODBSGNL構造体のメンバの値に不適なものがありま
                                す。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (16) ソフトオペパネの汎用出力信号イメージのリード

関数名  cnc_rdopnlgnrl

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdopnlgnrl(unsigned short FlibHndl,
                                        short slct_data, IODBGNRL *opnlgnrl);

解説    ソフトオペパネの汎用出力信号イメージのリードを行います。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        slct_data
                データ選択フラグを指定します。
                        bit 0 : 汎用出力信号 1
                        bit 1 : 汎用出力信号 2
                        bit 2 : 汎用出力信号 3
                        bit 3 : 汎用出力信号 4
                        bit 4 : 汎用出力信号 5
                        bit 5 : 汎用出力信号 6
                        bit 6 : 汎用出力信号 7
                        bit 7 : 汎用出力信号 8
                        ※  bit 8〜bit 15は未使用
                        ※  各信号に対応するビットを 0 にするとその信号はリード
                            されません。その信号をリードする時は、対応するビッ
                            トを 1 にしてください。

        opnlgnrl
                ソフトオペパネの汎用信号を返すIODBGNRL構造体へのポインタです。
                IODBGNRL構造体は次の通りです。
                typedef struct iodbgnrl {
                     short     datano;        /* 未使用 */
                     short     type;          /* データ選択フラグ */
                     char      sgnal;         /* 汎用信号１〜８ */
                } IODBGNRL ;

                datano          未使用

                type            データ選択フラグがセットされます。

                sgnal           汎用信号がセットされます。
                                        bit 0 : 汎用出力信号 1
                                        bit 1 : 汎用出力信号 2
                                        bit 2 : 汎用出力信号 3
                                        bit 3 : 汎用出力信号 4
                                        bit 4 : 汎用出力信号 5
                                        bit 5 : 汎用出力信号 6
                                        bit 6 : 汎用出力信号 7
                                        bit 7 : 汎用出力信号 8

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。

        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (17) ソフトオペパネの汎用出力信号のライト

関数名  cnc_wropnlgnrl

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wropnlgnrl(unsigned short FlibHndl,
                                                        IODBGNRL *opnlgnrl);

解説    ソフトオペパネの汎用信号の書き込みを行います。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリハンドルを指定します。

        opnlgnrl
                ソフトオペパネの汎用信号を設定するIODBGNRL構造体へのポインタで
                す。IODBGNRL構造体は次の通りです。
                typedef struct iodbgnrl {
                     short     datano;        /* 未使用 */
                     short     type;          /* データ選択フラグ */
                     char      sgnal;         /* 汎用信号１〜８ */
                } IODBGNRL ;

                datano          未使用

                type            データ選択フラグを設定します。
                                        bit 0 : 汎用出力信号 1
                                        bit 1 : 汎用出力信号 2
                                        bit 2 : 汎用出力信号 3
                                        bit 3 : 汎用出力信号 4
                                        bit 4 : 汎用出力信号 5
                                        bit 5 : 汎用出力信号 6
                                        bit 6 : 汎用出力信号 7
                                        bit 7 : 汎用出力信号 8
                        ※  bit 8 〜bit 15は未使用
                        ※  各信号に対応するビットを 0 にするとその信号はライト
                            されません。その信号をライトする時は、対応するビッ
                            トを 1 にしてください。

                sgnal           汎用信号を設定します。
                                        bit 0 : 汎用出力信号 1
                                        bit 1 : 汎用出力信号 2
                                        bit 2 : 汎用出力信号 3
                                        bit 3 : 汎用出力信号 4
                                        bit 4 : 汎用出力信号 5
                                        bit 5 : 汎用出力信号 6
                                        bit 6 : 汎用出力信号 7
                                        bit 7 : 汎用出力信号 8

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。


CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (18) ソフトオペパネの汎用信号名称のリード

関数名  cnc_rdopnlgsname

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_rdopnlgsname(unsigned short FlibHndl,
                                        short slct_data, IODBRDNA *brdna);

解説    ソフトオペパネの汎用信号名称のリードを行います。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        slct_data
                データ選択フラグを指定します。
                        bit 0 : 汎用出力信号 1
                        bit 1 : 汎用出力信号 2
                        bit 2 : 汎用出力信号 3
                        bit 3 : 汎用出力信号 4
                        bit 4 : 汎用出力信号 5
                        bit 5 : 汎用出力信号 6
                        bit 6 : 汎用出力信号 7
                        bit 7 : 汎用出力信号 8
                        ※  bit 8〜bit 15は未使用
                        ※  各信号に対応するビットを 0 にするとその信号はリード
                            されません。その信号をリードする時は、対応するビッ
                            トを 1 にしてください。

        brdna   ソフトオペパネの汎用信号を返すIODBRDNA構造体へのポインタです。
                IODBRDNA構造体は次の通りです。
                typedef struct iodbrdna {
                     short    datano;         /* 未使用 */
                     short    type;           /* データ選択フラグ */
                     char     sgnl1_name[9];  /* 汎用信号 1 名称 (ASCII) */
                     char     sgnl2_name[9];  /* 汎用信号 2 名称 (ASCII) */
                     char     sgnl3_name[9];  /* 汎用信号 3 名称 (ASCII) */
                     char     sgnl4_name[9];  /* 汎用信号 4 名称 (ASCII) */
                     char     sgnl5_name[9];  /* 汎用信号 5 名称 (ASCII) */
                     char     sgnl6_name[9];  /* 汎用信号 6 名称 (ASCII) */
                     char     sgnl7_name[9];  /* 汎用信号 7 名称 (ASCII) */
                     char     sgnl8_name[9];  /* 汎用信号 8 名称 (ASCII) */
                } IODBRDNA ;

                datano          未使用

                type            処理が行われたデータ選択フラグが設定されます。

                sgnl1_name      汎用信号 1 名称（ASCII） ┐
                sgnl2_name      汎用信号 2 名称（ASCII） │
                sgnl3_name      汎用信号 3 名称（ASCII） │
                sgnl4_name      汎用信号 4 名称（ASCII） │指定した名称が
                sgnl5_name      汎用信号 5 名称（ASCII） │     設定されます。

                sgnl6_name      汎用信号 6 名称（ASCII） │
                sgnl7_name      汎用信号 7 名称（ASCII） │
                sgnl8_name      汎用信号 8 名称（ASCII） ┘

                                名称の最後(sgnl?_name[8])には、NULL文字('\0')が
                                セットされます。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  (19) ソフトオペパネの汎用信号名称の設定

関数名  cnc_wropnlgsname

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI cnc_wropnlgsname(unsigned short FlibHndl,
                                                        IODBRDNA *brdna);

解説    ソフトオペパネの汎用信号名称の書き込みを行います。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        brdna   ソフトオペパネの汎用信号を返すIODBRDNA構造体へのポインタです。
                IODBRDNA構造体は次の通りです。
                typedef struct iodbrdna {
                     short    datano;         /* 未使用 */
                     short    type;           /* データ選択フラグ */
                     char     sgnl1_name[9];  /* 汎用信号 1 名称 (ASCII) */
                     char     sgnl2_name[9];  /* 汎用信号 2 名称 (ASCII) */
                     char     sgnl3_name[9];  /* 汎用信号 3 名称 (ASCII) */
                     char     sgnl4_name[9];  /* 汎用信号 4 名称 (ASCII) */
                     char     sgnl5_name[9];  /* 汎用信号 5 名称 (ASCII) */
                     char     sgnl6_name[9];  /* 汎用信号 6 名称 (ASCII) */
                     char     sgnl7_name[9];  /* 汎用信号 7 名称 (ASCII) */
                     char     sgnl8_name[9];  /* 汎用信号 8 名称 (ASCII) */
                } IODBRDNA ;

                datano          未使用

                type            データ選択フラグを指定します。
                        bit 0 : 汎用出力信号 1
                        bit 1 : 汎用出力信号 2
                        bit 2 : 汎用出力信号 3
                        bit 3 : 汎用出力信号 4
                        bit 4 : 汎用出力信号 5
                        bit 5 : 汎用出力信号 6
                        bit 6 : 汎用出力信号 7
                        bit 7 : 汎用出力信号 8
                        ※  bit 8〜bit 15は未使用
                        ※  各信号に対応するビットを 0 にするとその信号はライト
                            されません。その信号をライトする時は、対応するビッ
                            トを 1 にしてください。

                sgnl1_name      汎用信号 1 名称（ASCII） ┐
                sgnl2_name      汎用信号 2 名称（ASCII） │
                sgnl3_name      汎用信号 3 名称（ASCII） │
                sgnl4_name      汎用信号 4 名称（ASCII） │名称を設定します。
                sgnl5_name      汎用信号 5 名称（ASCII） │
                sgnl6_name      汎用信号 6 名称（ASCII） │
                sgnl7_name      汎用信号 7 名称（ASCII） │
                sgnl8_name      汎用信号 8 名称（ASCII） ┘


                                各名称の先頭から８文字
                                        (sgnl?_name[0] - sgnl?_name[7])
                                が、CNCに設定されます。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます

ＰＭＣ関係
-------------------------------------------------------------------------------
  関数名                機　能　内　容
-------------------------------------------------------------------------------
  ( 1) pmc_rdpmcrng     PMCの任意データのリード(範囲指定)
  ( 2) pmc_wrpmcrng     PMCの任意データのライト(範囲指定)
  ( 3) pmc_rdpmcinfo    ＰＭＣデータ情報のリード
-------------------------------------------------------------------------------

  ( 1) PMCの任意データのリード(範囲指定)

関数名  pmc_rdpmcrng

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI pmc_rdpmcrng(unsigned short FlibHndl,
                        short adr_type, short data_type, short s_number,
                                short e_number, short length, IODBPMC *buf);

解説    指定されたPMCアドレス/範囲のPMCデータを読み取ります。

        MMCのアプリケーションとPMCのラダーソフトとの間のデータのやり取りに使用
        します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        adr_type
                リードするPMCアドレスの種類に対応した識別コードを指定します。

識別コード PMCアドレスの種類     参照可能領域
----------+---------------------+---------------------+
0          G (PMC→CNCへの信号)  0000-0255, 1000-1255
1          F (CNC→PMCへの信号)  0000-0255, 1000-1255
2          Y (PMC→機械への信号) 0000-0127, 1000-1063
3          X (機械→PMCへの信号) 0000-0127, 1000-1063
4          A (メッセージ要求)    0000-0024
5          R (内部リレー)        0000-0999, 9000-9117
6          T (可変タイマ)        0000-0079
7          K (キープリレー)      0000-0019
8          C (カウンタ)          0000-0079
9          D (データテーブル)    0000-1859

(*) アドレス F,X の全領域、および R9000番台に対しての書き込みはできません。
    また、K0017〜K0019の書き込みも行わないで下さい。
(*) 各PMCが対応可能なCNCは、PMCのプログラミング説明書を参照ください。

        data_type
                PMCデータの型を指定します。
                PMC側のデータの型と同じものを指定してください。
                  0：バイト型
                  1：ワード型
                  2：ロング型

        s_number
                リードを開始するPMCアドレス番号を指定します。

        e_number
                リードを終了するPMCアドレス番号を指定します。

        length  データブロック長を指定します。
                data_typeが 0(バイト型)の場合：length = 8 + N

                data_typeが 1(ワード型)の場合：length = 8 + N * 2
                data_typeが 2(ロング型)の場合：length = 8 + N * 4
                ※ Nは読み取るデータの個数

        buf     データを返すIODBPMC構造体へのポインタです。
                IODBPMC構造体は次の通りです。
                typedef struct  iodbpmc {
                        short   type_a ;        /* PMCアドレスの種類 */
                        short   type_d ;        /* PMCデータの型 */
                        short   datano_s ;      /* 入力開始PMCアドレス */
                        short   datano_e ;      /* 入力終了PMCアドレス */
                        union {
                                char    cdata[N] ;/* PMCデータ(バイト型) */
                                short   idata[N] ;/*          (ワード型) */
                                long    ldata[N] ;/*        　(ロング型) */
                        } u ;                   /* N は読み取るデータの個数 */
                } IODBPMC ;
        引数の指定例
        ~~~~~~~~~~~~
                (1) D0100 (ワード型とします) を読み取る。
                        adr_type        9
                        data_type       1
                        s_number        100
                        e_number        101
                        length          8+2*1 (=10)
                        buf.u.idata[0]  D0100の内容が格納される

                (2) R0200〜R0209 (バイト型とします) を読み取る。
                        adr_type        5
                        data_type       0
                        s_number        200
                        e_number        209
                        length          8+1*10 (=18)
                        buf.u.cdata[0]  R0200〜R0209の内容が格納される
                        〜buf.u.cdata[9]

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_NOPMC        PMCが存在しません。

                EW_LENGTH       データブロック長の誤り
                                IODBPMC構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                PMCアドレス番号(s_number, e_number)の指定が不
                                適切です。

                EW_ATTRIB       データ属性の誤り
                                PMCアドレスの種類(adr_type)、またはPMCデータの
                                型(data_type)の指定が不適切です。


CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 2) PMCの任意データのライト(範囲指定)

関数名  pmc_wrpmcrng

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI pmc_wrpmcrng(unsigned short FlibHndl,
                                                short length, IODBPMC *buf);

解説    指定されたPMCアドレス/範囲のPMCデータを書き込みます。

        MMCのアプリケーションとPMCのラダーソフトとの間のデータのやり取りに使用
        します。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        length  データブロック長を指定します。
                type_dが 0(バイト型)の場合：length = 8 + N
                type_dが 1(ワード型)の場合：length = 8 + N * 2
                type_dが 2(ロング型)の場合：length = 8 + N * 4

                ※ Nは書き換えるデータの個数

        buf     書き換えるデータを指定するIODBPMC構造体へのポインタです。
                IODBPMC構造体は次の通りです。
                typedef struct  iodbpmc {
                        short   type_a ;        /* PMCアドレスの種類 */
                        short   type_d ;        /* PMCデータの型 */
                        short   datano_s ;      /* 出力開始PMCアドレス */
                        short   datano_e ;      /* 出力終了PMCアドレス */
                        union {
                                char    cdata[N] ;/* PMCデータ(バイト型) */
                                short   idata[N] ;/*          (ワード型) */
                                long    ldata[N] ;/*        　(ロング型) */
                        } u ;           /* N は書き換えるデータの個数 */
                } IODBPMC ;

                type_a  リードするPMCアドレスの種類に対応した識別コードを指定し
                        ます。

                type_d  PMCデータの型を指定します。
                        PMC側のデータの型と同じものを指定してください。
                          0：バイト型
                          1：ワード型
                          2：ロング型

                datano_s
                        ライトを開始するPMCアドレス番号を指定します。

                datano_e
                        ライトを終了するPMCアドレス番号を指定します。


        指定できるアドレスの種類、開始アドレス、終了アドレスは「PMCの任意デー
        タのリード(範囲指定)(pmc_rdpmcrng)」の「PMCデータ参照可能領域」を参照
        してください。

        引数の指定例
        ~~~~~~~~~~~~
                (1) D0100 (ワード型とします) に 250 を書き込む。
                        buf.type_a      9
                        buf.type_d      1
                        buf.datano_s    100
                        buf.datano_e    101
                        length          8+2*1 (=10)
                        buf.u.idata[0]  250

                (2) R0200〜R0209 (バイト型とします) のすべてに 0 を書き込む。
                        buf.type_a      5
                        buf.type_d      0
                        buf.datano_s    200
                        buf.datano_e    209
                        length          8+1*10 (=18)
                        buf.u.cdata[0]  すべて 0
                        〜buf.u.cdata[9]

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照してください）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_NOPMC        PMCが存在しません。

                EW_LENGTH       データブロック長の誤り
                                IODBPMC構造体のサイズ(length)が不正です。

                EW_NUMBER       データ番号の誤り
                                PMCアドレス番号(datano_s, datano_e)の指定が不適
                                切です。

                EW_ATTRIB       データ属性の誤り
                                PMCアドレスの種類(type_a)、またはPMCデータの型
                                (type_d)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。

CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

  ( 3) ＰＭＣデータ情報のリード

関数名  pmc_rdpmcinfo

宣言    #include        "Fwlib32.h"
        FWLIBAPI short WINAPI pmc_rdpmcinfo(unsigned short FlibHndl,
                                        short adr_type, ODBPMCINF *pmcif);

解説    PMCの種類別の属性、アドレスの有効範囲等のデータ情報を読みだします。

引数    FlibHndl
                ライブラリを使用するプロセスを識別します。
                cnc_allclibhndl(), cnc_allclibhndl2() で取得したライブラリ
                ハンドルを指定します。

        adr_type
                PMCアドレスの種類を指定します。
                        0 〜 : pmc_rdpmcrng()関数の表参照
                        -1   : 全アドレス情報

        pmcif   データ情報を返すODBPMCINF構造体へのポインタです。
                ODBPMCINF構造体は次の通りです。
                typedef struct odbpmcinf {
                   short        datano ;        /* PMCデータ情報の個数 */
                   struct       {
                      char           pmc_adr ;  /* PMCアドレスの種類 */
                      char           adr_attr ; /* PMCアドレスの属性 */
                      unsigned short top_num ;  /* PMCアドレスの先頭番号 */
                      unsigned short last_num ; /* PMCアドレスの最終番号 */
                   } info[64] ;
                } ODBPMCINF ;

                datano          PMCデータ情報の個数 (1 - 64)
                                * 同じPMCアドレスが複数個に分割されている場
                                  合があります。
                pmc_adr         PMCアドレスの種類 (ASCII CODE)
                adr_attr        PMCアドレスの属性
                                    bit 7 : 書き込み禁止
                                                0 : 可          1 : 不可
                                    bit 0〜6 : (未使用)
                top_num         PMCアドレスの先頭番号
                last_num        PMCアドレスの最終番号
                                    * pmc_rdpmcrng()関数の表を参照ください。

戻り値  成功すると EW_OK を返し、エラーの場合は EW_OK 以外の値を返します。
        主なエラーは以下の通りです。
        （その他のエラーについては、『ライブラリの戻り値』を参照して下さい）
                ───────────────────────────────
                戻り値          意味／対処方法
                ───────────────────────────────
                EW_ATTRIB       データ属性の誤り
                                データの種類(adr_type)の指定が不適切です。

CNCオプション   本機能にオプションは必要ありません。。


CNCパラメータ   本機能にパラメータは関係しません。

CNCモード       すべてのモードで使用できます。

