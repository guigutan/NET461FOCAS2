<?xml version="1.0" encoding="Shift_JIS"?>
<?xml-stylesheet type="text/xsl" href="../Fmethod_xsl/fmethod_he_c.xsl"?>

<root>
  <func>


    <!-- 関数名 -->
    <title>cnc_rdproginfo</title>



    <!-- 関数宣言 -->
    <declare>
      <!-- Visual C++の宣言 -->
      <vc>
        <include>#include "fwlib32.h"</include>
        <prottype>FWLIBAPI short WINAPI cnc_rdproginfo(unsigned short FlibHndl, short type, short length, ODBNC *prginfo);</prottype>
      </vc>
    </declare>



    <!-- 解説 -->
    <doc>
        <cmn>
            <p>
                加工プログラムの管理データは、
                <ul>
                    <li>登録されているプログラムの数(0i-F, 30iの場合、システムで用意されたフォルダ数が加算されます)</li>
                    <li>登録可能なプログラムの残り数</li>
                    <li>使用済みのメモリ領域(キャラクタ数)</li>
                    <li>使用可能なメモリ領域の残り数(キャラクタ数)</li>
                </ul>
                です。これらの情報をバイナリ形式、またはASCII文字列形式で取得できます。
                </p>
        </cmn>
    </doc>



    <!-- 引数 -->
    <argument>
        <common>
            <vc>
                <item>
                    <name>FlibHndl</name>
                    <type>in</type>
                    <content>
                        <p>
                            ライブラリハンドルです。詳細は、「<a href="handle.htm" target="_parent">ライブラリハンドル</a>」を参照して下さい。
                        </p>
                    </content>
                </item>
                <item>
                    <name>type</name>
                    <type>in</type>
                    <content>
                        <p>出力フォーマットを指定します。</p>
                        <table class="dd">
                            <tr>
                                <td>0</td><td>:</td><td>バイナリ</td>
                            </tr>
                            <tr>
                                <td>1</td><td>:</td><td>ASCII</td>
                            </tr>
                        </table>
                    </content>
                </item>
                <item>
                    <name>length</name>
                    <type>in</type>
                    <content>
                        <p>データブロック長を指定します。</p>
                        <ul>
                            <table>
                                <tr>
                                    <td>12</td><td>:</td><td>バイナリ</td>
                                </tr>
                                <tr>
                                    <td>31</td><td>:</td><td>ASCII</td>
                                </tr>
                            </table>
                        </ul>
                    </content>
                </item>
                <item>
                    <name>prginfo</name>
                    <type>out</type>
                    <content>
                        <p>
                        プログラムディレトクリを返すODBNC構造体へのポインタです。<br/>
                        ODBNC構造体は次の通りです。</p>
<pre>
typedef struct odbnc {
     union {
        struct {
             short   reg_prg ;   /* 登録済プログラム数 */
             short   unreg_prg ; /* 未登録プログラム数 */
             long    used_mem ;  /* 使用済メモリ領域(文字数) */
             long    unused_mem ;/* 未使用メモリ領域(文字数) */
        } bin ;
        char asc[31] ;           /* ASCII形式用バッファ */
     } u ;
} ODBNC ;
</pre>
                        <dl>
                            <dt>type=0の時</dt>
                                <dd>構造体の各メンバにバイナリ形式で値が格納されます。</dd><br/>
                                <table class="dd">
                                    <colgroup width="45%">
                                    <tr>
                                        <td>prginfo.bin.reg_prg</td>
                                        <td>登録済プログラム数</td>
                                    </tr>
                                    <tr>
                                        <td>prginfo.bin.unreg_prg</td>
                                        <td>未登録プログラム数</td>
                                    </tr>
                                    <tr>
                                        <td>prginfo.bin.used_mem</td>
                                        <td>使用済メモリ領域(キャラクタ数)</td>
                                    </tr>
                                    <tr>
                                        <td>prginfo.bin.unused_mem</td>
                                        <td>未使用メモリ領域(キャラクタ数)</td>
                                    </tr>
                                    </colgroup>
                                </table>

                            <dt>type=1の時</dt>
                                <dd>prginfo.u.asc に以下の形式のASCII文字列が格納されます。</dd><br/>
                                <blockquote>
                                % LF d1 LF d2 LF d3 LF d4 LF %
                                </blockquote>

                                ただし<br/>
                                <table class="dd">
                                    <colgroup width="5%">
                                    <tr>
                                        <td>LF</td>
                                        <td>0x0A ('\n')</td>
                                    </tr>
                                    <tr>
                                        <td>d1</td>
                                        <td>登録済みプログラム数</td>
                                    </tr>
                                    <tr>
                                        <td>d2</td>
                                        <td>未登録プログラム数(登録可能な残りプログラム数)</td>
                                    </tr>
                                    <tr>
                                        <td>d3</td>
                                        <td>使用済メモリ領域(キャラクタ数)</td>
                                    </tr>
                                    <tr>
                                        <td>d4</td>
                                        <td>未使用メモリ領域(使用可能な残りメモリ領域)(キャラクタ数)</td>
                                    </tr>
                                    </colgroup>
                                </table>
                                d1〜d4は先行する'0'が省略されたASCII文字列です。
                        </dl>
                    </content>
                </item>
            </vc>
        </common>
        
        <is>
            <hssb>
                <vc>
                    <item>
                        <name>FlibHndl</name>
                        <type>in</type>
                        <content>
                            <p>
                                ライブラリハンドルです。詳細は、「<a href="handle.htm" target="_parent">ライブラリハンドル</a>」を参照して下さい。
                            </p>
                        </content>
                    </item>
                    <item>
                        <name>type</name>
                        <type>in</type>
                        <content>
                            <p>出力フォーマットを指定します。</p>
                            <table class="dd">
                                <tr>
                                    <td>0</td><td>:</td><td>バイナリ</td>
                                </tr>
                                <tr>
                                    <td>1</td><td>:</td><td>ASCII</td>
                                </tr>
                            </table>
                        </content>
                    </item>
                    <item>
                        <name>length</name>
                        <type>in</type>
                        <content>
                            <p>データブロック長を指定します。</p>
                            <table class="dd">
                                <tr>
                                    <td>12</td><td>:</td><td>バイナリ</td>
                                </tr>
                                <tr>
                                    <td>31</td><td>:</td><td>ASCII</td>
                                </tr>
                            </table>
                        </content>
                    </item>
                    <item>
                        <name>prginfo</name>
                        <type>out</type>
                        <content>
                            <p>
                            プログラムディレトクリを返すODBNC構造体へのポインタです。<br/>
                            ODBNC構造体は次の通りです。</p>
<pre>
typedef struct odbnc {
     union {
        struct {
             short   reg_prg ;   /* 登録済プログラム数 */
             short   unreg_prg ; /* 未登録プログラム数 */
             long    used_mem ;  /* 使用済メモリ領域(文字数) */
             long    unused_mem ;/* 未使用メモリ領域(文字数) */
        } bin ;
        char asc[31] ;           /* ASCII形式用バッファ */
     } u ;
} ODBNC ;
</pre>
                            <dl>
                                <dt>type=0の時</dt>
                                    <dd>構造体の各メンバにバイナリ形式で値が格納されます。</dd><br/>
                                    <table class="dd">
                                        <colgroup width="45%">
                                        <tr>
                                            <td>prginfo.bin.reg_prg</td>
                                            <td>登録済プログラム数</td>
                                        </tr>
                                        <tr>
                                            <td>prginfo.bin.unreg_prg</td>
                                            <td>未登録プログラム数</td>
                                        </tr>
                                        <tr>
                                            <td>prginfo.bin.used_mem</td>
                                            <td>使用済メモリ領域(キャラクタ数)</td>
                                        </tr>
                                        <tr>
                                            <td>prginfo.bin.unused_mem</td>
                                            <td>未使用メモリ領域(キャラクタ数)</td>
                                        </tr>
                                        </colgroup>
                                    </table>

                                <dt>type=1の時</dt>
                                    <dd>prginfo.u.asc に以下の形式のASCII文字列が格納されます。</dd><br/>
                                    <blockquote>
                                    % LF d1 LF d2 LF d3 LF d4 LF %
                                    </blockquote>

                                    ただし<br/>
                                    <table class="dd">
                                        <colgroup width="5%">
                                        <tr>
                                            <td>LF</td>
                                            <td>0x0A ('\n')</td>
                                        </tr>
                                        <tr>
                                            <td>d1</td>
                                            <td>登録済みプログラム数</td>
                                        </tr>
                                        <tr>
                                            <td>d2</td>
                                            <td>未登録プログラム数(登録可能な残りプログラム数)</td>
                                        </tr>
                                        <tr>
                                            <td>d3</td>
                                            <td>使用済メモリ領域(キャラクタ数)</td>
                                        </tr>
                                        <tr>
                                            <td>d4</td>
                                            <td>未使用メモリ領域(使用可能な残りメモリ領域)(キャラクタ数)</td>
                                        </tr>
                                        </colgroup>
                                    </table>
                                    d1〜d4は先行する'0'が省略されたASCII文字列です。
                            </dl>
                        </content>
                    </item>
                </vc>
            </hssb>
        </is>
    </argument>



    <!-- 戻り値 -->
    <errcode>
        <item>
            <name>EW_LENGTH</name>
            <content>
                データブロック長の誤り<br/>
                ブロック長(length)が不正です。
            </content>
        </item>
        <item>
            <name>EW_ATTRIB</name>
            <content>
                データ属性の誤り<br/>
                出力フォーマット(type)が不正です。
            </content>
        </item>
    </errcode>



    <!-- CNCオプション -->
    <option>
        <hssb>拡張ドライバ/ライブラリ機能が必要です。</hssb>
        <ethr>
              <p>イーサネット機能と拡張ドライバ/ライブラリ機能が必要です。</p>
              <p>但し、Series 16i/18i/21i-B, 0i-B/C/D/F, Series 30i, PMi-A に関しては次のようになります。</p>
              <p>組込みイーサネットを使用のとき、</p>
              <p><ul>上記２つの機能は必要ありません。</ul></p>
              <p>イーサネットボードを使用のとき、</p>
              <p><ul>イーサネット機能のみ必要です。</ul></p>
        </ethr>
    </option>



    <!-- CNCパラメータ -->
    <parameter>
    </parameter>

    <is_parameter>
    </is_parameter>



    <!-- CNCモード -->
    <mode>
    </mode>

    <is_mode>
    </is_mode>



    <!-- 対応機種 -->
    <support>
        <!-- M（ミリング） -->
        <m>
            <fs0ia>H</fs0ia>
            <fs0ib>O</fs0ib>
            <fs0id>O</fs0id>
            <fs0if>O</fs0if>
            <fs15>H</fs15>
            <fs15i>O</fs15i>
            <fs16>H</fs16>
            <fs18>H</fs18>
            <fs21>H</fs21>
            <fs16ia>O</fs16ia>
            <fs18ia>O</fs18ia>
            <fs21ia>O</fs21ia>
            <fs16ib>O</fs16ib>
            <fs18ib>O</fs18ib>
            <fs21ib>O</fs21ib>
            <fs30ia>O</fs30ia>
            <fs30ib>O</fs30ib>
        </m>
        <!-- T（旋盤） -->
        <t>
            <fs0ia>H</fs0ia>
            <fs0ib>O</fs0ib>
            <fs0id>O</fs0id>
            <fs0if>O</fs0if>
            <fs15>H</fs15>
            <fs15i>X</fs15i>
            <fs16>H</fs16>
            <fs18>H</fs18>
            <fs21>H</fs21>
            <fs16ia>O</fs16ia>
            <fs18ia>O</fs18ia>
            <fs21ia>O</fs21ia>
            <fs16ib>O</fs16ib>
            <fs18ib>O</fs18ib>
            <fs21ib>O</fs21ib>
            <fs30ia>O</fs30ia>
            <fs30ib>O</fs30ib>
        </t>
        <!-- LC（ローダ制御） -->
        <lc>
            <fs0ia>X</fs0ia>
            <fs0ib>X</fs0ib>
            <fs0id>X</fs0id>
            <fs0if>X</fs0if>
            <fs15>X</fs15>
            <fs15i>X</fs15i>
            <fs16>H</fs16>
            <fs18>H</fs18>
            <fs21>H</fs21>
            <fs16ia>H</fs16ia>
            <fs18ia>H</fs18ia>
            <fs21ia>H</fs21ia>
            <fs16ib>H</fs16ib>
            <fs18ib>H</fs18ib>
            <fs21ib>H</fs21ib>
            <fs30ia>X</fs30ia>
            <fs30ib>X</fs30ib>
        </lc>
        <!-- P（パンチプレス） -->
        <p>
            <fs0id>O</fs0id>
            <fs0if>O</fs0if>
            <fs16i>O</fs16i>
            <fs18i>O</fs18i>
            <fs30ia>X</fs30ia>
            <fs30ib>O</fs30ib>
        </p>
        <!-- L（レーザ） -->
        <l>
            <fs0id>X</fs0id>
            <fs0if>X</fs0if>
            <fs16i>O</fs16i>
            <fs18i>X</fs18i>
            <fs30ia>X</fs30ia>
            <fs30ib>O</fs30ib>
        </l>
        <!-- W（ワイヤカット） -->
        <w>
            <fs0id>X</fs0id>
            <fs0if>X</fs0if>
            <fs16i>O</fs16i>
            <fs18i>O</fs18i>
            <fs30ia>O</fs30ia>
            <fs30ib>O</fs30ib>
        </w>
        <!-- PM（パワーメート） -->
        <pw>
            <d>O</d>
            <h>O</h>
            <a>O</a>
        </pw>
        
        <is>
            <!-- M（ミリング） -->
            <m>
                <fs30isa>O</fs30isa>
                <fs30isb>O</fs30isb>
            </m>
            <!-- T（旋盤） -->
            <t>
                <fs30isa>O</fs30isa>
                <fs30isb>O</fs30isb>
            </t>
            <!-- W（ワイヤカット） -->
            <w>
                <fs30isa>O</fs30isa>
                <fs30isb>O</fs30isb>
            </w>
        </is>
    </support>



    <!-- 参照 -->
    <reference>
    </reference>



    <example>
<vc>
以下のプログラムはNCプログラムの管理データを読みだし、画面に表示します。

#include "fwlib32.h"

void example( void )
{
        ODBNC buf ;
        short ret ;
        ret = cnc_rdproginfo( h, 0, 16, &#38;buf ) ;
        if ( ret )
                printf( "ERROR: %d\n", ret ) ;
        else {
                printf( "Registered program number   = %d\n",
                        buf.u.bin.reg_prg ) ;
                printf( "Registerable program number = %d\n",
                        buf.u.bin.unreg_prg ) ;
                printf( "Used memory                 = %ld\n",
                        buf.u.bin.used_mem ) ;
                printf( "Free memory                 = %ld\n",
                        buf.u.bin.unused_mem ) ;
        }
}
</vc>
    </example>



  </func>
</root>
